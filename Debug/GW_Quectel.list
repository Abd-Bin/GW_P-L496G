
GW_Quectel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e63c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  0800e7e8  0800e7e8  0001e7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e888  0800e888  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  0800e888  0800e888  0001e888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e890  0800e890  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e890  0800e890  0001e890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e894  0800e894  0001e894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800e898  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023d4  20000190  0800ea28  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002564  0800ea28  00022564  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d3c1  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000568f  00000000  00000000  0004d581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025b0  00000000  00000000  00052c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002390  00000000  00000000  000551c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00032d3f  00000000  00000000  00057550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002da87  00000000  00000000  0008a28f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00124bab  00000000  00000000  000b7d16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001dc8c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a1ec  00000000  00000000  001dc914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000190 	.word	0x20000190
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800e7d0 	.word	0x0800e7d0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000194 	.word	0x20000194
 80001e8:	0800e7d0 	.word	0x0800e7d0

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b09e      	sub	sp, #120	; 0x78
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f001 fed6 	bl	80022b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f881 	bl	8000610 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800050e:	f000 f8e1 	bl	80006d4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000512:	f000 fe53 	bl	80011bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000516:	f000 f937 	bl	8000788 <MX_ADC1_Init>
  MX_ADC2_Init();
 800051a:	f000 f9ab 	bl	8000874 <MX_ADC2_Init>
  MX_ADC3_Init();
 800051e:	f000 fa0d 	bl	800093c <MX_ADC3_Init>
  MX_DCMI_Init();
 8000522:	f000 fa6f 	bl	8000a04 <MX_DCMI_Init>
  MX_DFSDM1_Init();
 8000526:	f000 faa1 	bl	8000a6c <MX_DFSDM1_Init>
  MX_FMC_Init();
 800052a:	f000 fd99 	bl	8001060 <MX_FMC_Init>
  MX_I2C1_Init();
 800052e:	f000 fb09 	bl	8000b44 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000532:	f000 fb47 	bl	8000bc4 <MX_I2C2_Init>
  MX_LPUART1_UART_Init();
 8000536:	f000 fb85 	bl	8000c44 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 800053a:	f000 fbb1 	bl	8000ca0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800053e:	f000 fbdf 	bl	8000d00 <MX_USART2_UART_Init>
  MX_QUADSPI_Init();
 8000542:	f000 fc0d 	bl	8000d60 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000546:	f000 fc37 	bl	8000db8 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 800054a:	f000 fcdd 	bl	8000f08 <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 800054e:	f000 fd0b 	bl	8000f68 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000552:	f000 fd47 	bl	8000fe4 <MX_SPI2_Init>
  MX_USB_DEVICE_Init();
 8000556:	f00d fb0d 	bl	800db74 <MX_USB_DEVICE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800055a:	f000 f8f1 	bl	8000740 <MX_NVIC_Init>

	           }
 */


	              char data[] = "ATI\r\n";
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <main+0xfc>)
 8000560:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000568:	6018      	str	r0, [r3, #0]
 800056a:	3304      	adds	r3, #4
 800056c:	8019      	strh	r1, [r3, #0]
	 	    	  char rsp[100];
	 	    	  char *buffer = "ATI\r\n";
 800056e:	4b23      	ldr	r3, [pc, #140]	; (80005fc <main+0xfc>)
 8000570:	677b      	str	r3, [r7, #116]	; 0x74
	 	    	  char *rec_buffer = NULL;
 8000572:	2300      	movs	r3, #0
 8000574:	673b      	str	r3, [r7, #112]	; 0x70


	 	   memset(rsp,0,sizeof(rsp));
 8000576:	1d3b      	adds	r3, r7, #4
 8000578:	2264      	movs	r2, #100	; 0x64
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f00e f91f 	bl	800e7c0 <memset>
	 	   memset(rec_buffer,0,sizeof(rec_buffer));
 8000582:	2204      	movs	r2, #4
 8000584:	2100      	movs	r1, #0
 8000586:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8000588:	f00e f91a 	bl	800e7c0 <memset>



     if(HAL_UART_Transmit(&huart1,(uint8_t *)data,strlen(data),500) == HAL_OK)
 800058c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000590:	4618      	mov	r0, r3
 8000592:	f7ff fe2b 	bl	80001ec <strlen>
 8000596:	4603      	mov	r3, r0
 8000598:	b29a      	uxth	r2, r3
 800059a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800059e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80005a2:	4817      	ldr	r0, [pc, #92]	; (8000600 <main+0x100>)
 80005a4:	f008 fbe9 	bl	8008d7a <HAL_UART_Transmit>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d1d7      	bne.n	800055e <main+0x5e>
	      {
	    	  HAL_UART_Receive(&huart1,(uint8_t *)rsp,sizeof(rsp),1000);
 80005ae:	1d39      	adds	r1, r7, #4
 80005b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005b4:	2264      	movs	r2, #100	; 0x64
 80005b6:	4812      	ldr	r0, [pc, #72]	; (8000600 <main+0x100>)
 80005b8:	f008 fc73 	bl	8008ea2 <HAL_UART_Receive>
	    	  HAL_UART_Transmit(&huart2,(uint8_t *)rsp, strlen(rsp),100);
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe14 	bl	80001ec <strlen>
 80005c4:	4603      	mov	r3, r0
 80005c6:	b29a      	uxth	r2, r3
 80005c8:	1d39      	adds	r1, r7, #4
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <main+0x104>)
 80005ce:	f008 fbd4 	bl	8008d7a <HAL_UART_Transmit>
	    	  HAL_UART_Transmit(&huart2,(uint8_t *)"\r\n\r\n",8,10);
 80005d2:	230a      	movs	r3, #10
 80005d4:	2208      	movs	r2, #8
 80005d6:	490c      	ldr	r1, [pc, #48]	; (8000608 <main+0x108>)
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <main+0x104>)
 80005da:	f008 fbce 	bl	8008d7a <HAL_UART_Transmit>
	    	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80005de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e2:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x10c>)
 80005e4:	f003 fbaa 	bl	8003d3c <HAL_GPIO_TogglePin>
	    	  HAL_Delay(500);
 80005e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ec:	f001 fed8 	bl	80023a0 <HAL_Delay>
	    	  HAL_GPIO_TogglePin(LED1_GPIO_Port,LED1_Pin);
 80005f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f4:	4805      	ldr	r0, [pc, #20]	; (800060c <main+0x10c>)
 80005f6:	f003 fba1 	bl	8003d3c <HAL_GPIO_TogglePin>
  {
 80005fa:	e7b0      	b.n	800055e <main+0x5e>
 80005fc:	0800e7e8 	.word	0x0800e7e8
 8000600:	200004e4 	.word	0x200004e4
 8000604:	20000568 	.word	0x20000568
 8000608:	0800e7f0 	.word	0x0800e7f0
 800060c:	48000400 	.word	0x48000400

08000610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b096      	sub	sp, #88	; 0x58
 8000614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000616:	f107 0314 	add.w	r3, r7, #20
 800061a:	2244      	movs	r2, #68	; 0x44
 800061c:	2100      	movs	r1, #0
 800061e:	4618      	mov	r0, r3
 8000620:	f00e f8ce 	bl	800e7c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000624:	463b      	mov	r3, r7
 8000626:	2200      	movs	r2, #0
 8000628:	601a      	str	r2, [r3, #0]
 800062a:	605a      	str	r2, [r3, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	60da      	str	r2, [r3, #12]
 8000630:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000632:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000636:	f004 fe9f 	bl	8005378 <HAL_PWREx_ControlVoltageScaling>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000640:	f000 ff4c 	bl	80014dc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000644:	f004 fe7a 	bl	800533c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000648:	4b21      	ldr	r3, [pc, #132]	; (80006d0 <SystemClock_Config+0xc0>)
 800064a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800064e:	4a20      	ldr	r2, [pc, #128]	; (80006d0 <SystemClock_Config+0xc0>)
 8000650:	f023 0318 	bic.w	r3, r3, #24
 8000654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000658:	2314      	movs	r3, #20
 800065a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 8000668:	2390      	movs	r3, #144	; 0x90
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066c:	2302      	movs	r3, #2
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000670:	2301      	movs	r3, #1
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000674:	2305      	movs	r3, #5
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 8000678:	2347      	movs	r3, #71	; 0x47
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067c:	2302      	movs	r3, #2
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 8000684:	2306      	movs	r3, #6
 8000686:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4618      	mov	r0, r3
 800068e:	f004 ffab 	bl	80055e8 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000698:	f000 ff20 	bl	80014dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2303      	movs	r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f005 fbb1 	bl	8005e1c <HAL_RCC_ClockConfig>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80006c0:	f000 ff0c 	bl	80014dc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80006c4:	f006 fe82 	bl	80073cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80006c8:	bf00      	nop
 80006ca:	3758      	adds	r7, #88	; 0x58
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40021000 	.word	0x40021000

080006d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0a4      	sub	sp, #144	; 0x90
 80006d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	228c      	movs	r2, #140	; 0x8c
 80006de:	2100      	movs	r1, #0
 80006e0:	4618      	mov	r0, r3
 80006e2:	f00e f86d 	bl	800e7c0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB
 80006e6:	4b14      	ldr	r3, [pc, #80]	; (8000738 <PeriphCommonClock_Config+0x64>)
 80006e8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_ADC;
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006fa:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 80006fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000702:	2301      	movs	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 5;
 8000706:	2305      	movs	r3, #5
 8000708:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800070a:	2314      	movs	r3, #20
 800070c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000716:	2302      	movs	r3, #2
 8000718:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <PeriphCommonClock_Config+0x68>)
 800071c:	623b      	str	r3, [r7, #32]
                              |RCC_PLLSAI1_ADC1CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f005 fd9f 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800072c:	f000 fed6 	bl	80014dc <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3790      	adds	r7, #144	; 0x90
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	00086800 	.word	0x00086800
 800073c:	01110000 	.word	0x01110000

08000740 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* SPI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8000744:	2200      	movs	r2, #0
 8000746:	2102      	movs	r1, #2
 8000748:	2023      	movs	r0, #35	; 0x23
 800074a:	f002 ff04 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800074e:	2023      	movs	r0, #35	; 0x23
 8000750:	f002 ff1d 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* SPI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SPI2_IRQn, 1, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2101      	movs	r1, #1
 8000758:	2024      	movs	r0, #36	; 0x24
 800075a:	f002 fefc 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800075e:	2024      	movs	r0, #36	; 0x24
 8000760:	f002 ff15 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2025      	movs	r0, #37	; 0x25
 800076a:	f002 fef4 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 800076e:	2025      	movs	r0, #37	; 0x25
 8000770:	f002 ff0d 	bl	800358e <HAL_NVIC_EnableIRQ>
  /* OTG_FS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2043      	movs	r0, #67	; 0x43
 800077a:	f002 feec 	bl	8003556 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800077e:	2043      	movs	r0, #67	; 0x43
 8000780:	f002 ff05 	bl	800358e <HAL_NVIC_EnableIRQ>
}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}

08000788 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08a      	sub	sp, #40	; 0x28
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800078e:	f107 031c 	add.w	r3, r7, #28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
 80007a8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007aa:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ac:	4a2f      	ldr	r2, [pc, #188]	; (800086c <MX_ADC1_Init+0xe4>)
 80007ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007bc:	4b2a      	ldr	r3, [pc, #168]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007c2:	4b29      	ldr	r3, [pc, #164]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007c8:	4b27      	ldr	r3, [pc, #156]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ca:	2204      	movs	r2, #4
 80007cc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ce:	4b26      	ldr	r3, [pc, #152]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b23      	ldr	r3, [pc, #140]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e0:	4b21      	ldr	r3, [pc, #132]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007e8:	4b1f      	ldr	r3, [pc, #124]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ee:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	; (8000868 <MX_ADC1_Init+0xe0>)
 80007fe:	2200      	movs	r2, #0
 8000800:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000802:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000804:	2200      	movs	r2, #0
 8000806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800080a:	4817      	ldr	r0, [pc, #92]	; (8000868 <MX_ADC1_Init+0xe0>)
 800080c:	f001 ff8c 	bl	8002728 <HAL_ADC_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 fe61 	bl	80014dc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4810      	ldr	r0, [pc, #64]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000826:	f002 fd0b 	bl	8003240 <HAL_ADCEx_MultiModeConfigChannel>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000830:	f000 fe54 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000834:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_ADC1_Init+0xe8>)
 8000836:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000838:	2306      	movs	r3, #6
 800083a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800083c:	2300      	movs	r3, #0
 800083e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000840:	237f      	movs	r3, #127	; 0x7f
 8000842:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000844:	2304      	movs	r3, #4
 8000846:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	4619      	mov	r1, r3
 8000850:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_ADC1_Init+0xe0>)
 8000852:	f002 f8c3 	bl	80029dc <HAL_ADC_ConfigChannel>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800085c:	f000 fe3e 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	3728      	adds	r7, #40	; 0x28
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001ac 	.word	0x200001ac
 800086c:	50040000 	.word	0x50040000
 8000870:	10c00010 	.word	0x10c00010

08000874 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
 8000886:	611a      	str	r2, [r3, #16]
 8000888:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <MX_ADC2_Init+0xbc>)
 800088c:	4a29      	ldr	r2, [pc, #164]	; (8000934 <MX_ADC2_Init+0xc0>)
 800088e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000890:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_ADC2_Init+0xbc>)
 8000892:	2200      	movs	r2, #0
 8000894:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000896:	4b26      	ldr	r3, [pc, #152]	; (8000930 <MX_ADC2_Init+0xbc>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800089c:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_ADC2_Init+0xbc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008a2:	4b23      	ldr	r3, [pc, #140]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008a8:	4b21      	ldr	r3, [pc, #132]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008aa:	2204      	movs	r2, #4
 80008ac:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80008ae:	4b20      	ldr	r3, [pc, #128]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 80008ba:	4b1d      	ldr	r3, [pc, #116]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008bc:	2201      	movs	r2, #1
 80008be:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008c8:	4b19      	ldr	r3, [pc, #100]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80008d4:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80008ea:	4811      	ldr	r0, [pc, #68]	; (8000930 <MX_ADC2_Init+0xbc>)
 80008ec:	f001 ff1c 	bl	8002728 <HAL_ADC_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80008f6:	f000 fdf1 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008fa:	4b0f      	ldr	r3, [pc, #60]	; (8000938 <MX_ADC2_Init+0xc4>)
 80008fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008fe:	2306      	movs	r3, #6
 8000900:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000902:	2300      	movs	r3, #0
 8000904:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000906:	237f      	movs	r3, #127	; 0x7f
 8000908:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800090a:	2304      	movs	r3, #4
 800090c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000912:	463b      	mov	r3, r7
 8000914:	4619      	mov	r1, r3
 8000916:	4806      	ldr	r0, [pc, #24]	; (8000930 <MX_ADC2_Init+0xbc>)
 8000918:	f002 f860 	bl	80029dc <HAL_ADC_ConfigChannel>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8000922:	f000 fddb 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000214 	.word	0x20000214
 8000934:	50040100 	.word	0x50040100
 8000938:	25b00200 	.word	0x25b00200

0800093c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000942:	463b      	mov	r3, r7
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
 8000950:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000952:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000954:	4a29      	ldr	r2, [pc, #164]	; (80009fc <MX_ADC3_Init+0xc0>)
 8000956:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <MX_ADC3_Init+0xbc>)
 800095a:	2200      	movs	r2, #0
 800095c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800095e:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <MX_ADC3_Init+0xbc>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000972:	2204      	movs	r2, #4
 8000974:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000976:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000978:	2200      	movs	r2, #0
 800097a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800097c:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <MX_ADC3_Init+0xbc>)
 800097e:	2200      	movs	r2, #0
 8000980:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8000982:	4b1d      	ldr	r3, [pc, #116]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000984:	2201      	movs	r2, #1
 8000986:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000988:	4b1b      	ldr	r3, [pc, #108]	; (80009f8 <MX_ADC3_Init+0xbc>)
 800098a:	2200      	movs	r2, #0
 800098c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000990:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000992:	2200      	movs	r2, #0
 8000994:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <MX_ADC3_Init+0xbc>)
 8000998:	2200      	movs	r2, #0
 800099a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_ADC3_Init+0xbc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_ADC3_Init+0xbc>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_ADC3_Init+0xbc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80009b2:	4811      	ldr	r0, [pc, #68]	; (80009f8 <MX_ADC3_Init+0xbc>)
 80009b4:	f001 feb8 	bl	8002728 <HAL_ADC_Init>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 80009be:	f000 fd8d 	bl	80014dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009c2:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_ADC3_Init+0xc4>)
 80009c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c6:	2306      	movs	r3, #6
 80009c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ce:	237f      	movs	r3, #127	; 0x7f
 80009d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009d2:	2304      	movs	r3, #4
 80009d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80009da:	463b      	mov	r3, r7
 80009dc:	4619      	mov	r1, r3
 80009de:	4806      	ldr	r0, [pc, #24]	; (80009f8 <MX_ADC3_Init+0xbc>)
 80009e0:	f001 fffc 	bl	80029dc <HAL_ADC_ConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80009ea:	f000 fd77 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000027c 	.word	0x2000027c
 80009fc:	50040200 	.word	0x50040200
 8000a00:	36902000 	.word	0x36902000

08000a04 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000a08:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <MX_DCMI_Init+0x64>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8000a14:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000a20:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000a2c:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000a32:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000a50:	4804      	ldr	r0, [pc, #16]	; (8000a64 <MX_DCMI_Init+0x60>)
 8000a52:	f002 fdb7 	bl	80035c4 <HAL_DCMI_Init>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000a5c:	f000 fd3e 	bl	80014dc <Error_Handler>



  /* USER CODE END DCMI_Init 2 */

}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200002e4 	.word	0x200002e4
 8000a68:	50050000 	.word	0x50050000

08000a6c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000a70:	4b30      	ldr	r3, [pc, #192]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a72:	4a31      	ldr	r2, [pc, #196]	; (8000b38 <MX_DFSDM1_Init+0xcc>)
 8000a74:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a78:	2201      	movs	r2, #1
 8000a7a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000a7c:	4b2d      	ldr	r3, [pc, #180]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000a82:	4b2c      	ldr	r3, [pc, #176]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a84:	2202      	movs	r2, #2
 8000a86:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000a88:	4b2a      	ldr	r3, [pc, #168]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000a8e:	4b29      	ldr	r3, [pc, #164]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a94:	4b27      	ldr	r3, [pc, #156]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000a9a:	4b26      	ldr	r3, [pc, #152]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000aa2:	2204      	movs	r2, #4
 8000aa4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000aa6:	4b23      	ldr	r3, [pc, #140]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000aac:	4b21      	ldr	r3, [pc, #132]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000ab2:	4b20      	ldr	r3, [pc, #128]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000ab8:	4b1e      	ldr	r3, [pc, #120]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000abe:	481d      	ldr	r0, [pc, #116]	; (8000b34 <MX_DFSDM1_Init+0xc8>)
 8000ac0:	f002 fe06 	bl	80036d0 <HAL_DFSDM_ChannelInit>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8000aca:	f000 fd07 	bl	80014dc <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8000ace:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	; (8000b40 <MX_DFSDM1_Init+0xd4>)
 8000ad2:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8000ad4:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000ada:	4b18      	ldr	r3, [pc, #96]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000aec:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000af8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000afa:	4b10      	ldr	r3, [pc, #64]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000b02:	2204      	movs	r2, #4
 8000b04:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b06:	4b0d      	ldr	r3, [pc, #52]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8000b18:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_DFSDM1_Init+0xd0>)
 8000b20:	f002 fdd6 	bl	80036d0 <HAL_DFSDM_ChannelInit>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 8000b2a:	f000 fcd7 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	20000348 	.word	0x20000348
 8000b38:	40016020 	.word	0x40016020
 8000b3c:	20000380 	.word	0x20000380
 8000b40:	40016040 	.word	0x40016040

08000b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b4a:	4a1c      	ldr	r2, [pc, #112]	; (8000bbc <MX_I2C1_Init+0x78>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303651;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b50:	4a1b      	ldr	r2, [pc, #108]	; (8000bc0 <MX_I2C1_Init+0x7c>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b66:	4b14      	ldr	r3, [pc, #80]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b7e:	480e      	ldr	r0, [pc, #56]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b80:	f003 f8f6 	bl	8003d70 <HAL_I2C_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b8a:	f000 fca7 	bl	80014dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4809      	ldr	r0, [pc, #36]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000b92:	f003 f97c 	bl	8003e8e <HAL_I2CEx_ConfigAnalogFilter>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b9c:	f000 fc9e 	bl	80014dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4805      	ldr	r0, [pc, #20]	; (8000bb8 <MX_I2C1_Init+0x74>)
 8000ba4:	f003 f9be 	bl	8003f24 <HAL_I2CEx_ConfigDigitalFilter>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fc95 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200003b8 	.word	0x200003b8
 8000bbc:	40005400 	.word	0x40005400
 8000bc0:	00303651 	.word	0x00303651

08000bc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bca:	4a1c      	ldr	r2, [pc, #112]	; (8000c3c <MX_I2C2_Init+0x78>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303651;
 8000bce:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <MX_I2C2_Init+0x7c>)
 8000bd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bd4:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000be6:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000bfe:	480e      	ldr	r0, [pc, #56]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000c00:	f003 f8b6 	bl	8003d70 <HAL_I2C_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c0a:	f000 fc67 	bl	80014dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4809      	ldr	r0, [pc, #36]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000c12:	f003 f93c 	bl	8003e8e <HAL_I2CEx_ConfigAnalogFilter>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c1c:	f000 fc5e 	bl	80014dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c20:	2100      	movs	r1, #0
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_I2C2_Init+0x74>)
 8000c24:	f003 f97e 	bl	8003f24 <HAL_I2CEx_ConfigDigitalFilter>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 fc55 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000040c 	.word	0x2000040c
 8000c3c:	40005800 	.word	0x40005800
 8000c40:	00303651 	.word	0x00303651

08000c44 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c4a:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <MX_LPUART1_UART_Init+0x54>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000c4e:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c50:	4a12      	ldr	r2, [pc, #72]	; (8000c9c <MX_LPUART1_UART_Init+0x58>)
 8000c52:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c5a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b0a      	ldr	r3, [pc, #40]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c74:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c7a:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_LPUART1_UART_Init+0x50>)
 8000c82:	f008 f82c 	bl	8008cde <HAL_UART_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000c8c:	f000 fc26 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000460 	.word	0x20000460
 8000c98:	40008000 	.word	0x40008000
 8000c9c:	00033324 	.word	0x00033324

08000ca0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <MX_USART1_UART_Init+0x5c>)
 8000ca8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cb2:	4b11      	ldr	r3, [pc, #68]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000cbe:	4b0e      	ldr	r3, [pc, #56]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cc6:	220c      	movs	r2, #12
 8000cc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ccc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000cd0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd2:	4b09      	ldr	r3, [pc, #36]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ce4:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <MX_USART1_UART_Init+0x58>)
 8000ce6:	f007 fffa 	bl	8008cde <HAL_UART_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_USART1_UART_Init+0x54>
  {
    Error_Handler();
 8000cf0:	f000 fbf4 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	200004e4 	.word	0x200004e4
 8000cfc:	40013800 	.word	0x40013800

08000d00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_USART2_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART2_UART_Init+0x58>)
 8000d44:	f007 ffcb 	bl	8008cde <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f000 fbc5 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000568 	.word	0x20000568
 8000d5c:	40004400 	.word	0x40004400

08000d60 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000d64:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d66:	4a13      	ldr	r2, [pc, #76]	; (8000db4 <MX_QUADSPI_Init+0x54>)
 8000d68:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d6c:	2202      	movs	r2, #2
 8000d6e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d72:	2204      	movs	r2, #4
 8000d74:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000d76:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d78:	2210      	movs	r2, #16
 8000d7a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000d7c:	4b0c      	ldr	r3, [pc, #48]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d7e:	2217      	movs	r2, #23
 8000d80:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000d82:	4b0b      	ldr	r3, [pc, #44]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000d88:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000d8e:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_QUADSPI_Init+0x50>)
 8000d9c:	f004 fb62 	bl	8005464 <HAL_QSPI_Init>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000da6:	f000 fb99 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	200005ec 	.word	0x200005ec
 8000db4:	a0001000 	.word	0xa0001000

08000db8 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000dbc:	4b4d      	ldr	r3, [pc, #308]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dbe:	4a4e      	ldr	r2, [pc, #312]	; (8000ef8 <MX_SAI1_Init+0x140>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000dc2:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000dc8:	4b4a      	ldr	r3, [pc, #296]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dd0:	2240      	movs	r2, #64	; 0x40
 8000dd2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000dd4:	4b47      	ldr	r3, [pc, #284]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000de0:	4b44      	ldr	r3, [pc, #272]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000dec:	4b41      	ldr	r3, [pc, #260]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000df8:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000dfa:	4a40      	ldr	r2, [pc, #256]	; (8000efc <MX_SAI1_Init+0x144>)
 8000dfc:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e04:	4b3b      	ldr	r3, [pc, #236]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000e10:	4b38      	ldr	r3, [pc, #224]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e18:	2208      	movs	r2, #8
 8000e1a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000e1c:	4b35      	ldr	r3, [pc, #212]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000e28:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000e34:	4b2f      	ldr	r3, [pc, #188]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000e40:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e42:	2201      	movs	r2, #1
 8000e44:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000e4c:	4829      	ldr	r0, [pc, #164]	; (8000ef4 <MX_SAI1_Init+0x13c>)
 8000e4e:	f006 fd9d 	bl	800798c <HAL_SAI_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 8000e58:	f000 fb40 	bl	80014dc <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e5e:	4a29      	ldr	r2, [pc, #164]	; (8000f04 <MX_SAI1_Init+0x14c>)
 8000e60:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000e62:	4b27      	ldr	r3, [pc, #156]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8000e68:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 8000e6e:	4b24      	ldr	r3, [pc, #144]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e70:	2240      	movs	r2, #64	; 0x40
 8000e72:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000e74:	4b22      	ldr	r3, [pc, #136]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8000e80:	4b1f      	ldr	r3, [pc, #124]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000eac:	2208      	movs	r2, #8
 8000eae:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000eb6:	4b12      	ldr	r3, [pc, #72]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000ebc:	4b10      	ldr	r3, [pc, #64]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000ece:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000ed4:	4b0a      	ldr	r3, [pc, #40]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_SAI1_Init+0x148>)
 8000ee2:	f006 fd53 	bl	800798c <HAL_SAI_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000eec:	f000 faf6 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	20000638 	.word	0x20000638
 8000ef8:	40015404 	.word	0x40015404
 8000efc:	0002ee00 	.word	0x0002ee00
 8000f00:	200006bc 	.word	0x200006bc
 8000f04:	40015424 	.word	0x40015424

08000f08 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_SDMMC1_SD_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000f30:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000f36:	480a      	ldr	r0, [pc, #40]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f38:	f006 fed4 	bl	8007ce4 <HAL_SD_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_SDMMC1_SD_Init+0x3e>
  {
    Error_Handler();
 8000f42:	f000 facb 	bl	80014dc <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000f46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_SDMMC1_SD_Init+0x58>)
 8000f4c:	f007 f944 	bl	80081d8 <HAL_SD_ConfigWideBusOperation>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_SDMMC1_SD_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 fac1 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000740 	.word	0x20000740
 8000f64:	40012800 	.word	0x40012800

08000f68 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_SPI1_Init+0x78>)
 8000f70:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f78:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f7a:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f82:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f86:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f96:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000f9a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fb6:	2207      	movs	r2, #7
 8000fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_SPI1_Init+0x74>)
 8000fc8:	f007 fc7e 	bl	80088c8 <HAL_SPI_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f000 fa83 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200007c4 	.word	0x200007c4
 8000fe0:	40013000 	.word	0x40013000

08000fe4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000fe8:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <MX_SPI2_Init+0x74>)
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <MX_SPI2_Init+0x78>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_SPI2_Init+0x74>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_SPI2_Init+0x74>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000ffc:	4b16      	ldr	r3, [pc, #88]	; (8001058 <MX_SPI2_Init+0x74>)
 8000ffe:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001002:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <MX_SPI2_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800100a:	4b13      	ldr	r3, [pc, #76]	; (8001058 <MX_SPI2_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_SPI2_Init+0x74>)
 8001012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001016:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001018:	4b0f      	ldr	r3, [pc, #60]	; (8001058 <MX_SPI2_Init+0x74>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_SPI2_Init+0x74>)
 8001020:	2200      	movs	r2, #0
 8001022:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_SPI2_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_SPI2_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_SPI2_Init+0x74>)
 8001032:	2207      	movs	r2, #7
 8001034:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_SPI2_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_SPI2_Init+0x74>)
 800103e:	2208      	movs	r2, #8
 8001040:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_SPI2_Init+0x74>)
 8001044:	f007 fc40 	bl	80088c8 <HAL_SPI_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fa45 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000828 	.word	0x20000828
 800105c:	40003800 	.word	0x40003800

08001060 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2220      	movs	r2, #32
 800106a:	2100      	movs	r1, #0
 800106c:	4618      	mov	r0, r3
 800106e:	f00d fba7 	bl	800e7c0 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001072:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <MX_FMC_Init+0x150>)
 8001074:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001078:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800107a:	4b4d      	ldr	r3, [pc, #308]	; (80011b0 <MX_FMC_Init+0x150>)
 800107c:	4a4d      	ldr	r2, [pc, #308]	; (80011b4 <MX_FMC_Init+0x154>)
 800107e:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8001080:	4b4b      	ldr	r3, [pc, #300]	; (80011b0 <MX_FMC_Init+0x150>)
 8001082:	2202      	movs	r2, #2
 8001084:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001086:	4b4a      	ldr	r3, [pc, #296]	; (80011b0 <MX_FMC_Init+0x150>)
 8001088:	2200      	movs	r2, #0
 800108a:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800108c:	4b48      	ldr	r3, [pc, #288]	; (80011b0 <MX_FMC_Init+0x150>)
 800108e:	2200      	movs	r2, #0
 8001090:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001092:	4b47      	ldr	r3, [pc, #284]	; (80011b0 <MX_FMC_Init+0x150>)
 8001094:	2210      	movs	r2, #16
 8001096:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <MX_FMC_Init+0x150>)
 800109a:	2200      	movs	r2, #0
 800109c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800109e:	4b44      	ldr	r3, [pc, #272]	; (80011b0 <MX_FMC_Init+0x150>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80010a4:	4b42      	ldr	r3, [pc, #264]	; (80011b0 <MX_FMC_Init+0x150>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 80010aa:	4b41      	ldr	r3, [pc, #260]	; (80011b0 <MX_FMC_Init+0x150>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80010b0:	4b3f      	ldr	r3, [pc, #252]	; (80011b0 <MX_FMC_Init+0x150>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80010b6:	4b3e      	ldr	r3, [pc, #248]	; (80011b0 <MX_FMC_Init+0x150>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010bc:	4b3c      	ldr	r3, [pc, #240]	; (80011b0 <MX_FMC_Init+0x150>)
 80010be:	2200      	movs	r2, #0
 80010c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <MX_FMC_Init+0x150>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <MX_FMC_Init+0x150>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80010ce:	4b38      	ldr	r3, [pc, #224]	; (80011b0 <MX_FMC_Init+0x150>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80010d4:	4b36      	ldr	r3, [pc, #216]	; (80011b0 <MX_FMC_Init+0x150>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010da:	230f      	movs	r3, #15
 80010dc:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 80010de:	230f      	movs	r3, #15
 80010e0:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 80010e6:	230f      	movs	r3, #15
 80010e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010ea:	2310      	movs	r3, #16
 80010ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010ee:	2311      	movs	r3, #17
 80010f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80010f6:	463b      	mov	r3, r7
 80010f8:	2200      	movs	r2, #0
 80010fa:	4619      	mov	r1, r3
 80010fc:	482c      	ldr	r0, [pc, #176]	; (80011b0 <MX_FMC_Init+0x150>)
 80010fe:	f007 fda6 	bl	8008c4e <HAL_SRAM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_FMC_Init+0xac>
  {
    Error_Handler( );
 8001108:	f000 f9e8 	bl	80014dc <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FMC_NORSRAM_DEVICE;
 800110c:	4b2a      	ldr	r3, [pc, #168]	; (80011b8 <MX_FMC_Init+0x158>)
 800110e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001112:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <MX_FMC_Init+0x158>)
 8001116:	4a27      	ldr	r2, [pc, #156]	; (80011b4 <MX_FMC_Init+0x154>)
 8001118:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FMC_NORSRAM_BANK1;
 800111a:	4b27      	ldr	r3, [pc, #156]	; (80011b8 <MX_FMC_Init+0x158>)
 800111c:	2200      	movs	r2, #0
 800111e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <MX_FMC_Init+0x158>)
 8001122:	2200      	movs	r2, #0
 8001124:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8001126:	4b24      	ldr	r3, [pc, #144]	; (80011b8 <MX_FMC_Init+0x158>)
 8001128:	2200      	movs	r2, #0
 800112a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <MX_FMC_Init+0x158>)
 800112e:	2210      	movs	r2, #16
 8001130:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001132:	4b21      	ldr	r3, [pc, #132]	; (80011b8 <MX_FMC_Init+0x158>)
 8001134:	2200      	movs	r2, #0
 8001136:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <MX_FMC_Init+0x158>)
 800113a:	2200      	movs	r2, #0
 800113c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800113e:	4b1e      	ldr	r3, [pc, #120]	; (80011b8 <MX_FMC_Init+0x158>)
 8001140:	2200      	movs	r2, #0
 8001142:	621a      	str	r2, [r3, #32]
  hsram2.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001144:	4b1c      	ldr	r3, [pc, #112]	; (80011b8 <MX_FMC_Init+0x158>)
 8001146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800114a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800114c:	4b1a      	ldr	r3, [pc, #104]	; (80011b8 <MX_FMC_Init+0x158>)
 800114e:	2200      	movs	r2, #0
 8001150:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001152:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <MX_FMC_Init+0x158>)
 8001154:	2200      	movs	r2, #0
 8001156:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001158:	4b17      	ldr	r3, [pc, #92]	; (80011b8 <MX_FMC_Init+0x158>)
 800115a:	2200      	movs	r2, #0
 800115c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800115e:	4b16      	ldr	r3, [pc, #88]	; (80011b8 <MX_FMC_Init+0x158>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001164:	4b14      	ldr	r3, [pc, #80]	; (80011b8 <MX_FMC_Init+0x158>)
 8001166:	2200      	movs	r2, #0
 8001168:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800116a:	4b13      	ldr	r3, [pc, #76]	; (80011b8 <MX_FMC_Init+0x158>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <MX_FMC_Init+0x158>)
 8001172:	2200      	movs	r2, #0
 8001174:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001176:	230f      	movs	r3, #15
 8001178:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 800117a:	230f      	movs	r3, #15
 800117c:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 800117e:	23ff      	movs	r3, #255	; 0xff
 8001180:	60bb      	str	r3, [r7, #8]
  Timing.BusTurnAroundDuration = 15;
 8001182:	230f      	movs	r3, #15
 8001184:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001186:	2310      	movs	r3, #16
 8001188:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800118a:	2311      	movs	r3, #17
 800118c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2200      	movs	r2, #0
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	; (80011b8 <MX_FMC_Init+0x158>)
 800119a:	f007 fd58 	bl	8008c4e <HAL_SRAM_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_FMC_Init+0x148>
  {
    Error_Handler( );
 80011a4:	f000 f99a 	bl	80014dc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80011a8:	bf00      	nop
 80011aa:	3720      	adds	r7, #32
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	2000088c 	.word	0x2000088c
 80011b4:	a0000104 	.word	0xa0000104
 80011b8:	200008dc 	.word	0x200008dc

080011bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08e      	sub	sp, #56	; 0x38
 80011c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80011d2:	4bb3      	ldr	r3, [pc, #716]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d6:	4ab2      	ldr	r2, [pc, #712]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80011d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011de:	4bb0      	ldr	r3, [pc, #704]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e6:	623b      	str	r3, [r7, #32]
 80011e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ea:	4bad      	ldr	r3, [pc, #692]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ee:	4aac      	ldr	r2, [pc, #688]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80011f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f6:	4baa      	ldr	r3, [pc, #680]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001202:	4ba7      	ldr	r3, [pc, #668]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	4aa6      	ldr	r2, [pc, #664]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001208:	f043 0310 	orr.w	r3, r3, #16
 800120c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800120e:	4ba4      	ldr	r3, [pc, #656]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	f003 0310 	and.w	r3, r3, #16
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	4ba1      	ldr	r3, [pc, #644]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	4aa0      	ldr	r2, [pc, #640]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001226:	4b9e      	ldr	r3, [pc, #632]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b9b      	ldr	r3, [pc, #620]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	4a9a      	ldr	r2, [pc, #616]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800123e:	4b98      	ldr	r3, [pc, #608]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	613b      	str	r3, [r7, #16]
 8001248:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800124a:	4b95      	ldr	r3, [pc, #596]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	4a94      	ldr	r2, [pc, #592]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001250:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001256:	4b92      	ldr	r3, [pc, #584]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 8001262:	f004 f8ef 	bl	8005444 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001266:	4b8e      	ldr	r3, [pc, #568]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	4a8d      	ldr	r2, [pc, #564]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001272:	4b8b      	ldr	r3, [pc, #556]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b88      	ldr	r3, [pc, #544]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001282:	4a87      	ldr	r2, [pc, #540]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	64d3      	str	r3, [r2, #76]	; 0x4c
 800128a:	4b85      	ldr	r3, [pc, #532]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 800128c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001296:	4b82      	ldr	r3, [pc, #520]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 8001298:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129a:	4a81      	ldr	r2, [pc, #516]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a2:	4b7f      	ldr	r3, [pc, #508]	; (80014a0 <MX_GPIO_Init+0x2e4>)
 80012a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a6:	f003 0320 	and.w	r3, r3, #32
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_RESET);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2101      	movs	r1, #1
 80012b2:	487c      	ldr	r0, [pc, #496]	; (80014a4 <MX_GPIO_Init+0x2e8>)
 80012b4:	f002 fd2a 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRen_GPIO_Port, PWRen_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	2108      	movs	r1, #8
 80012bc:	487a      	ldr	r0, [pc, #488]	; (80014a8 <MX_GPIO_Init+0x2ec>)
 80012be:	f002 fd25 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin, GPIO_PIN_RESET);
 80012c2:	2200      	movs	r2, #0
 80012c4:	2143      	movs	r1, #67	; 0x43
 80012c6:	4879      	ldr	r0, [pc, #484]	; (80014ac <MX_GPIO_Init+0x2f0>)
 80012c8:	f002 fd20 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Audio_RST_GPIO_Port, Audio_RST_Pin, GPIO_PIN_RESET);
 80012cc:	2200      	movs	r2, #0
 80012ce:	2140      	movs	r1, #64	; 0x40
 80012d0:	4877      	ldr	r0, [pc, #476]	; (80014b0 <MX_GPIO_Init+0x2f4>)
 80012d2:	f002 fd1b 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	4875      	ldr	r0, [pc, #468]	; (80014b4 <MX_GPIO_Init+0x2f8>)
 80012de:	f002 fd15 	bl	8003d0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : JOY_DOWN_Pin JOY_LEFT_Pin JOY_UP_Pin */
  GPIO_InitStruct.Pin = JOY_DOWN_Pin|JOY_LEFT_Pin|JOY_UP_Pin;
 80012e2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80012ec:	2302      	movs	r3, #2
 80012ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	486b      	ldr	r0, [pc, #428]	; (80014a4 <MX_GPIO_Init+0x2e8>)
 80012f8:	f002 fb76 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_INT_Pin */
  GPIO_InitStruct.Pin = STMOD_INT_Pin;
 80012fc:	2304      	movs	r3, #4
 80012fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001300:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_INT_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4866      	ldr	r0, [pc, #408]	; (80014ac <MX_GPIO_Init+0x2f0>)
 8001312:	f002 fb69 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001316:	2301      	movs	r3, #1
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131a:	2301      	movs	r3, #1
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4619      	mov	r1, r3
 800132c:	485d      	ldr	r0, [pc, #372]	; (80014a4 <MX_GPIO_Init+0x2e8>)
 800132e:	f002 fb5b 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001332:	2340      	movs	r3, #64	; 0x40
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001342:	2303      	movs	r3, #3
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134a:	4619      	mov	r1, r3
 800134c:	4855      	ldr	r0, [pc, #340]	; (80014a4 <MX_GPIO_Init+0x2e8>)
 800134e:	f002 fb4b 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D3_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin|ARD_D9_Pin;
 8001352:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001356:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001364:	2303      	movs	r3, #3
 8001366:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136c:	4619      	mov	r1, r3
 800136e:	484f      	ldr	r0, [pc, #316]	; (80014ac <MX_GPIO_Init+0x2f0>)
 8001370:	f002 fb3a 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8001374:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001386:	2302      	movs	r3, #2
 8001388:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 800138a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138e:	4619      	mov	r1, r3
 8001390:	4848      	ldr	r0, [pc, #288]	; (80014b4 <MX_GPIO_Init+0x2f8>)
 8001392:	f002 fb29 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001396:	2380      	movs	r3, #128	; 0x80
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4840      	ldr	r0, [pc, #256]	; (80014ac <MX_GPIO_Init+0x2f0>)
 80013aa:	f002 fb1d 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PWRen_Pin */
  GPIO_InitStruct.Pin = PWRen_Pin;
 80013ae:	2308      	movs	r3, #8
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PWRen_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c2:	4619      	mov	r1, r3
 80013c4:	4838      	ldr	r0, [pc, #224]	; (80014a8 <MX_GPIO_Init+0x2ec>)
 80013c6:	f002 fb0f 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_WAKEUP_Pin LCD_PWR_ON_Pin MIC_VDD_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin|LCD_PWR_ON_Pin|MIC_VDD_Pin;
 80013ca:	2343      	movs	r3, #67	; 0x43
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2301      	movs	r3, #1
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	4832      	ldr	r0, [pc, #200]	; (80014ac <MX_GPIO_Init+0x2f0>)
 80013e2:	f002 fb01 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_RST_Pin */
  GPIO_InitStruct.Pin = Audio_RST_Pin;
 80013e6:	2340      	movs	r3, #64	; 0x40
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(Audio_RST_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	482c      	ldr	r0, [pc, #176]	; (80014b0 <MX_GPIO_Init+0x2f4>)
 80013fe:	f002 faf3 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8001402:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001408:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4827      	ldr	r0, [pc, #156]	; (80014b8 <MX_GPIO_Init+0x2fc>)
 800141a:	f002 fae5 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_CLK_Pin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 800141e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LPTIM2;
 8001430:	230e      	movs	r3, #14
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143e:	f002 fad3 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MFX_IRQ_OUT_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin;
 8001442:	2320      	movs	r3, #32
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001446:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MFX_IRQ_OUT_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001454:	4619      	mov	r1, r3
 8001456:	4816      	ldr	r0, [pc, #88]	; (80014b0 <MX_GPIO_Init+0x2f4>)
 8001458:	f002 fac6 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_RIGHT_Pin */
  GPIO_InitStruct.Pin = JOY_RIGHT_Pin;
 800145c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001466:	2302      	movs	r3, #2
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(JOY_RIGHT_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4812      	ldr	r0, [pc, #72]	; (80014bc <MX_GPIO_Init+0x300>)
 8001472:	f002 fab9 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : STMOD_RESET_Pin */
  GPIO_InitStruct.Pin = STMOD_RESET_Pin;
 8001476:	2304      	movs	r3, #4
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(STMOD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001482:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001486:	4619      	mov	r1, r3
 8001488:	480a      	ldr	r0, [pc, #40]	; (80014b4 <MX_GPIO_Init+0x2f8>)
 800148a:	f002 faad 	bl	80039e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800148e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001494:	2311      	movs	r3, #17
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800149c:	e010      	b.n	80014c0 <MX_GPIO_Init+0x304>
 800149e:	bf00      	nop
 80014a0:	40021000 	.word	0x40021000
 80014a4:	48002000 	.word	0x48002000
 80014a8:	48000c00 	.word	0x48000c00
 80014ac:	48001c00 	.word	0x48001c00
 80014b0:	48000800 	.word	0x48000800
 80014b4:	48000400 	.word	0x48000400
 80014b8:	48001800 	.word	0x48001800
 80014bc:	48001400 	.word	0x48001400
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_GPIO_Init+0x31c>)
 80014cc:	f002 fa8c 	bl	80039e8 <HAL_GPIO_Init>

}
 80014d0:	bf00      	nop
 80014d2:	3738      	adds	r7, #56	; 0x38
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	48000400 	.word	0x48000400

080014dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014e0:	b672      	cpsid	i
}
 80014e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014e4:	e7fe      	b.n	80014e4 <Error_Handler+0x8>
	...

080014e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ee:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_MspInit+0x44>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f2:	4a0e      	ldr	r2, [pc, #56]	; (800152c <HAL_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6613      	str	r3, [r2, #96]	; 0x60
 80014fa:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_MspInit+0x44>)
 80014fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_MspInit+0x44>)
 8001508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150a:	4a08      	ldr	r2, [pc, #32]	; (800152c <HAL_MspInit+0x44>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6593      	str	r3, [r2, #88]	; 0x58
 8001512:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_MspInit+0x44>)
 8001514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000

08001530 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b08e      	sub	sp, #56	; 0x38
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	605a      	str	r2, [r3, #4]
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	60da      	str	r2, [r3, #12]
 8001546:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a59      	ldr	r2, [pc, #356]	; (80016b4 <HAL_ADC_MspInit+0x184>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d12d      	bne.n	80015ae <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8001552:	4b59      	ldr	r3, [pc, #356]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a57      	ldr	r2, [pc, #348]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 800155a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800155c:	4b56      	ldr	r3, [pc, #344]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10b      	bne.n	800157c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 800156a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800156e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001578:	623b      	str	r3, [r7, #32]
 800157a:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157c:	4b4f      	ldr	r3, [pc, #316]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 800157e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001580:	4a4e      	ldr	r2, [pc, #312]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001582:	f043 0304 	orr.w	r3, r3, #4
 8001586:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001588:	4b4c      	ldr	r3, [pc, #304]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 800158a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	61fb      	str	r3, [r7, #28]
 8001592:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PC4     ------> ADC1_IN13
    PC3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A2_Pin;
 8001594:	2318      	movs	r3, #24
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001598:	230b      	movs	r3, #11
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4846      	ldr	r0, [pc, #280]	; (80016c0 <HAL_ADC_MspInit+0x190>)
 80015a8:	f002 fa1e 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80015ac:	e07e      	b.n	80016ac <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC2)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a44      	ldr	r2, [pc, #272]	; (80016c4 <HAL_ADC_MspInit+0x194>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d146      	bne.n	8001646 <HAL_ADC_MspInit+0x116>
    HAL_RCC_ADC_CLK_ENABLED++;
 80015b8:	4b3f      	ldr	r3, [pc, #252]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a3e      	ldr	r2, [pc, #248]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 80015c0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 80015c2:	4b3d      	ldr	r3, [pc, #244]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10b      	bne.n	80015e2 <HAL_ADC_MspInit+0xb2>
      __HAL_RCC_ADC_CLK_ENABLE();
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ce:	4a3b      	ldr	r2, [pc, #236]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015e2:	4b36      	ldr	r3, [pc, #216]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a35      	ldr	r2, [pc, #212]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a2f      	ldr	r2, [pc, #188]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0301 	and.w	r3, r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARD_A5_Pin|GPIO_PIN_1;
 8001612:	2303      	movs	r3, #3
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001616:	230b      	movs	r3, #11
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001622:	4619      	mov	r1, r3
 8001624:	4826      	ldr	r0, [pc, #152]	; (80016c0 <HAL_ADC_MspInit+0x190>)
 8001626:	f002 f9df 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STMOD_ADC_Pin|ARD_A4_Pin;
 800162a:	2312      	movs	r3, #18
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800162e:	230b      	movs	r3, #11
 8001630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163a:	4619      	mov	r1, r3
 800163c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001640:	f002 f9d2 	bl	80039e8 <HAL_GPIO_Init>
}
 8001644:	e032      	b.n	80016ac <HAL_ADC_MspInit+0x17c>
  else if(hadc->Instance==ADC3)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1f      	ldr	r2, [pc, #124]	; (80016c8 <HAL_ADC_MspInit+0x198>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d12d      	bne.n	80016ac <HAL_ADC_MspInit+0x17c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8001650:	4b19      	ldr	r3, [pc, #100]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	3301      	adds	r3, #1
 8001656:	4a18      	ldr	r2, [pc, #96]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 8001658:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_ADC_MspInit+0x188>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d10b      	bne.n	800167a <HAL_ADC_MspInit+0x14a>
      __HAL_RCC_ADC_CLK_ENABLE();
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800166c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001672:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001680:	f043 0320 	orr.w	r3, r3, #32
 8001684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_ADC_MspInit+0x18c>)
 8001688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168a:	f003 0320 	and.w	r3, r3, #32
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A3_Pin;
 8001692:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001698:	230b      	movs	r3, #11
 800169a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARD_A3_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a4:	4619      	mov	r1, r3
 80016a6:	4809      	ldr	r0, [pc, #36]	; (80016cc <HAL_ADC_MspInit+0x19c>)
 80016a8:	f002 f99e 	bl	80039e8 <HAL_GPIO_Init>
}
 80016ac:	bf00      	nop
 80016ae:	3738      	adds	r7, #56	; 0x38
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	50040000 	.word	0x50040000
 80016b8:	2000092c 	.word	0x2000092c
 80016bc:	40021000 	.word	0x40021000
 80016c0:	48000800 	.word	0x48000800
 80016c4:	50040100 	.word	0x50040100
 80016c8:	50040200 	.word	0x50040200
 80016cc:	48001400 	.word	0x48001400

080016d0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b08c      	sub	sp, #48	; 0x30
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a33      	ldr	r2, [pc, #204]	; (80017bc <HAL_DCMI_MspInit+0xec>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d160      	bne.n	80017b4 <HAL_DCMI_MspInit+0xe4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80016f2:	4b33      	ldr	r3, [pc, #204]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016fe:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001706:	61bb      	str	r3, [r7, #24]
 8001708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800170a:	4b2d      	ldr	r3, [pc, #180]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	4a2c      	ldr	r2, [pc, #176]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001714:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001716:	4b2a      	ldr	r3, [pc, #168]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001722:	4b27      	ldr	r3, [pc, #156]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	4a26      	ldr	r2, [pc, #152]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800172e:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	4a20      	ldr	r2, [pc, #128]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001746:	4b1e      	ldr	r3, [pc, #120]	; (80017c0 <HAL_DCMI_MspInit+0xf0>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    PH5     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1
    PH11     ------> DCMI_D2
    PH8     ------> DCMI_HSYNC
    */
    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_PIXCK_Pin
 8001752:	f645 7320 	movw	r3, #24352	; 0x5f20
 8001756:	61fb      	str	r3, [r7, #28]
                          |DCMI_D1_Pin|DCMI_D2_Pin|DCMI_HSYNC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001760:	2300      	movs	r3, #0
 8001762:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001764:	230a      	movs	r3, #10
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001768:	f107 031c 	add.w	r3, r7, #28
 800176c:	4619      	mov	r1, r3
 800176e:	4815      	ldr	r0, [pc, #84]	; (80017c4 <HAL_DCMI_MspInit+0xf4>)
 8001770:	f002 f93a 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D7_Pin|DCMI_D5_Pin|DCMI_VSYNC_Pin;
 8001774:	23b0      	movs	r3, #176	; 0xb0
 8001776:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 8001784:	230a      	movs	r3, #10
 8001786:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	4619      	mov	r1, r3
 800178e:	480e      	ldr	r0, [pc, #56]	; (80017c8 <HAL_DCMI_MspInit+0xf8>)
 8001790:	f002 f92a 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D6_Pin;
 8001794:	2320      	movs	r3, #32
 8001796:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_DCMI;
 80017a4:	230a      	movs	r3, #10
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DCMI_D6_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 031c 	add.w	r3, r7, #28
 80017ac:	4619      	mov	r1, r3
 80017ae:	4807      	ldr	r0, [pc, #28]	; (80017cc <HAL_DCMI_MspInit+0xfc>)
 80017b0:	f002 f91a 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80017b4:	bf00      	nop
 80017b6:	3730      	adds	r7, #48	; 0x30
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	50050000 	.word	0x50050000
 80017c0:	40021000 	.word	0x40021000
 80017c4:	48001c00 	.word	0x48001c00
 80017c8:	48002000 	.word	0x48002000
 80017cc:	48001000 	.word	0x48001000

080017d0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b0ae      	sub	sp, #184	; 0xb8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	228c      	movs	r2, #140	; 0x8c
 80017ee:	2100      	movs	r1, #0
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00c ffe5 	bl	800e7c0 <memset>
  if(DFSDM1_Init == 0)
 80017f6:	4b36      	ldr	r3, [pc, #216]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x100>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d163      	bne.n	80018c6 <HAL_DFSDM_ChannelMspInit+0xf6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80017fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001802:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001804:	2300      	movs	r3, #0
 8001806:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800180a:	f107 0318 	add.w	r3, r7, #24
 800180e:	4618      	mov	r0, r3
 8001810:	f004 fd28 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800181a:	f7ff fe5f 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800181e:	4b2d      	ldr	r3, [pc, #180]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	4a2c      	ldr	r2, [pc, #176]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001824:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001828:	6613      	str	r3, [r2, #96]	; 0x60
 800182a:	4b2a      	ldr	r3, [pc, #168]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a26      	ldr	r2, [pc, #152]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b21      	ldr	r3, [pc, #132]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a20      	ldr	r2, [pc, #128]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <HAL_DFSDM_ChannelMspInit+0x104>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PC7     ------> DFSDM1_DATIN3
    PC2     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DATIN3_Pin|DF_CKOUT_Pin;
 8001866:	2384      	movs	r3, #132	; 0x84
 8001868:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800187e:	2306      	movs	r3, #6
 8001880:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001884:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001888:	4619      	mov	r1, r3
 800188a:	4813      	ldr	r0, [pc, #76]	; (80018d8 <HAL_DFSDM_ChannelMspInit+0x108>)
 800188c:	f002 f8ac 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFDATIN1_Pin;
 8001890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001894:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	2302      	movs	r3, #2
 800189a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018aa:	2306      	movs	r3, #6
 80018ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DFDATIN1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018b4:	4619      	mov	r1, r3
 80018b6:	4809      	ldr	r0, [pc, #36]	; (80018dc <HAL_DFSDM_ChannelMspInit+0x10c>)
 80018b8:	f002 f896 	bl	80039e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80018bc:	4b04      	ldr	r3, [pc, #16]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x100>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	4a03      	ldr	r2, [pc, #12]	; (80018d0 <HAL_DFSDM_ChannelMspInit+0x100>)
 80018c4:	6013      	str	r3, [r2, #0]
  }

}
 80018c6:	bf00      	nop
 80018c8:	37b8      	adds	r7, #184	; 0xb8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000930 	.word	0x20000930
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000400 	.word	0x48000400

080018e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b0b0      	sub	sp, #192	; 0xc0
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	228c      	movs	r2, #140	; 0x8c
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f00c ff5d 	bl	800e7c0 <memset>
  if(hi2c->Instance==I2C1)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a53      	ldr	r2, [pc, #332]	; (8001a58 <HAL_I2C_MspInit+0x178>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d13c      	bne.n	800198a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001914:	2300      	movs	r3, #0
 8001916:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001918:	f107 0320 	add.w	r3, r7, #32
 800191c:	4618      	mov	r0, r3
 800191e:	f004 fca1 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001928:	f7ff fdd8 	bl	80014dc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800192c:	4b4b      	ldr	r3, [pc, #300]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 800192e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001930:	4a4a      	ldr	r2, [pc, #296]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 8001932:	f043 0302 	orr.w	r3, r3, #2
 8001936:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001938:	4b48      	ldr	r3, [pc, #288]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	69fb      	ldr	r3, [r7, #28]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001944:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800194c:	2312      	movs	r3, #18
 800194e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001952:	2301      	movs	r3, #1
 8001954:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800195e:	2304      	movs	r3, #4
 8001960:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001964:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001968:	4619      	mov	r1, r3
 800196a:	483d      	ldr	r0, [pc, #244]	; (8001a60 <HAL_I2C_MspInit+0x180>)
 800196c:	f002 f83c 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 8001972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001974:	4a39      	ldr	r2, [pc, #228]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 8001976:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800197a:	6593      	str	r3, [r2, #88]	; 0x58
 800197c:	4b37      	ldr	r3, [pc, #220]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001988:	e061      	b.n	8001a4e <HAL_I2C_MspInit+0x16e>
  else if(hi2c->Instance==I2C2)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a35      	ldr	r2, [pc, #212]	; (8001a64 <HAL_I2C_MspInit+0x184>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d15c      	bne.n	8001a4e <HAL_I2C_MspInit+0x16e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	623b      	str	r3, [r7, #32]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001998:	2300      	movs	r3, #0
 800199a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	4618      	mov	r0, r3
 80019a2:	f004 fc5f 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80019ac:	f7ff fd96 	bl	80014dc <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b0:	4b2a      	ldr	r3, [pc, #168]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 80019b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 80019b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019bc:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 80019be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 80019ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019cc:	4a23      	ldr	r2, [pc, #140]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d4:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 80019d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d8:	f003 0302 	and.w	r3, r3, #2
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SCL_Pin;
 80019e0:	2310      	movs	r3, #16
 80019e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019f8:	2304      	movs	r3, #4
 80019fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SCL_GPIO_Port, &GPIO_InitStruct);
 80019fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a02:	4619      	mov	r1, r3
 8001a04:	4818      	ldr	r0, [pc, #96]	; (8001a68 <HAL_I2C_MspInit+0x188>)
 8001a06:	f001 ffef 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C2_SDA_Pin;
 8001a0a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a12:	2312      	movs	r3, #18
 8001a14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a24:	2304      	movs	r3, #4
 8001a26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(I2C2_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a2e:	4619      	mov	r1, r3
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <HAL_I2C_MspInit+0x180>)
 8001a32:	f001 ffd9 	bl	80039e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a36:	4b09      	ldr	r3, [pc, #36]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 8001a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3a:	4a08      	ldr	r2, [pc, #32]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 8001a3c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a40:	6593      	str	r3, [r2, #88]	; 0x58
 8001a42:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_I2C_MspInit+0x17c>)
 8001a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
}
 8001a4e:	bf00      	nop
 8001a50:	37c0      	adds	r7, #192	; 0xc0
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	48000400 	.word	0x48000400
 8001a64:	40005800 	.word	0x40005800
 8001a68:	48001c00 	.word	0x48001c00

08001a6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0b2      	sub	sp, #200	; 0xc8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a88:	228c      	movs	r2, #140	; 0x8c
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00c fe97 	bl	800e7c0 <memset>
  if(huart->Instance==LPUART1)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a86      	ldr	r2, [pc, #536]	; (8001cb0 <HAL_UART_MspInit+0x244>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d13e      	bne.n	8001b1a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a9c:	2320      	movs	r3, #32
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f004 fbdb 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab4:	f7ff fd12 	bl	80014dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ab8:	4b7e      	ldr	r3, [pc, #504]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001abc:	4a7d      	ldr	r2, [pc, #500]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001abe:	f043 0301 	orr.w	r3, r3, #1
 8001ac2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001ac4:	4b7b      	ldr	r3, [pc, #492]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ad0:	4b78      	ldr	r3, [pc, #480]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	4a77      	ldr	r2, [pc, #476]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ada:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001adc:	4b75      	ldr	r3, [pc, #468]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ae4:	623b      	str	r3, [r7, #32]
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
    HAL_PWREx_EnableVddIO2();
 8001ae8:	f003 fcac 	bl	8005444 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG8     ------> LPUART1_RX
    PG7     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8001aec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001af0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af4:	2302      	movs	r3, #2
 8001af6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001b06:	2308      	movs	r3, #8
 8001b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b0c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4869      	ldr	r0, [pc, #420]	; (8001cb8 <HAL_UART_MspInit+0x24c>)
 8001b14:	f001 ff68 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b18:	e0c6      	b.n	8001ca8 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a67      	ldr	r2, [pc, #412]	; (8001cbc <HAL_UART_MspInit+0x250>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d15f      	bne.n	8001be4 <HAL_UART_MspInit+0x178>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b30:	4618      	mov	r0, r3
 8001b32:	f004 fb97 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001b3c:	f7ff fcce 	bl	80014dc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b40:	4b5c      	ldr	r3, [pc, #368]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	4a5b      	ldr	r2, [pc, #364]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b4a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b4c:	4b59      	ldr	r3, [pc, #356]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b54:	61fb      	str	r3, [r7, #28]
 8001b56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b58:	4b56      	ldr	r3, [pc, #344]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5c:	4a55      	ldr	r2, [pc, #340]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b5e:	f043 0302 	orr.w	r3, r3, #2
 8001b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b64:	4b53      	ldr	r3, [pc, #332]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b70:	4b50      	ldr	r3, [pc, #320]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b74:	4a4f      	ldr	r2, [pc, #316]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b7c:	4b4d      	ldr	r3, [pc, #308]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b84:	617b      	str	r3, [r7, #20]
 8001b86:	697b      	ldr	r3, [r7, #20]
    HAL_PWREx_EnableVddIO2();
 8001b88:	f003 fc5c 	bl	8005444 <HAL_PWREx_EnableVddIO2>
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001b8c:	2340      	movs	r3, #64	; 0x40
 8001b8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001baa:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4843      	ldr	r0, [pc, #268]	; (8001cc0 <HAL_UART_MspInit+0x254>)
 8001bb2:	f001 ff19 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin|UART1_CTS_Pin|UART1_RTS_Pin;
 8001bb6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001bda:	4619      	mov	r1, r3
 8001bdc:	4836      	ldr	r0, [pc, #216]	; (8001cb8 <HAL_UART_MspInit+0x24c>)
 8001bde:	f001 ff03 	bl	80039e8 <HAL_GPIO_Init>
}
 8001be2:	e061      	b.n	8001ca8 <HAL_UART_MspInit+0x23c>
  else if(huart->Instance==USART2)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a36      	ldr	r2, [pc, #216]	; (8001cc4 <HAL_UART_MspInit+0x258>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d15c      	bne.n	8001ca8 <HAL_UART_MspInit+0x23c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 fb32 	bl	8006264 <HAL_RCCEx_PeriphCLKConfig>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_UART_MspInit+0x19e>
      Error_Handler();
 8001c06:	f7ff fc69 	bl	80014dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c0e:	4a29      	ldr	r2, [pc, #164]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c14:	6593      	str	r3, [r2, #88]	; 0x58
 8001c16:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	613b      	str	r3, [r7, #16]
 8001c20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c26:	4a23      	ldr	r2, [pc, #140]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c28:	f043 0308 	orr.w	r3, r3, #8
 8001c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c3a:	4b1e      	ldr	r3, [pc, #120]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3e:	4a1d      	ldr	r2, [pc, #116]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_UART_MspInit+0x248>)
 8001c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	60bb      	str	r3, [r7, #8]
 8001c50:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_RX_Pin;
 8001c52:	2340      	movs	r3, #64	; 0x40
 8001c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c58:	2302      	movs	r3, #2
 8001c5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_RX_GPIO_Port, &GPIO_InitStruct);
 8001c70:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <HAL_UART_MspInit+0x25c>)
 8001c78:	f001 feb6 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USART2_TX_Pin;
 8001c7c:	2304      	movs	r3, #4
 8001c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c94:	2307      	movs	r3, #7
 8001c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(USART2_TX_GPIO_Port, &GPIO_InitStruct);
 8001c9a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ca4:	f001 fea0 	bl	80039e8 <HAL_GPIO_Init>
}
 8001ca8:	bf00      	nop
 8001caa:	37c8      	adds	r7, #200	; 0xc8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40008000 	.word	0x40008000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	48001800 	.word	0x48001800
 8001cbc:	40013800 	.word	0x40013800
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	40004400 	.word	0x40004400
 8001cc8:	48000c00 	.word	0x48000c00

08001ccc <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <HAL_QSPI_MspInit+0xb8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d145      	bne.n	8001d7a <HAL_QSPI_MspInit+0xae>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001cf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf8:	6513      	str	r3, [r2, #80]	; 0x50
 8001cfa:	4b23      	ldr	r3, [pc, #140]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001cfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b20      	ldr	r3, [pc, #128]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0a:	4a1f      	ldr	r2, [pc, #124]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d12:	4b1d      	ldr	r3, [pc, #116]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1e:	4b1a      	ldr	r3, [pc, #104]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d2a:	4b17      	ldr	r3, [pc, #92]	; (8001d88 <HAL_QSPI_MspInit+0xbc>)
 8001d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
    PA7     ------> QUADSPI_BK1_IO2
    PB1     ------> QUADSPI_BK1_IO0
    PA3     ------> QUADSPI_CLK
    PA6     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin|QSPI_BK1_IO1_Pin|QSPI_BK1_IO0_Pin;
 8001d36:	f640 0303 	movw	r3, #2051	; 0x803
 8001d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d48:	230a      	movs	r3, #10
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	4619      	mov	r1, r3
 8001d52:	480e      	ldr	r0, [pc, #56]	; (8001d8c <HAL_QSPI_MspInit+0xc0>)
 8001d54:	f001 fe48 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin|QSPI_CLK_Pin|QSPI_BK1_IO3_Pin;
 8001d58:	23c8      	movs	r3, #200	; 0xc8
 8001d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d68:	230a      	movs	r3, #10
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d6c:	f107 0314 	add.w	r3, r7, #20
 8001d70:	4619      	mov	r1, r3
 8001d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d76:	f001 fe37 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d7a:	bf00      	nop
 8001d7c:	3728      	adds	r7, #40	; 0x28
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	a0001000 	.word	0xa0001000
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000400 	.word	0x48000400

08001d90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b08a      	sub	sp, #40	; 0x28
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d98:	f107 0314 	add.w	r3, r7, #20
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	605a      	str	r2, [r3, #4]
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	60da      	str	r2, [r3, #12]
 8001da6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a25      	ldr	r2, [pc, #148]	; (8001e44 <HAL_SD_MspInit+0xb4>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d144      	bne.n	8001e3c <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001db2:	4b25      	ldr	r3, [pc, #148]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001db8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbe:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dca:	4b1f      	ldr	r3, [pc, #124]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dce:	4a1e      	ldr	r2, [pc, #120]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001dd0:	f043 0308 	orr.w	r3, r3, #8
 8001dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dda:	f003 0308 	and.w	r3, r3, #8
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de2:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de6:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001de8:	f043 0304 	orr.w	r3, r3, #4
 8001dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dee:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <HAL_SD_MspInit+0xb8>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	f003 0304 	and.w	r3, r3, #4
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = uSD_CMD_Pin;
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e06:	2303      	movs	r3, #3
 8001e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e0a:	230c      	movs	r3, #12
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(uSD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001e0e:	f107 0314 	add.w	r3, r7, #20
 8001e12:	4619      	mov	r1, r3
 8001e14:	480d      	ldr	r0, [pc, #52]	; (8001e4c <HAL_SD_MspInit+0xbc>)
 8001e16:	f001 fde7 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = uSD_D2_Pin|uSD_D3_Pin|uSD_CLK_Pin|uSD_D1_Pin
 8001e1a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001e1e:	617b      	str	r3, [r7, #20]
                          |uSD_D0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001e2c:	230c      	movs	r3, #12
 8001e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	; (8001e50 <HAL_SD_MspInit+0xc0>)
 8001e38:	f001 fdd6 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001e3c:	bf00      	nop
 8001e3e:	3728      	adds	r7, #40	; 0x28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40012800 	.word	0x40012800
 8001e48:	40021000 	.word	0x40021000
 8001e4c:	48000c00 	.word	0x48000c00
 8001e50:	48000800 	.word	0x48000800

08001e54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b08e      	sub	sp, #56	; 0x38
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]
 8001e6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_SPI_MspInit+0x14c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d146      	bne.n	8001f04 <HAL_SPI_MspInit+0xb0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e76:	4b4b      	ldr	r3, [pc, #300]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7a:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001e7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e80:	6613      	str	r3, [r2, #96]	; 0x60
 8001e82:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	623b      	str	r3, [r7, #32]
 8001e8c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e92:	4a44      	ldr	r2, [pc, #272]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9a:	4b42      	ldr	r3, [pc, #264]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eaa:	4a3e      	ldr	r2, [pc, #248]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eb2:	4b3c      	ldr	r3, [pc, #240]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69bb      	ldr	r3, [r7, #24]
    PB4 (NJTRST)     ------> SPI1_MISO
    PA15 (JTDI)     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001ebe:	2330      	movs	r3, #48	; 0x30
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ece:	2305      	movs	r3, #5
 8001ed0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4833      	ldr	r0, [pc, #204]	; (8001fa8 <HAL_SPI_MspInit+0x154>)
 8001eda:	f001 fd85 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D13_Pin;
 8001ede:	f248 0320 	movw	r3, #32800	; 0x8020
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eec:	2303      	movs	r3, #3
 8001eee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ef0:	2305      	movs	r3, #5
 8001ef2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001efe:	f001 fd73 	bl	80039e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001f02:	e049      	b.n	8001f98 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a28      	ldr	r2, [pc, #160]	; (8001fac <HAL_SPI_MspInit+0x158>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d144      	bne.n	8001f98 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f0e:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001f26:	4b1f      	ldr	r3, [pc, #124]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f2a:	4a1e      	ldr	r2, [pc, #120]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f32:	4b1c      	ldr	r3, [pc, #112]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f3e:	4b19      	ldr	r3, [pc, #100]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f44:	f043 0302 	orr.w	r3, r3, #2
 8001f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4a:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_SPI_MspInit+0x150>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_CLK_Pin;
 8001f56:	2306      	movs	r3, #6
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f62:	2303      	movs	r3, #3
 8001f64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f66:	2305      	movs	r3, #5
 8001f68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6e:	4619      	mov	r1, r3
 8001f70:	480f      	ldr	r0, [pc, #60]	; (8001fb0 <HAL_SPI_MspInit+0x15c>)
 8001f72:	f001 fd39 	bl	80039e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI2_MOSI_Pin;
 8001f76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f84:	2303      	movs	r3, #3
 8001f86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f88:	2305      	movs	r3, #5
 8001f8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(SPI2_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f90:	4619      	mov	r1, r3
 8001f92:	4805      	ldr	r0, [pc, #20]	; (8001fa8 <HAL_SPI_MspInit+0x154>)
 8001f94:	f001 fd28 	bl	80039e8 <HAL_GPIO_Init>
}
 8001f98:	bf00      	nop
 8001f9a:	3738      	adds	r7, #56	; 0x38
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40013000 	.word	0x40013000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48000400 	.word	0x48000400
 8001fac:	40003800 	.word	0x40003800
 8001fb0:	48002000 	.word	0x48002000

08001fb4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b086      	sub	sp, #24
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001fc8:	4b2b      	ldr	r3, [pc, #172]	; (8002078 <HAL_FMC_MspInit+0xc4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d14f      	bne.n	8002070 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001fd0:	4b29      	ldr	r3, [pc, #164]	; (8002078 <HAL_FMC_MspInit+0xc4>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_FMC_MspInit+0xc8>)
 8001fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fda:	4a28      	ldr	r2, [pc, #160]	; (800207c <HAL_FMC_MspInit+0xc8>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6513      	str	r3, [r2, #80]	; 0x50
 8001fe2:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_FMC_MspInit+0xc8>)
 8001fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]
  PF13   ------> FMC_A7
  PE12   ------> FMC_D9
  PF12   ------> FMC_A6
  PE11   ------> FMC_D8
  */
  GPIO_InitStruct.Pin = PSRAM_NBL0_Pin|PSRAM_NBL1_Pin|D7_Pin|D6_Pin
 8001fee:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001ff2:	607b      	str	r3, [r7, #4]
                          |D12_Pin|D5_Pin|D11_Pin|D4_Pin
                          |D10_Pin|D9_Pin|D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002000:	230c      	movs	r3, #12
 8002002:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002004:	1d3b      	adds	r3, r7, #4
 8002006:	4619      	mov	r1, r3
 8002008:	481d      	ldr	r0, [pc, #116]	; (8002080 <HAL_FMC_MspInit+0xcc>)
 800200a:	f001 fced 	bl	80039e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_NE_Pin|PSRAM_A11_Pin|PSRAM_A10_Pin|PSRAM_A15_Pin
 800200e:	f240 233f 	movw	r3, #575	; 0x23f
 8002012:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A13_Pin|PSRAM_A12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002020:	230c      	movs	r3, #12
 8002022:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4619      	mov	r1, r3
 8002028:	4816      	ldr	r0, [pc, #88]	; (8002084 <HAL_FMC_MspInit+0xd0>)
 800202a:	f001 fcdd 	bl	80039e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D2_Pin|OE_Pin|D3_Pin|WE_Pin
 800202e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8002032:	607b      	str	r3, [r7, #4]
                          |LCD_NE_Pin|D1_Pin|D15_Pin|D0_Pin
                          |PSRAM_A17_Pin|PSRAM_A16_Pin|PSRAM_A18_LCD_RS_Pin|D14_Pin
                          |D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002040:	230c      	movs	r3, #12
 8002042:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002044:	1d3b      	adds	r3, r7, #4
 8002046:	4619      	mov	r1, r3
 8002048:	480f      	ldr	r0, [pc, #60]	; (8002088 <HAL_FMC_MspInit+0xd4>)
 800204a:	f001 fccd 	bl	80039e8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A2_Pin|PSRAM_A1_Pin|PSRAM_A0_Pin|PSRAM_A3_Pin
 800204e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002052:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A9_Pin|PSRAM_A8_Pin
                          |PSRAM_A7_Pin|PSRAM_A6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205c:	2303      	movs	r3, #3
 800205e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002060:	230c      	movs	r3, #12
 8002062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002064:	1d3b      	adds	r3, r7, #4
 8002066:	4619      	mov	r1, r3
 8002068:	4808      	ldr	r0, [pc, #32]	; (800208c <HAL_FMC_MspInit+0xd8>)
 800206a:	f001 fcbd 	bl	80039e8 <HAL_GPIO_Init>
 800206e:	e000      	b.n	8002072 <HAL_FMC_MspInit+0xbe>
    return;
 8002070:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002072:	3718      	adds	r7, #24
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	20000934 	.word	0x20000934
 800207c:	40021000 	.word	0x40021000
 8002080:	48001000 	.word	0x48001000
 8002084:	48001800 	.word	0x48001800
 8002088:	48000c00 	.word	0x48000c00
 800208c:	48001400 	.word	0x48001400

08002090 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002098:	f7ff ff8c 	bl	8001fb4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800209c:	bf00      	nop
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	; 0x28
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_SAI_MspInit+0xdc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d135      	bne.n	8002122 <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <HAL_SAI_MspInit+0xe0>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10b      	bne.n	80020d6 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80020be:	4b32      	ldr	r3, [pc, #200]	; (8002188 <HAL_SAI_MspInit+0xe4>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020c2:	4a31      	ldr	r2, [pc, #196]	; (8002188 <HAL_SAI_MspInit+0xe4>)
 80020c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020c8:	6613      	str	r3, [r2, #96]	; 0x60
 80020ca:	4b2f      	ldr	r3, [pc, #188]	; (8002188 <HAL_SAI_MspInit+0xe4>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_SAI_MspInit+0xe0>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_SAI_MspInit+0xe0>)
 80020de:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    PB10     ------> SAI1_SCK_A
    */
    GPIO_InitStruct.Pin = SAI1_FSA_Pin|SAI1_MCKA_Pin|SAI1_SDA_Pin;
 80020e0:	2354      	movs	r3, #84	; 0x54
 80020e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80020f0:	230d      	movs	r3, #13
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	4824      	ldr	r0, [pc, #144]	; (800218c <HAL_SAI_MspInit+0xe8>)
 80020fc:	f001 fc74 	bl	80039e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002112:	230d      	movs	r3, #13
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002116:	f107 0314 	add.w	r3, r7, #20
 800211a:	4619      	mov	r1, r3
 800211c:	481c      	ldr	r0, [pc, #112]	; (8002190 <HAL_SAI_MspInit+0xec>)
 800211e:	f001 fc63 	bl	80039e8 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a1b      	ldr	r2, [pc, #108]	; (8002194 <HAL_SAI_MspInit+0xf0>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d124      	bne.n	8002176 <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_SAI_MspInit+0xe0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10b      	bne.n	800214c <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_SAI_MspInit+0xe4>)
 8002136:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002138:	4a13      	ldr	r2, [pc, #76]	; (8002188 <HAL_SAI_MspInit+0xe4>)
 800213a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800213e:	6613      	str	r3, [r2, #96]	; 0x60
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <HAL_SAI_MspInit+0xe4>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 800214c:	4b0d      	ldr	r3, [pc, #52]	; (8002184 <HAL_SAI_MspInit+0xe0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3301      	adds	r3, #1
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_SAI_MspInit+0xe0>)
 8002154:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SDB_Pin;
 8002156:	2308      	movs	r3, #8
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002166:	230d      	movs	r3, #13
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI1_SDB_GPIO_Port, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4806      	ldr	r0, [pc, #24]	; (800218c <HAL_SAI_MspInit+0xe8>)
 8002172:	f001 fc39 	bl	80039e8 <HAL_GPIO_Init>

    }
}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40015404 	.word	0x40015404
 8002184:	20000938 	.word	0x20000938
 8002188:	40021000 	.word	0x40021000
 800218c:	48001000 	.word	0x48001000
 8002190:	48000400 	.word	0x48000400
 8002194:	40015424 	.word	0x40015424

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e4:	f000 f8bc 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <SPI1_IRQHandler+0x10>)
 80021f2:	f006 fc0d 	bl	8008a10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200007c4 	.word	0x200007c4

08002200 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002204:	4802      	ldr	r0, [pc, #8]	; (8002210 <SPI2_IRQHandler+0x10>)
 8002206:	f006 fc03 	bl	8008a10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	20000828 	.word	0x20000828

08002214 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002218:	4803      	ldr	r0, [pc, #12]	; (8002228 <USART1_IRQHandler+0x14>)
 800221a:	f006 ff13 	bl	8009044 <HAL_UART_IRQHandler>
  HAL_UART_RxCpltCallback(&huart1);
 800221e:	4802      	ldr	r0, [pc, #8]	; (8002228 <USART1_IRQHandler+0x14>)
 8002220:	f007 f9fc 	bl	800961c <HAL_UART_RxCpltCallback>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	bd80      	pop	{r7, pc}
 8002228:	200004e4 	.word	0x200004e4

0800222c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002230:	4802      	ldr	r0, [pc, #8]	; (800223c <OTG_FS_IRQHandler+0x10>)
 8002232:	f002 f816 	bl	8004262 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002236:	bf00      	nop
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	20001e38 	.word	0x20001e38

08002240 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002244:	4b06      	ldr	r3, [pc, #24]	; (8002260 <SystemInit+0x20>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	4a05      	ldr	r2, [pc, #20]	; (8002260 <SystemInit+0x20>)
 800224c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800229c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002268:	f7ff ffea 	bl	8002240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800226c:	480c      	ldr	r0, [pc, #48]	; (80022a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800226e:	490d      	ldr	r1, [pc, #52]	; (80022a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002270:	4a0d      	ldr	r2, [pc, #52]	; (80022a8 <LoopForever+0xe>)
  movs r3, #0
 8002272:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002274:	e002      	b.n	800227c <LoopCopyDataInit>

08002276 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002276:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002278:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227a:	3304      	adds	r3, #4

0800227c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800227c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800227e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002280:	d3f9      	bcc.n	8002276 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002282:	4a0a      	ldr	r2, [pc, #40]	; (80022ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002284:	4c0a      	ldr	r4, [pc, #40]	; (80022b0 <LoopForever+0x16>)
  movs r3, #0
 8002286:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002288:	e001      	b.n	800228e <LoopFillZerobss>

0800228a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800228c:	3204      	adds	r2, #4

0800228e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800228e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002290:	d3fb      	bcc.n	800228a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002292:	f00c fa71 	bl	800e778 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002296:	f7fe f933 	bl	8000500 <main>

0800229a <LoopForever>:

LoopForever:
    b LoopForever
 800229a:	e7fe      	b.n	800229a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800229c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80022a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a4:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80022a8:	0800e898 	.word	0x0800e898
  ldr r2, =_sbss
 80022ac:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80022b0:	20002564 	.word	0x20002564

080022b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80022b4:	e7fe      	b.n	80022b4 <ADC1_2_IRQHandler>

080022b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022b6:	b580      	push	{r7, lr}
 80022b8:	b082      	sub	sp, #8
 80022ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c0:	2003      	movs	r0, #3
 80022c2:	f001 f93d 	bl	8003540 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022c6:	2000      	movs	r0, #0
 80022c8:	f000 f80e 	bl	80022e8 <HAL_InitTick>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	71fb      	strb	r3, [r7, #7]
 80022d6:	e001      	b.n	80022dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d8:	f7ff f906 	bl	80014e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022dc:	79fb      	ldrb	r3, [r7, #7]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
	...

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022f0:	2300      	movs	r3, #0
 80022f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022f4:	4b17      	ldr	r3, [pc, #92]	; (8002354 <HAL_InitTick+0x6c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d023      	beq.n	8002344 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022fc:	4b16      	ldr	r3, [pc, #88]	; (8002358 <HAL_InitTick+0x70>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4b14      	ldr	r3, [pc, #80]	; (8002354 <HAL_InitTick+0x6c>)
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230a:	fbb3 f3f1 	udiv	r3, r3, r1
 800230e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002312:	4618      	mov	r0, r3
 8002314:	f001 f949 	bl	80035aa <HAL_SYSTICK_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10f      	bne.n	800233e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d809      	bhi.n	8002338 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002324:	2200      	movs	r2, #0
 8002326:	6879      	ldr	r1, [r7, #4]
 8002328:	f04f 30ff 	mov.w	r0, #4294967295
 800232c:	f001 f913 	bl	8003556 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002330:	4a0a      	ldr	r2, [pc, #40]	; (800235c <HAL_InitTick+0x74>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e007      	b.n	8002348 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	e004      	b.n	8002348 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	e001      	b.n	8002348 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002348:	7bfb      	ldrb	r3, [r7, #15]
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000008 	.word	0x20000008
 8002358:	20000000 	.word	0x20000000
 800235c:	20000004 	.word	0x20000004

08002360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x20>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_IncTick+0x24>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	; (8002384 <HAL_IncTick+0x24>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000008 	.word	0x20000008
 8002384:	2000093c 	.word	0x2000093c

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	2000093c 	.word	0x2000093c

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff ffee 	bl	8002388 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b8:	d005      	beq.n	80023c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80023ba:	4b0a      	ldr	r3, [pc, #40]	; (80023e4 <HAL_Delay+0x44>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c6:	bf00      	nop
 80023c8:	f7ff ffde 	bl	8002388 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d8f7      	bhi.n	80023c8 <HAL_Delay+0x28>
  {
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000008 	.word	0x20000008

080023e8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]
}
 8002402:	bf00      	nop
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	431a      	orrs	r2, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	609a      	str	r2, [r3, #8]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002450:	b480      	push	{r7}
 8002452:	b087      	sub	sp, #28
 8002454:	af00      	add	r7, sp, #0
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	3360      	adds	r3, #96	; 0x60
 8002462:	461a      	mov	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	4413      	add	r3, r2
 800246a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <LL_ADC_SetOffset+0x44>)
 8002472:	4013      	ands	r3, r2
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	4313      	orrs	r3, r2
 8002480:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	03fff000 	.word	0x03fff000

08002498 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3360      	adds	r3, #96	; 0x60
 80024a6:	461a      	mov	r2, r3
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3714      	adds	r7, #20
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	3360      	adds	r3, #96	; 0x60
 80024d4:	461a      	mov	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr

080024fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
 8002502:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	615a      	str	r2, [r3, #20]
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr

08002520 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002520:	b480      	push	{r7}
 8002522:	b087      	sub	sp, #28
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	3330      	adds	r3, #48	; 0x30
 8002530:	461a      	mov	r2, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	0a1b      	lsrs	r3, r3, #8
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	4413      	add	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	211f      	movs	r1, #31
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	401a      	ands	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	0e9b      	lsrs	r3, r3, #26
 8002558:	f003 011f 	and.w	r1, r3, #31
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800256c:	bf00      	nop
 800256e:	371c      	adds	r7, #28
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002578:	b480      	push	{r7}
 800257a:	b087      	sub	sp, #28
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3314      	adds	r3, #20
 8002588:	461a      	mov	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	0e5b      	lsrs	r3, r3, #25
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	f003 0304 	and.w	r3, r3, #4
 8002594:	4413      	add	r3, r2
 8002596:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	0d1b      	lsrs	r3, r3, #20
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	2107      	movs	r1, #7
 80025a6:	fa01 f303 	lsl.w	r3, r1, r3
 80025aa:	43db      	mvns	r3, r3
 80025ac:	401a      	ands	r2, r3
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	0d1b      	lsrs	r3, r3, #20
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	6879      	ldr	r1, [r7, #4]
 80025b8:	fa01 f303 	lsl.w	r3, r1, r3
 80025bc:	431a      	orrs	r2, r3
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025e8:	43db      	mvns	r3, r3
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f003 0318 	and.w	r3, r3, #24
 80025f2:	4908      	ldr	r1, [pc, #32]	; (8002614 <LL_ADC_SetChannelSingleDiff+0x44>)
 80025f4:	40d9      	lsrs	r1, r3
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	400b      	ands	r3, r1
 80025fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025fe:	431a      	orrs	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	0007ffff 	.word	0x0007ffff

08002618 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002628:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6093      	str	r3, [r2, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800264c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002650:	d101      	bne.n	8002656 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002674:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002678:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026a0:	d101      	bne.n	80026a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80026a2:	2301      	movs	r3, #1
 80026a4:	e000      	b.n	80026a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d101      	bne.n	80026cc <LL_ADC_IsEnabled+0x18>
 80026c8:	2301      	movs	r3, #1
 80026ca:	e000      	b.n	80026ce <LL_ADC_IsEnabled+0x1a>
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr

080026da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d101      	bne.n	80026f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d101      	bne.n	8002718 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002714:	2301      	movs	r3, #1
 8002716:	e000      	b.n	800271a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002728:	b590      	push	{r4, r7, lr}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002730:	2300      	movs	r3, #0
 8002732:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e139      	b.n	80029b6 <HAL_ADC_Init+0x28e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	2b00      	cmp	r3, #0
 800274e:	d109      	bne.n	8002764 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fe feed 	bl	8001530 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff67 	bl	800263c <LL_ADC_IsDeepPowerDownEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d004      	beq.n	800277e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4618      	mov	r0, r3
 800277a:	f7ff ff4d 	bl	8002618 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff ff82 	bl	800268c <LL_ADC_IsInternalRegulatorEnabled>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f7ff ff66 	bl	8002664 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002798:	4b89      	ldr	r3, [pc, #548]	; (80029c0 <HAL_ADC_Init+0x298>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	099b      	lsrs	r3, r3, #6
 800279e:	4a89      	ldr	r2, [pc, #548]	; (80029c4 <HAL_ADC_Init+0x29c>)
 80027a0:	fba2 2303 	umull	r2, r3, r2, r3
 80027a4:	099b      	lsrs	r3, r3, #6
 80027a6:	3301      	adds	r3, #1
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027ac:	e002      	b.n	80027b4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f9      	bne.n	80027ae <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff64 	bl	800268c <LL_ADC_IsInternalRegulatorEnabled>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10d      	bne.n	80027e6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ce:	f043 0210 	orr.w	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027da:	f043 0201 	orr.w	r2, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff75 	bl	80026da <LL_ADC_REG_IsConversionOngoing>
 80027f0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f6:	f003 0310 	and.w	r3, r3, #16
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f040 80d2 	bne.w	80029a4 <HAL_ADC_Init+0x27c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f040 80ce 	bne.w	80029a4 <HAL_ADC_Init+0x27c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002810:	f043 0202 	orr.w	r2, r3, #2
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff49 	bl	80026b4 <LL_ADC_IsEnabled>
 8002822:	4603      	mov	r3, r0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d115      	bne.n	8002854 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002828:	4867      	ldr	r0, [pc, #412]	; (80029c8 <HAL_ADC_Init+0x2a0>)
 800282a:	f7ff ff43 	bl	80026b4 <LL_ADC_IsEnabled>
 800282e:	4604      	mov	r4, r0
 8002830:	4866      	ldr	r0, [pc, #408]	; (80029cc <HAL_ADC_Init+0x2a4>)
 8002832:	f7ff ff3f 	bl	80026b4 <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	431c      	orrs	r4, r3
 800283a:	4865      	ldr	r0, [pc, #404]	; (80029d0 <HAL_ADC_Init+0x2a8>)
 800283c:	f7ff ff3a 	bl	80026b4 <LL_ADC_IsEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	4323      	orrs	r3, r4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4619      	mov	r1, r3
 800284e:	4861      	ldr	r0, [pc, #388]	; (80029d4 <HAL_ADC_Init+0x2ac>)
 8002850:	f7ff fdca 	bl	80023e8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	7e5b      	ldrb	r3, [r3, #25]
 8002858:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800285e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002864:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800286a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002872:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d106      	bne.n	8002890 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	3b01      	subs	r3, #1
 8002888:	045b      	lsls	r3, r3, #17
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	2b00      	cmp	r3, #0
 8002896:	d009      	beq.n	80028ac <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68da      	ldr	r2, [r3, #12]
 80028b2:	4b49      	ldr	r3, [pc, #292]	; (80029d8 <HAL_ADC_Init+0x2b0>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	430b      	orrs	r3, r1
 80028be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff08 	bl	80026da <LL_ADC_REG_IsConversionOngoing>
 80028ca:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff15 	bl	8002700 <LL_ADC_INJ_IsConversionOngoing>
 80028d6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d140      	bne.n	8002960 <HAL_ADC_Init+0x238>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d13d      	bne.n	8002960 <HAL_ADC_Init+0x238>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
 80028ec:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028ee:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028f6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002906:	f023 0306 	bic.w	r3, r3, #6
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6812      	ldr	r2, [r2, #0]
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	430b      	orrs	r3, r1
 8002912:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800291a:	2b01      	cmp	r3, #1
 800291c:	d118      	bne.n	8002950 <HAL_ADC_Init+0x228>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800293a:	4311      	orrs	r1, r2
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002940:	430a      	orrs	r2, r1
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	611a      	str	r2, [r3, #16]
 800294e:	e007      	b.n	8002960 <HAL_ADC_Init+0x238>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f022 0201 	bic.w	r2, r2, #1
 800295e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	691b      	ldr	r3, [r3, #16]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d10c      	bne.n	8002982 <HAL_ADC_Init+0x25a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f023 010f 	bic.w	r1, r3, #15
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	69db      	ldr	r3, [r3, #28]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	631a      	str	r2, [r3, #48]	; 0x30
 8002980:	e007      	b.n	8002992 <HAL_ADC_Init+0x26a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 020f 	bic.w	r2, r2, #15
 8002990:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	659a      	str	r2, [r3, #88]	; 0x58
 80029a2:	e007      	b.n	80029b4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a8:	f043 0210 	orr.w	r2, r3, #16
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80029b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3724      	adds	r7, #36	; 0x24
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd90      	pop	{r4, r7, pc}
 80029be:	bf00      	nop
 80029c0:	20000000 	.word	0x20000000
 80029c4:	053e2d63 	.word	0x053e2d63
 80029c8:	50040000 	.word	0x50040000
 80029cc:	50040100 	.word	0x50040100
 80029d0:	50040200 	.word	0x50040200
 80029d4:	50040300 	.word	0x50040300
 80029d8:	fff0c007 	.word	0xfff0c007

080029dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b0b6      	sub	sp, #216	; 0xd8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x22>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e3e3      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x7ea>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fe65 	bl	80026da <LL_ADC_REG_IsConversionOngoing>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f040 83c4 	bne.w	80031a0 <HAL_ADC_ConfigChannel+0x7c4>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b05      	cmp	r3, #5
 8002a1e:	d824      	bhi.n	8002a6a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	3b02      	subs	r3, #2
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d81b      	bhi.n	8002a62 <HAL_ADC_ConfigChannel+0x86>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <HAL_ADC_ConfigChannel+0x54>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a41 	.word	0x08002a41
 8002a34:	08002a49 	.word	0x08002a49
 8002a38:	08002a51 	.word	0x08002a51
 8002a3c:	08002a59 	.word	0x08002a59
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	220c      	movs	r2, #12
 8002a44:	605a      	str	r2, [r3, #4]
          break;
 8002a46:	e011      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2212      	movs	r2, #18
 8002a4c:	605a      	str	r2, [r3, #4]
          break;
 8002a4e:	e00d      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	2218      	movs	r2, #24
 8002a54:	605a      	str	r2, [r3, #4]
          break;
 8002a56:	e009      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a5e:	605a      	str	r2, [r3, #4]
          break;
 8002a60:	e004      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2206      	movs	r2, #6
 8002a66:	605a      	str	r2, [r3, #4]
          break;
 8002a68:	e000      	b.n	8002a6c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a6a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	461a      	mov	r2, r3
 8002a7a:	f7ff fd51 	bl	8002520 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fe29 	bl	80026da <LL_ADC_REG_IsConversionOngoing>
 8002a88:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fe35 	bl	8002700 <LL_ADC_INJ_IsConversionOngoing>
 8002a96:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f040 81c1 	bne.w	8002e26 <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002aa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f040 81bc 	bne.w	8002e26 <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab6:	d10f      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6818      	ldr	r0, [r3, #0]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f7ff fd58 	bl	8002578 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fd12 	bl	80024fa <LL_ADC_SetSamplingTimeCommonConfig>
 8002ad6:	e00e      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6819      	ldr	r1, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	f7ff fd47 	bl	8002578 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff fd02 	bl	80024fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	08db      	lsrs	r3, r3, #3
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d00a      	beq.n	8002b2e <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6818      	ldr	r0, [r3, #0]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6919      	ldr	r1, [r3, #16]
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b28:	f7ff fc92 	bl	8002450 <LL_ADC_SetOffset>
 8002b2c:	e17b      	b.n	8002e26 <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fcaf 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x17e>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2100      	movs	r1, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fca4 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002b50:	4603      	mov	r3, r0
 8002b52:	0e9b      	lsrs	r3, r3, #26
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	e01e      	b.n	8002b98 <HAL_ADC_ConfigChannel+0x1bc>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fc99 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002b66:	4603      	mov	r3, r0
 8002b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b70:	fa93 f3a3 	rbit	r3, r3
 8002b74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d101      	bne.n	8002b8c <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8002b88:	2320      	movs	r3, #32
 8002b8a:	e004      	b.n	8002b96 <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8002b8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b90:	fab3 f383 	clz	r3, r3
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x1d4>
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	0e9b      	lsrs	r3, r3, #26
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	e018      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x206>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002bcc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d101      	bne.n	8002bd8 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8002bd4:	2320      	movs	r3, #32
 8002bd6:	e004      	b.n	8002be2 <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8002bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bdc:	fab3 f383 	clz	r3, r3
 8002be0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d106      	bne.n	8002bf4 <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2200      	movs	r2, #0
 8002bec:	2100      	movs	r1, #0
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fc68 	bl	80024c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff fc4c 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002c00:	4603      	mov	r3, r0
 8002c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d10a      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x244>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2101      	movs	r1, #1
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fc41 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002c16:	4603      	mov	r3, r0
 8002c18:	0e9b      	lsrs	r3, r3, #26
 8002c1a:	f003 021f 	and.w	r2, r3, #31
 8002c1e:	e01e      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x282>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	2101      	movs	r1, #1
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff fc36 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c36:	fa93 f3a3 	rbit	r3, r3
 8002c3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e004      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8002c52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c56:	fab3 f383 	clz	r3, r3
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d105      	bne.n	8002c76 <HAL_ADC_ConfigChannel+0x29a>
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	0e9b      	lsrs	r3, r3, #26
 8002c70:	f003 031f 	and.w	r3, r3, #31
 8002c74:	e018      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x2cc>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e004      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8002c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d106      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff fc05 	bl	80024c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2102      	movs	r1, #2
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fbe9 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_ADC_ConfigChannel+0x30a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2102      	movs	r1, #2
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fbde 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	0e9b      	lsrs	r3, r3, #26
 8002ce0:	f003 021f 	and.w	r2, r3, #31
 8002ce4:	e01e      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x348>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2102      	movs	r1, #2
 8002cec:	4618      	mov	r0, r3
 8002cee:	f7ff fbd3 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cfc:	fa93 f3a3 	rbit	r3, r3
 8002d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002d04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002d0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8002d14:	2320      	movs	r3, #32
 8002d16:	e004      	b.n	8002d22 <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8002d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d1c:	fab3 f383 	clz	r3, r3
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d105      	bne.n	8002d3c <HAL_ADC_ConfigChannel+0x360>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	0e9b      	lsrs	r3, r3, #26
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	e016      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x38e>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d54:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8002d5c:	2320      	movs	r3, #32
 8002d5e:	e004      	b.n	8002d6a <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8002d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d64:	fab3 f383 	clz	r3, r3
 8002d68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d106      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	2102      	movs	r1, #2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fba4 	bl	80024c4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2103      	movs	r1, #3
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fb88 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x3cc>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2103      	movs	r1, #3
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff fb7d 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	0e9b      	lsrs	r3, r3, #26
 8002da2:	f003 021f 	and.w	r2, r3, #31
 8002da6:	e017      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x3fc>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2103      	movs	r1, #3
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff fb72 	bl	8002498 <LL_ADC_GetOffsetChannel>
 8002db4:	4603      	mov	r3, r0
 8002db6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dba:	fa93 f3a3 	rbit	r3, r3
 8002dbe:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002dc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002dc2:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e003      	b.n	8002dd6 <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8002dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dd0:	fab3 f383 	clz	r3, r3
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_ADC_ConfigChannel+0x414>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0e9b      	lsrs	r3, r3, #26
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	e011      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x438>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e00:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8002e08:	2320      	movs	r3, #32
 8002e0a:	e003      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8002e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d106      	bne.n	8002e26 <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2103      	movs	r1, #3
 8002e20:	4618      	mov	r0, r3
 8002e22:	f7ff fb4f 	bl	80024c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fc42 	bl	80026b4 <LL_ADC_IsEnabled>
 8002e30:	4603      	mov	r3, r0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f040 8140 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f7ff fbc3 	bl	80025d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4a8f      	ldr	r2, [pc, #572]	; (800308c <HAL_ADC_ConfigChannel+0x6b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	f040 8131 	bne.w	80030b8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10b      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x4a2>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	0e9b      	lsrs	r3, r3, #26
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f003 031f 	and.w	r3, r3, #31
 8002e72:	2b09      	cmp	r3, #9
 8002e74:	bf94      	ite	ls
 8002e76:	2301      	movls	r3, #1
 8002e78:	2300      	movhi	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	e019      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x4d6>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8002e96:	2320      	movs	r3, #32
 8002e98:	e003      	b.n	8002ea2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8002e9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e9c:	fab3 f383 	clz	r3, r3
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2b09      	cmp	r3, #9
 8002eaa:	bf94      	ite	ls
 8002eac:	2301      	movls	r3, #1
 8002eae:	2300      	movhi	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d079      	beq.n	8002faa <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d107      	bne.n	8002ed2 <HAL_ADC_ConfigChannel+0x4f6>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	3301      	adds	r3, #1
 8002eca:	069b      	lsls	r3, r3, #26
 8002ecc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ed0:	e015      	b.n	8002efe <HAL_ADC_ConfigChannel+0x522>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ee0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d101      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8002eea:	2320      	movs	r3, #32
 8002eec:	e003      	b.n	8002ef6 <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8002eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ef0:	fab3 f383 	clz	r3, r3
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	069b      	lsls	r3, r3, #26
 8002efa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d109      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x542>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	0e9b      	lsrs	r3, r3, #26
 8002f10:	3301      	adds	r3, #1
 8002f12:	f003 031f 	and.w	r3, r3, #31
 8002f16:	2101      	movs	r1, #1
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	e017      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x572>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	fa93 f3a3 	rbit	r3, r3
 8002f2a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f2e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8002f36:	2320      	movs	r3, #32
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8002f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f3c:	fab3 f383 	clz	r3, r3
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 031f 	and.w	r3, r3, #31
 8002f48:	2101      	movs	r1, #1
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	ea42 0103 	orr.w	r1, r2, r3
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10a      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x598>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	3301      	adds	r3, #1
 8002f66:	f003 021f 	and.w	r2, r3, #31
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	4413      	add	r3, r2
 8002f70:	051b      	lsls	r3, r3, #20
 8002f72:	e018      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x5ca>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7c:	fa93 f3a3 	rbit	r3, r3
 8002f80:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	e003      	b.n	8002f98 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8002f90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f92:	fab3 f383 	clz	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	3301      	adds	r3, #1
 8002f9a:	f003 021f 	and.w	r2, r3, #31
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fa6:	430b      	orrs	r3, r1
 8002fa8:	e081      	b.n	80030ae <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d107      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x5ea>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	0e9b      	lsrs	r3, r3, #26
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc4:	e015      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x616>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	fa93 f3a3 	rbit	r3, r3
 8002fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8002fde:	2320      	movs	r3, #32
 8002fe0:	e003      	b.n	8002fea <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8002fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	3301      	adds	r3, #1
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <HAL_ADC_ConfigChannel+0x636>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	0e9b      	lsrs	r3, r3, #26
 8003004:	3301      	adds	r3, #1
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	2101      	movs	r1, #1
 800300c:	fa01 f303 	lsl.w	r3, r1, r3
 8003010:	e017      	b.n	8003042 <HAL_ADC_ConfigChannel+0x666>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003018:	6a3b      	ldr	r3, [r7, #32]
 800301a:	fa93 f3a3 	rbit	r3, r3
 800301e:	61fb      	str	r3, [r7, #28]
  return result;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 800302a:	2320      	movs	r3, #32
 800302c:	e003      	b.n	8003036 <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	3301      	adds	r3, #1
 8003038:	f003 031f 	and.w	r3, r3, #31
 800303c:	2101      	movs	r1, #1
 800303e:	fa01 f303 	lsl.w	r3, r1, r3
 8003042:	ea42 0103 	orr.w	r1, r2, r3
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10d      	bne.n	800306e <HAL_ADC_ConfigChannel+0x692>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	0e9b      	lsrs	r3, r3, #26
 8003058:	3301      	adds	r3, #1
 800305a:	f003 021f 	and.w	r2, r3, #31
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b1e      	subs	r3, #30
 8003066:	051b      	lsls	r3, r3, #20
 8003068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800306c:	e01e      	b.n	80030ac <HAL_ADC_ConfigChannel+0x6d0>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	613b      	str	r3, [r7, #16]
  return result;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e006      	b.n	8003098 <HAL_ADC_ConfigChannel+0x6bc>
 800308a:	bf00      	nop
 800308c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
 8003098:	3301      	adds	r3, #1
 800309a:	f003 021f 	and.w	r2, r3, #31
 800309e:	4613      	mov	r3, r2
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	4413      	add	r3, r2
 80030a4:	3b1e      	subs	r3, #30
 80030a6:	051b      	lsls	r3, r3, #20
 80030a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030ac:	430b      	orrs	r3, r1
 80030ae:	683a      	ldr	r2, [r7, #0]
 80030b0:	6892      	ldr	r2, [r2, #8]
 80030b2:	4619      	mov	r1, r3
 80030b4:	f7ff fa60 	bl	8002578 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	4b44      	ldr	r3, [pc, #272]	; (80031d0 <HAL_ADC_ConfigChannel+0x7f4>)
 80030be:	4013      	ands	r3, r2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d07a      	beq.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030c4:	4843      	ldr	r0, [pc, #268]	; (80031d4 <HAL_ADC_ConfigChannel+0x7f8>)
 80030c6:	f7ff f9b5 	bl	8002434 <LL_ADC_GetCommonPathInternalCh>
 80030ca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a41      	ldr	r2, [pc, #260]	; (80031d8 <HAL_ADC_ConfigChannel+0x7fc>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d12c      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x756>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d126      	bne.n	8003132 <HAL_ADC_ConfigChannel+0x756>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a3c      	ldr	r2, [pc, #240]	; (80031dc <HAL_ADC_ConfigChannel+0x800>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_ADC_ConfigChannel+0x71c>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a3b      	ldr	r2, [pc, #236]	; (80031e0 <HAL_ADC_ConfigChannel+0x804>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d15d      	bne.n	80031b4 <HAL_ADC_ConfigChannel+0x7d8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003100:	4619      	mov	r1, r3
 8003102:	4834      	ldr	r0, [pc, #208]	; (80031d4 <HAL_ADC_ConfigChannel+0x7f8>)
 8003104:	f7ff f983 	bl	800240e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003108:	4b36      	ldr	r3, [pc, #216]	; (80031e4 <HAL_ADC_ConfigChannel+0x808>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	099b      	lsrs	r3, r3, #6
 800310e:	4a36      	ldr	r2, [pc, #216]	; (80031e8 <HAL_ADC_ConfigChannel+0x80c>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	099b      	lsrs	r3, r3, #6
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003122:	e002      	b.n	800312a <HAL_ADC_ConfigChannel+0x74e>
          {
            wait_loop_index--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f9      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x748>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003130:	e040      	b.n	80031b4 <HAL_ADC_ConfigChannel+0x7d8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a2d      	ldr	r2, [pc, #180]	; (80031ec <HAL_ADC_ConfigChannel+0x810>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d118      	bne.n	800316e <HAL_ADC_ConfigChannel+0x792>
 800313c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d112      	bne.n	800316e <HAL_ADC_ConfigChannel+0x792>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a23      	ldr	r2, [pc, #140]	; (80031dc <HAL_ADC_ConfigChannel+0x800>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d004      	beq.n	800315c <HAL_ADC_ConfigChannel+0x780>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a22      	ldr	r2, [pc, #136]	; (80031e0 <HAL_ADC_ConfigChannel+0x804>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d12d      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x7dc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003160:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003164:	4619      	mov	r1, r3
 8003166:	481b      	ldr	r0, [pc, #108]	; (80031d4 <HAL_ADC_ConfigChannel+0x7f8>)
 8003168:	f7ff f951 	bl	800240e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800316c:	e024      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x7dc>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1f      	ldr	r2, [pc, #124]	; (80031f0 <HAL_ADC_ConfigChannel+0x814>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d120      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003178:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800317c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d11a      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_ADC_ConfigChannel+0x800>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d115      	bne.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800318e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003192:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003196:	4619      	mov	r1, r3
 8003198:	480e      	ldr	r0, [pc, #56]	; (80031d4 <HAL_ADC_ConfigChannel+0x7f8>)
 800319a:	f7ff f938 	bl	800240e <LL_ADC_SetCommonPathInternalCh>
 800319e:	e00c      	b.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a4:	f043 0220 	orr.w	r2, r3, #32
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80031b2:	e002      	b.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b4:	bf00      	nop
 80031b6:	e000      	b.n	80031ba <HAL_ADC_ConfigChannel+0x7de>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031b8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80031c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	37d8      	adds	r7, #216	; 0xd8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	80080000 	.word	0x80080000
 80031d4:	50040300 	.word	0x50040300
 80031d8:	c7520000 	.word	0xc7520000
 80031dc:	50040000 	.word	0x50040000
 80031e0:	50040200 	.word	0x50040200
 80031e4:	20000000 	.word	0x20000000
 80031e8:	053e2d63 	.word	0x053e2d63
 80031ec:	cb840000 	.word	0xcb840000
 80031f0:	80000001 	.word	0x80000001

080031f4 <LL_ADC_IsEnabled>:
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <LL_ADC_IsEnabled+0x18>
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <LL_ADC_IsEnabled+0x1a>
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	370c      	adds	r7, #12
 8003212:	46bd      	mov	sp, r7
 8003214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003218:	4770      	bx	lr

0800321a <LL_ADC_REG_IsConversionOngoing>:
{
 800321a:	b480      	push	{r7}
 800321c:	b083      	sub	sp, #12
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d101      	bne.n	8003232 <LL_ADC_REG_IsConversionOngoing+0x18>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003240:	b590      	push	{r4, r7, lr}
 8003242:	b0a1      	sub	sp, #132	; 0x84
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800325a:	2302      	movs	r3, #2
 800325c:	e093      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003266:	2300      	movs	r3, #0
 8003268:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800326a:	2300      	movs	r3, #0
 800326c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a47      	ldr	r2, [pc, #284]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d102      	bne.n	800327e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003278:	4b46      	ldr	r3, [pc, #280]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e001      	b.n	8003282 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d10b      	bne.n	80032a0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e072      	b.n	8003386 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7ff ffb9 	bl	800321a <LL_ADC_REG_IsConversionOngoing>
 80032a8:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ffb3 	bl	800321a <LL_ADC_REG_IsConversionOngoing>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d154      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80032ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d151      	bne.n	8003364 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80032c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02c      	beq.n	8003326 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80032cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032de:	035b      	lsls	r3, r3, #13
 80032e0:	430b      	orrs	r3, r1
 80032e2:	431a      	orrs	r2, r3
 80032e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80032e8:	4829      	ldr	r0, [pc, #164]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80032ea:	f7ff ff83 	bl	80031f4 <LL_ADC_IsEnabled>
 80032ee:	4604      	mov	r4, r0
 80032f0:	4828      	ldr	r0, [pc, #160]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80032f2:	f7ff ff7f 	bl	80031f4 <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	431c      	orrs	r4, r3
 80032fa:	4828      	ldr	r0, [pc, #160]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80032fc:	f7ff ff7a 	bl	80031f4 <LL_ADC_IsEnabled>
 8003300:	4603      	mov	r3, r0
 8003302:	4323      	orrs	r3, r4
 8003304:	2b00      	cmp	r3, #0
 8003306:	d137      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003308:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003310:	f023 030f 	bic.w	r3, r3, #15
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	6811      	ldr	r1, [r2, #0]
 8003318:	683a      	ldr	r2, [r7, #0]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	430a      	orrs	r2, r1
 800331e:	431a      	orrs	r2, r3
 8003320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003322:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003324:	e028      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003326:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003330:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003332:	4817      	ldr	r0, [pc, #92]	; (8003390 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003334:	f7ff ff5e 	bl	80031f4 <LL_ADC_IsEnabled>
 8003338:	4604      	mov	r4, r0
 800333a:	4816      	ldr	r0, [pc, #88]	; (8003394 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800333c:	f7ff ff5a 	bl	80031f4 <LL_ADC_IsEnabled>
 8003340:	4603      	mov	r3, r0
 8003342:	431c      	orrs	r4, r3
 8003344:	4815      	ldr	r0, [pc, #84]	; (800339c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003346:	f7ff ff55 	bl	80031f4 <LL_ADC_IsEnabled>
 800334a:	4603      	mov	r3, r0
 800334c:	4323      	orrs	r3, r4
 800334e:	2b00      	cmp	r3, #0
 8003350:	d112      	bne.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003352:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800335a:	f023 030f 	bic.w	r3, r3, #15
 800335e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003360:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003362:	e009      	b.n	8003378 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003376:	e000      	b.n	800337a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003378:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003382:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003386:	4618      	mov	r0, r3
 8003388:	3784      	adds	r7, #132	; 0x84
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}
 800338e:	bf00      	nop
 8003390:	50040000 	.word	0x50040000
 8003394:	50040100 	.word	0x50040100
 8003398:	50040300 	.word	0x50040300
 800339c:	50040200 	.word	0x50040200

080033a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b085      	sub	sp, #20
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033bc:	4013      	ands	r3, r2
 80033be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d2:	4a04      	ldr	r2, [pc, #16]	; (80033e4 <__NVIC_SetPriorityGrouping+0x44>)
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	60d3      	str	r3, [r2, #12]
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e8:	b480      	push	{r7}
 80033ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033ec:	4b04      	ldr	r3, [pc, #16]	; (8003400 <__NVIC_GetPriorityGrouping+0x18>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	0a1b      	lsrs	r3, r3, #8
 80033f2:	f003 0307 	and.w	r3, r3, #7
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	e000ed00 	.word	0xe000ed00

08003404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	2b00      	cmp	r3, #0
 8003414:	db0b      	blt.n	800342e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	f003 021f 	and.w	r2, r3, #31
 800341c:	4907      	ldr	r1, [pc, #28]	; (800343c <__NVIC_EnableIRQ+0x38>)
 800341e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003422:	095b      	lsrs	r3, r3, #5
 8003424:	2001      	movs	r0, #1
 8003426:	fa00 f202 	lsl.w	r2, r0, r2
 800342a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000e100 	.word	0xe000e100

08003440 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	6039      	str	r1, [r7, #0]
 800344a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003450:	2b00      	cmp	r3, #0
 8003452:	db0a      	blt.n	800346a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	b2da      	uxtb	r2, r3
 8003458:	490c      	ldr	r1, [pc, #48]	; (800348c <__NVIC_SetPriority+0x4c>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	0112      	lsls	r2, r2, #4
 8003460:	b2d2      	uxtb	r2, r2
 8003462:	440b      	add	r3, r1
 8003464:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003468:	e00a      	b.n	8003480 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	b2da      	uxtb	r2, r3
 800346e:	4908      	ldr	r1, [pc, #32]	; (8003490 <__NVIC_SetPriority+0x50>)
 8003470:	79fb      	ldrb	r3, [r7, #7]
 8003472:	f003 030f 	and.w	r3, r3, #15
 8003476:	3b04      	subs	r3, #4
 8003478:	0112      	lsls	r2, r2, #4
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	440b      	add	r3, r1
 800347e:	761a      	strb	r2, [r3, #24]
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100
 8003490:	e000ed00 	.word	0xe000ed00

08003494 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	; 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f1c3 0307 	rsb	r3, r3, #7
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	bf28      	it	cs
 80034b2:	2304      	movcs	r3, #4
 80034b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3304      	adds	r3, #4
 80034ba:	2b06      	cmp	r3, #6
 80034bc:	d902      	bls.n	80034c4 <NVIC_EncodePriority+0x30>
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	3b03      	subs	r3, #3
 80034c2:	e000      	b.n	80034c6 <NVIC_EncodePriority+0x32>
 80034c4:	2300      	movs	r3, #0
 80034c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	fa02 f303 	lsl.w	r3, r2, r3
 80034d2:	43da      	mvns	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	401a      	ands	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034dc:	f04f 31ff 	mov.w	r1, #4294967295
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	fa01 f303 	lsl.w	r3, r1, r3
 80034e6:	43d9      	mvns	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	4313      	orrs	r3, r2
         );
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	; 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350c:	d301      	bcc.n	8003512 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800350e:	2301      	movs	r3, #1
 8003510:	e00f      	b.n	8003532 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003512:	4a0a      	ldr	r2, [pc, #40]	; (800353c <SysTick_Config+0x40>)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3b01      	subs	r3, #1
 8003518:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351a:	210f      	movs	r1, #15
 800351c:	f04f 30ff 	mov.w	r0, #4294967295
 8003520:	f7ff ff8e 	bl	8003440 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <SysTick_Config+0x40>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352a:	4b04      	ldr	r3, [pc, #16]	; (800353c <SysTick_Config+0x40>)
 800352c:	2207      	movs	r2, #7
 800352e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	e000e010 	.word	0xe000e010

08003540 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f7ff ff29 	bl	80033a0 <__NVIC_SetPriorityGrouping>
}
 800354e:	bf00      	nop
 8003550:	3708      	adds	r7, #8
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b086      	sub	sp, #24
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	60b9      	str	r1, [r7, #8]
 8003560:	607a      	str	r2, [r7, #4]
 8003562:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003564:	2300      	movs	r3, #0
 8003566:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003568:	f7ff ff3e 	bl	80033e8 <__NVIC_GetPriorityGrouping>
 800356c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	6978      	ldr	r0, [r7, #20]
 8003574:	f7ff ff8e 	bl	8003494 <NVIC_EncodePriority>
 8003578:	4602      	mov	r2, r0
 800357a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800357e:	4611      	mov	r1, r2
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff ff5d 	bl	8003440 <__NVIC_SetPriority>
}
 8003586:	bf00      	nop
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b082      	sub	sp, #8
 8003592:	af00      	add	r7, sp, #0
 8003594:	4603      	mov	r3, r0
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff31 	bl	8003404 <__NVIC_EnableIRQ>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b082      	sub	sp, #8
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f7ff ffa2 	bl	80034fc <SysTick_Config>
 80035b8:	4603      	mov	r3, r0
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_DCMI_Init>:
  * @note   By default, all interruptions are enabled (line end, frame end, overrun,
  *         VSYNC and embedded synchronization error interrupts).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e075      	b.n	80036c2 <HAL_DCMI_Init+0xfe>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d106      	bne.n	80035f0 <HAL_DCMI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7fe f870 	bl	80016d0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable DCMI IP before setting the configuration register */
  __HAL_DCMI_DISABLE(hdcmi);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003606:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_DCMI_Init+0x52>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
      is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /* Set DCMI parameters */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6819      	ldr	r1, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	4b2a      	ldr	r3, [pc, #168]	; (80036cc <HAL_DCMI_Init+0x108>)
 8003622:	400b      	ands	r3, r1
 8003624:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6819      	ldr	r1, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800363a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8003646:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8003652:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 800365e:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 800366a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	601a      	str	r2, [r3, #0]

  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b10      	cmp	r3, #16
 800367a:	d112      	bne.n	80036a2 <HAL_DCMI_Init+0xde>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	7f1b      	ldrb	r3, [r3, #28]
 8003680:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	7f5b      	ldrb	r3, [r3, #29]
 8003686:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 8003688:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	7f9b      	ldrb	r3, [r3, #30]
 800368e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SynchroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8003690:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SynchroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	7fdb      	ldrb	r3, [r3, #31]
 8003698:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SynchroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 800369e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SynchroCode.FrameStartCode)    |\
 80036a0:	619a      	str	r2, [r3, #24]
     - end of line
     - end of frame
     - data reception overrun
     - frame synchronization signal VSYNC
     - synchronization error */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME|DCMI_IT_OVR|DCMI_IT_ERR|DCMI_IT_VSYNC|DCMI_IT_LINE);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 021f 	orr.w	r2, r2, #31
 80036b0:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	ffe0f007 	.word	0xffe0f007

080036d0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d101      	bne.n	80036e2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e0ac      	b.n	800383c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f8b2 	bl	8003850 <DFSDM_GetChannelFromInstance>
 80036ec:	4603      	mov	r3, r0
 80036ee:	4a55      	ldr	r2, [pc, #340]	; (8003844 <HAL_DFSDM_ChannelInit+0x174>)
 80036f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e09f      	b.n	800383c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f7fe f867 	bl	80017d0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003702:	4b51      	ldr	r3, [pc, #324]	; (8003848 <HAL_DFSDM_ChannelInit+0x178>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3301      	adds	r3, #1
 8003708:	4a4f      	ldr	r2, [pc, #316]	; (8003848 <HAL_DFSDM_ChannelInit+0x178>)
 800370a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800370c:	4b4e      	ldr	r3, [pc, #312]	; (8003848 <HAL_DFSDM_ChannelInit+0x178>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d125      	bne.n	8003760 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003714:	4b4d      	ldr	r3, [pc, #308]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a4c      	ldr	r2, [pc, #304]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 800371a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800371e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003720:	4b4a      	ldr	r3, [pc, #296]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	4948      	ldr	r1, [pc, #288]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800372e:	4b47      	ldr	r3, [pc, #284]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a46      	ldr	r2, [pc, #280]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003734:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003738:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	791b      	ldrb	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d108      	bne.n	8003754 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003742:	4b42      	ldr	r3, [pc, #264]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	041b      	lsls	r3, r3, #16
 800374e:	493f      	ldr	r1, [pc, #252]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003750:	4313      	orrs	r3, r2
 8003752:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003754:	4b3d      	ldr	r3, [pc, #244]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a3c      	ldr	r2, [pc, #240]	; (800384c <HAL_DFSDM_ChannelInit+0x17c>)
 800375a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800375e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800376e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800377e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003784:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 020f 	bic.w	r2, r2, #15
 800379c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6819      	ldr	r1, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80037ac:	431a      	orrs	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80037c4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6899      	ldr	r1, [r3, #8]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80037d8:	431a      	orrs	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	430a      	orrs	r2, r1
 80037e0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685a      	ldr	r2, [r3, #4]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f002 0207 	and.w	r2, r2, #7
 80037f0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6859      	ldr	r1, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800381c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f810 	bl	8003850 <DFSDM_GetChannelFromInstance>
 8003830:	4602      	mov	r2, r0
 8003832:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_DFSDM_ChannelInit+0x174>)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000944 	.word	0x20000944
 8003848:	20000940 	.word	0x20000940
 800384c:	40016000 	.word	0x40016000

08003850 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1c      	ldr	r2, [pc, #112]	; (80038cc <DFSDM_GetChannelFromInstance+0x7c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d102      	bne.n	8003866 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e02b      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a19      	ldr	r2, [pc, #100]	; (80038d0 <DFSDM_GetChannelFromInstance+0x80>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d102      	bne.n	8003874 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800386e:	2301      	movs	r3, #1
 8003870:	60fb      	str	r3, [r7, #12]
 8003872:	e024      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a17      	ldr	r2, [pc, #92]	; (80038d4 <DFSDM_GetChannelFromInstance+0x84>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800387c:	2302      	movs	r3, #2
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	e01d      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <DFSDM_GetChannelFromInstance+0x88>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d102      	bne.n	8003890 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800388a:	2304      	movs	r3, #4
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e016      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a12      	ldr	r2, [pc, #72]	; (80038dc <DFSDM_GetChannelFromInstance+0x8c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d102      	bne.n	800389e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003898:	2305      	movs	r3, #5
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e00f      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a0f      	ldr	r2, [pc, #60]	; (80038e0 <DFSDM_GetChannelFromInstance+0x90>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d102      	bne.n	80038ac <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80038a6:	2306      	movs	r3, #6
 80038a8:	60fb      	str	r3, [r7, #12]
 80038aa:	e008      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a0d      	ldr	r2, [pc, #52]	; (80038e4 <DFSDM_GetChannelFromInstance+0x94>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d102      	bne.n	80038ba <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80038b4:	2307      	movs	r3, #7
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	e001      	b.n	80038be <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80038ba:	2303      	movs	r3, #3
 80038bc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80038be:	68fb      	ldr	r3, [r7, #12]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40016000 	.word	0x40016000
 80038d0:	40016020 	.word	0x40016020
 80038d4:	40016040 	.word	0x40016040
 80038d8:	40016080 	.word	0x40016080
 80038dc:	400160a0 	.word	0x400160a0
 80038e0:	400160c0 	.word	0x400160c0
 80038e4:	400160e0 	.word	0x400160e0

080038e8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d008      	beq.n	8003912 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2204      	movs	r2, #4
 8003904:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e022      	b.n	8003958 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 020e 	bic.w	r2, r2, #14
 8003920:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f022 0201 	bic.w	r2, r2, #1
 8003930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	f003 021c 	and.w	r2, r3, #28
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800393e:	2101      	movs	r1, #1
 8003940:	fa01 f202 	lsl.w	r2, r1, r2
 8003944:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003956:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d005      	beq.n	8003988 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2204      	movs	r2, #4
 8003980:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e029      	b.n	80039dc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f022 020e 	bic.w	r2, r2, #14
 8003996:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0201 	bic.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ac:	f003 021c 	and.w	r2, r3, #28
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b4:	2101      	movs	r1, #1
 80039b6:	fa01 f202 	lsl.w	r2, r1, r2
 80039ba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
    }
  }
  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
	...

080039e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039f2:	2300      	movs	r3, #0
 80039f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f6:	e166      	b.n	8003cc6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	2101      	movs	r1, #1
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa01 f303 	lsl.w	r3, r1, r3
 8003a04:	4013      	ands	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 8158 	beq.w	8003cc0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d005      	beq.n	8003a28 <HAL_GPIO_Init+0x40>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d130      	bne.n	8003a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	2203      	movs	r2, #3
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	43db      	mvns	r3, r3
 8003a3a:	693a      	ldr	r2, [r7, #16]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a5e:	2201      	movs	r2, #1
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	091b      	lsrs	r3, r3, #4
 8003a74:	f003 0201 	and.w	r2, r3, #1
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	693a      	ldr	r2, [r7, #16]
 8003a88:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d017      	beq.n	8003ac6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	693a      	ldr	r2, [r7, #16]
 8003ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d123      	bne.n	8003b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	08da      	lsrs	r2, r3, #3
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	3208      	adds	r2, #8
 8003ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	220f      	movs	r2, #15
 8003aea:	fa02 f303 	lsl.w	r3, r2, r3
 8003aee:	43db      	mvns	r3, r3
 8003af0:	693a      	ldr	r2, [r7, #16]
 8003af2:	4013      	ands	r3, r2
 8003af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	691a      	ldr	r2, [r3, #16]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	fa02 f303 	lsl.w	r3, r2, r3
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	08da      	lsrs	r2, r3, #3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	3208      	adds	r2, #8
 8003b14:	6939      	ldr	r1, [r7, #16]
 8003b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	2203      	movs	r2, #3
 8003b26:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f003 0203 	and.w	r2, r3, #3
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	4313      	orrs	r3, r2
 8003b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 80b2 	beq.w	8003cc0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b5c:	4b61      	ldr	r3, [pc, #388]	; (8003ce4 <HAL_GPIO_Init+0x2fc>)
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	4a60      	ldr	r2, [pc, #384]	; (8003ce4 <HAL_GPIO_Init+0x2fc>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6613      	str	r3, [r2, #96]	; 0x60
 8003b68:	4b5e      	ldr	r3, [pc, #376]	; (8003ce4 <HAL_GPIO_Init+0x2fc>)
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	f003 0301 	and.w	r3, r3, #1
 8003b70:	60bb      	str	r3, [r7, #8]
 8003b72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b74:	4a5c      	ldr	r2, [pc, #368]	; (8003ce8 <HAL_GPIO_Init+0x300>)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	089b      	lsrs	r3, r3, #2
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	220f      	movs	r2, #15
 8003b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b90:	43db      	mvns	r3, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4013      	ands	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b9e:	d02b      	beq.n	8003bf8 <HAL_GPIO_Init+0x210>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a52      	ldr	r2, [pc, #328]	; (8003cec <HAL_GPIO_Init+0x304>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d025      	beq.n	8003bf4 <HAL_GPIO_Init+0x20c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a51      	ldr	r2, [pc, #324]	; (8003cf0 <HAL_GPIO_Init+0x308>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d01f      	beq.n	8003bf0 <HAL_GPIO_Init+0x208>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a50      	ldr	r2, [pc, #320]	; (8003cf4 <HAL_GPIO_Init+0x30c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d019      	beq.n	8003bec <HAL_GPIO_Init+0x204>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a4f      	ldr	r2, [pc, #316]	; (8003cf8 <HAL_GPIO_Init+0x310>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <HAL_GPIO_Init+0x200>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a4e      	ldr	r2, [pc, #312]	; (8003cfc <HAL_GPIO_Init+0x314>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00d      	beq.n	8003be4 <HAL_GPIO_Init+0x1fc>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a4d      	ldr	r2, [pc, #308]	; (8003d00 <HAL_GPIO_Init+0x318>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <HAL_GPIO_Init+0x1f8>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a4c      	ldr	r2, [pc, #304]	; (8003d04 <HAL_GPIO_Init+0x31c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d101      	bne.n	8003bdc <HAL_GPIO_Init+0x1f4>
 8003bd8:	2307      	movs	r3, #7
 8003bda:	e00e      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003bdc:	2308      	movs	r3, #8
 8003bde:	e00c      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003be0:	2306      	movs	r3, #6
 8003be2:	e00a      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003be4:	2305      	movs	r3, #5
 8003be6:	e008      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003be8:	2304      	movs	r3, #4
 8003bea:	e006      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003bec:	2303      	movs	r3, #3
 8003bee:	e004      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	e002      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <HAL_GPIO_Init+0x212>
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	f002 0203 	and.w	r2, r2, #3
 8003c00:	0092      	lsls	r2, r2, #2
 8003c02:	4093      	lsls	r3, r2
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c0a:	4937      	ldr	r1, [pc, #220]	; (8003ce8 <HAL_GPIO_Init+0x300>)
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	089b      	lsrs	r3, r3, #2
 8003c10:	3302      	adds	r3, #2
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c18:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	43db      	mvns	r3, r3
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4013      	ands	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d003      	beq.n	8003c3c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c3c:	4a32      	ldr	r2, [pc, #200]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c42:	4b31      	ldr	r3, [pc, #196]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	43db      	mvns	r3, r3
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	4013      	ands	r3, r2
 8003c50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003c5e:	693a      	ldr	r2, [r7, #16]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c66:	4a28      	ldr	r2, [pc, #160]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c6c:	4b26      	ldr	r3, [pc, #152]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	43db      	mvns	r3, r3
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4013      	ands	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d003      	beq.n	8003c90 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c90:	4a1d      	ldr	r2, [pc, #116]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c96:	4b1c      	ldr	r3, [pc, #112]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cba:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <HAL_GPIO_Init+0x320>)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	3301      	adds	r3, #1
 8003cc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f47f ae91 	bne.w	80039f8 <HAL_GPIO_Init+0x10>
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	371c      	adds	r7, #28
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000800 	.word	0x48000800
 8003cf4:	48000c00 	.word	0x48000c00
 8003cf8:	48001000 	.word	0x48001000
 8003cfc:	48001400 	.word	0x48001400
 8003d00:	48001800 	.word	0x48001800
 8003d04:	48001c00 	.word	0x48001c00
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d1c:	787b      	ldrb	r3, [r7, #1]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d22:	887a      	ldrh	r2, [r7, #2]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d28:	e002      	b.n	8003d30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d2a:	887a      	ldrh	r2, [r7, #2]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	695b      	ldr	r3, [r3, #20]
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4013      	ands	r3, r2
 8003d54:	041a      	lsls	r2, r3, #16
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	43d9      	mvns	r1, r3
 8003d5a:	887b      	ldrh	r3, [r7, #2]
 8003d5c:	400b      	ands	r3, r1
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	619a      	str	r2, [r3, #24]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e081      	b.n	8003e86 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd fda2 	bl	80018e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	; 0x24
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f022 0201 	bic.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003dc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d107      	bne.n	8003dea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	689a      	ldr	r2, [r3, #8]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003de6:	609a      	str	r2, [r3, #8]
 8003de8:	e006      	b.n	8003df8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689a      	ldr	r2, [r3, #8]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003df6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d104      	bne.n	8003e0a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e08:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68da      	ldr	r2, [r3, #12]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69d9      	ldr	r1, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1a      	ldr	r2, [r3, #32]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f042 0201 	orr.w	r2, r2, #1
 8003e66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3708      	adds	r7, #8
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	b083      	sub	sp, #12
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
 8003e96:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	d138      	bne.n	8003f16 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d101      	bne.n	8003eb2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003eae:	2302      	movs	r3, #2
 8003eb0:	e032      	b.n	8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2224      	movs	r2, #36	; 0x24
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ee0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	6819      	ldr	r1, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d139      	bne.n	8003fae <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e033      	b.n	8003fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2224      	movs	r2, #36	; 0x24
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f76:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	021b      	lsls	r3, r3, #8
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	e000      	b.n	8003fb0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003fae:	2302      	movs	r3, #2
  }
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fbe:	b08f      	sub	sp, #60	; 0x3c
 8003fc0:	af0a      	add	r7, sp, #40	; 0x28
 8003fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e116      	b.n	80041fc <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f009 ffb5 	bl	800df58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d102      	bne.n	8004008 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f006 fec4 	bl	800ad9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	603b      	str	r3, [r7, #0]
 8004018:	687e      	ldr	r6, [r7, #4]
 800401a:	466d      	mov	r5, sp
 800401c:	f106 0410 	add.w	r4, r6, #16
 8004020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800402c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004030:	1d33      	adds	r3, r6, #4
 8004032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004034:	6838      	ldr	r0, [r7, #0]
 8004036:	f006 fdd7 	bl	800abe8 <USB_CoreInit>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d005      	beq.n	800404c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2202      	movs	r2, #2
 8004044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0d7      	b.n	80041fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2100      	movs	r1, #0
 8004052:	4618      	mov	r0, r3
 8004054:	f006 feb2 	bl	800adbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004058:	2300      	movs	r3, #0
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	e04a      	b.n	80040f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	333d      	adds	r3, #61	; 0x3d
 800406e:	2201      	movs	r2, #1
 8004070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	4413      	add	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	333c      	adds	r3, #60	; 0x3c
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004086:	7bfa      	ldrb	r2, [r7, #15]
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	b298      	uxth	r0, r3
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	4413      	add	r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	3344      	adds	r3, #68	; 0x44
 800409a:	4602      	mov	r2, r0
 800409c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	00db      	lsls	r3, r3, #3
 80040a6:	4413      	add	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3340      	adds	r3, #64	; 0x40
 80040ae:	2200      	movs	r2, #0
 80040b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040b2:	7bfa      	ldrb	r2, [r7, #15]
 80040b4:	6879      	ldr	r1, [r7, #4]
 80040b6:	4613      	mov	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	4413      	add	r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	3348      	adds	r3, #72	; 0x48
 80040c2:	2200      	movs	r2, #0
 80040c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040c6:	7bfa      	ldrb	r2, [r7, #15]
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	4613      	mov	r3, r2
 80040cc:	00db      	lsls	r3, r3, #3
 80040ce:	4413      	add	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	440b      	add	r3, r1
 80040d4:	334c      	adds	r3, #76	; 0x4c
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3354      	adds	r3, #84	; 0x54
 80040ea:	2200      	movs	r2, #0
 80040ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	3301      	adds	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	7bfa      	ldrb	r2, [r7, #15]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d3af      	bcc.n	800405e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]
 8004102:	e044      	b.n	800418e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004104:	7bfa      	ldrb	r2, [r7, #15]
 8004106:	6879      	ldr	r1, [r7, #4]
 8004108:	4613      	mov	r3, r2
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004116:	2200      	movs	r2, #0
 8004118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800411a:	7bfa      	ldrb	r2, [r7, #15]
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	4613      	mov	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800412c:	7bfa      	ldrb	r2, [r7, #15]
 800412e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004130:	7bfa      	ldrb	r2, [r7, #15]
 8004132:	6879      	ldr	r1, [r7, #4]
 8004134:	4613      	mov	r3, r2
 8004136:	00db      	lsls	r3, r3, #3
 8004138:	4413      	add	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004146:	7bfa      	ldrb	r2, [r7, #15]
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	4413      	add	r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	440b      	add	r3, r1
 8004154:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800415c:	7bfa      	ldrb	r2, [r7, #15]
 800415e:	6879      	ldr	r1, [r7, #4]
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	4413      	add	r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800416e:	2200      	movs	r2, #0
 8004170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004172:	7bfa      	ldrb	r2, [r7, #15]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	3301      	adds	r3, #1
 800418c:	73fb      	strb	r3, [r7, #15]
 800418e:	7bfa      	ldrb	r2, [r7, #15]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	429a      	cmp	r2, r3
 8004196:	d3b5      	bcc.n	8004104 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	603b      	str	r3, [r7, #0]
 800419e:	687e      	ldr	r6, [r7, #4]
 80041a0:	466d      	mov	r5, sp
 80041a2:	f106 0410 	add.w	r4, r6, #16
 80041a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80041b6:	1d33      	adds	r3, r6, #4
 80041b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ba:	6838      	ldr	r0, [r7, #0]
 80041bc:	f006 fe4a 	bl	800ae54 <USB_DevInit>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2202      	movs	r2, #2
 80041ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e014      	b.n	80041fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2201      	movs	r2, #1
 80041de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d102      	bne.n	80041f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f001 f882 	bl	80052f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f007 fed2 	bl	800bf9e <USB_DevDisconnect>

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004204 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_PCD_Start+0x1c>
 800421c:	2302      	movs	r3, #2
 800421e:	e01c      	b.n	800425a <HAL_PCD_Start+0x56>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	2b01      	cmp	r3, #1
 800422e:	d105      	bne.n	800423c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004234:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f006 fd99 	bl	800ad78 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f007 fe86 	bl	800bf5c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3710      	adds	r7, #16
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004262:	b590      	push	{r4, r7, lr}
 8004264:	b08d      	sub	sp, #52	; 0x34
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f007 ff44 	bl	800c106 <USB_GetMode>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	f040 847e 	bne.w	8004b82 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f007 fea8 	bl	800bfe0 <USB_ReadInterrupts>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8474 	beq.w	8004b80 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	0a1b      	lsrs	r3, r3, #8
 80042a2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f007 fe95 	bl	800bfe0 <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f003 0302 	and.w	r3, r3, #2
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d107      	bne.n	80042d0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f002 0202 	and.w	r2, r2, #2
 80042ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f007 fe83 	bl	800bfe0 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b10      	cmp	r3, #16
 80042e2:	d161      	bne.n	80043a8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699a      	ldr	r2, [r3, #24]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0210 	bic.w	r2, r2, #16
 80042f2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	f003 020f 	and.w	r2, r3, #15
 8004300:	4613      	mov	r3, r2
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	4413      	add	r3, r2
 8004310:	3304      	adds	r3, #4
 8004312:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	0c5b      	lsrs	r3, r3, #17
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	2b02      	cmp	r3, #2
 800431e:	d124      	bne.n	800436a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004326:	4013      	ands	r3, r2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d035      	beq.n	8004398 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	091b      	lsrs	r3, r3, #4
 8004334:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800433a:	b29b      	uxth	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	6a38      	ldr	r0, [r7, #32]
 8004340:	f007 fcba 	bl	800bcb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	691a      	ldr	r2, [r3, #16]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004350:	441a      	add	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004362:	441a      	add	r2, r3
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	621a      	str	r2, [r3, #32]
 8004368:	e016      	b.n	8004398 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	0c5b      	lsrs	r3, r3, #17
 800436e:	f003 030f 	and.w	r3, r3, #15
 8004372:	2b06      	cmp	r3, #6
 8004374:	d110      	bne.n	8004398 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800437c:	2208      	movs	r2, #8
 800437e:	4619      	mov	r1, r3
 8004380:	6a38      	ldr	r0, [r7, #32]
 8004382:	f007 fc99 	bl	800bcb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	091b      	lsrs	r3, r3, #4
 800438e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004392:	441a      	add	r2, r3
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699a      	ldr	r2, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f042 0210 	orr.w	r2, r2, #16
 80043a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f007 fe17 	bl	800bfe0 <USB_ReadInterrupts>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043bc:	f040 80a7 	bne.w	800450e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f007 fe1c 	bl	800c006 <USB_ReadDevAllOutEpInterrupt>
 80043ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80043d0:	e099      	b.n	8004506 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 808e 	beq.w	80044fa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e4:	b2d2      	uxtb	r2, r2
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f007 fe40 	bl	800c06e <USB_ReadDevOutEPInterrupt>
 80043ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	015a      	lsls	r2, r3, #5
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004406:	461a      	mov	r2, r3
 8004408:	2301      	movs	r3, #1
 800440a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800440c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fe96 	bl	8005140 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f003 0308 	and.w	r3, r3, #8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800442a:	461a      	mov	r2, r3
 800442c:	2308      	movs	r3, #8
 800442e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 fed2 	bl	80051dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f003 0310 	and.w	r3, r3, #16
 800443e:	2b00      	cmp	r3, #0
 8004440:	d008      	beq.n	8004454 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004444:	015a      	lsls	r2, r3, #5
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	4413      	add	r3, r2
 800444a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444e:	461a      	mov	r2, r3
 8004450:	2310      	movs	r3, #16
 8004452:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d030      	beq.n	80044c0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	2b80      	cmp	r3, #128	; 0x80
 8004468:	d109      	bne.n	800447e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004478:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800447c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800447e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004480:	4613      	mov	r3, r2
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	4413      	add	r3, r2
 8004490:	3304      	adds	r3, #4
 8004492:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	78db      	ldrb	r3, [r3, #3]
 8004498:	2b01      	cmp	r3, #1
 800449a:	d108      	bne.n	80044ae <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2200      	movs	r2, #0
 80044a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	4619      	mov	r1, r3
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f009 fe75 	bl	800e198 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	461a      	mov	r2, r3
 80044bc:	2302      	movs	r3, #2
 80044be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f003 0320 	and.w	r3, r3, #32
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d008      	beq.n	80044dc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044cc:	015a      	lsls	r2, r3, #5
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	4413      	add	r3, r2
 80044d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d6:	461a      	mov	r2, r3
 80044d8:	2320      	movs	r3, #32
 80044da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f2:	461a      	mov	r2, r3
 80044f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	3301      	adds	r3, #1
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004502:	085b      	lsrs	r3, r3, #1
 8004504:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004508:	2b00      	cmp	r3, #0
 800450a:	f47f af62 	bne.w	80043d2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f007 fd64 	bl	800bfe0 <USB_ReadInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800451e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004522:	f040 80a4 	bne.w	800466e <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f007 fd85 	bl	800c03a <USB_ReadDevAllInEpInterrupt>
 8004530:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004536:	e096      	b.n	8004666 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	f000 808b 	beq.w	800465a <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f007 fdab 	bl	800c0aa <USB_ReadDevInEPInterrupt>
 8004554:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d020      	beq.n	80045a2 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	2201      	movs	r2, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	43db      	mvns	r3, r3
 800457a:	69f9      	ldr	r1, [r7, #28]
 800457c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004580:	4013      	ands	r3, r2
 8004582:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	461a      	mov	r2, r3
 8004592:	2301      	movs	r3, #1
 8004594:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	b2db      	uxtb	r3, r3
 800459a:	4619      	mov	r1, r3
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f009 fd66 	bl	800e06e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0308 	and.w	r3, r3, #8
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80045ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b8:	461a      	mov	r2, r3
 80045ba:	2308      	movs	r3, #8
 80045bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d008      	beq.n	80045da <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	2310      	movs	r3, #16
 80045d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	461a      	mov	r2, r3
 80045f2:	2340      	movs	r3, #64	; 0x40
 80045f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d023      	beq.n	8004648 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004602:	6a38      	ldr	r0, [r7, #32]
 8004604:	f006 fd72 	bl	800b0ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	3338      	adds	r3, #56	; 0x38
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4413      	add	r3, r2
 8004618:	3304      	adds	r3, #4
 800461a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	78db      	ldrb	r3, [r3, #3]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d108      	bne.n	8004636 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2200      	movs	r2, #0
 8004628:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f009 fdc3 	bl	800e1bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004638:	015a      	lsls	r2, r3, #5
 800463a:	69fb      	ldr	r3, [r7, #28]
 800463c:	4413      	add	r3, r2
 800463e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004642:	461a      	mov	r2, r3
 8004644:	2302      	movs	r3, #2
 8004646:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800464e:	2b00      	cmp	r3, #0
 8004650:	d003      	beq.n	800465a <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 fcea 	bl	800502e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	3301      	adds	r3, #1
 800465e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004662:	085b      	lsrs	r3, r3, #1
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	f47f af65 	bne.w	8004538 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4618      	mov	r0, r3
 8004674:	f007 fcb4 	bl	800bfe0 <USB_ReadInterrupts>
 8004678:	4603      	mov	r3, r0
 800467a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800467e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004682:	d122      	bne.n	80046ca <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004692:	f023 0301 	bic.w	r3, r3, #1
 8004696:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d108      	bne.n	80046b4 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80046aa:	2100      	movs	r1, #0
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f009 fff7 	bl	800e6a0 <HAL_PCDEx_LPM_Callback>
 80046b2:	e002      	b.n	80046ba <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f009 fd47 	bl	800e148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80046c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f007 fc86 	bl	800bfe0 <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046de:	d112      	bne.n	8004706 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d102      	bne.n	80046f6 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f009 fd03 	bl	800e0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695a      	ldr	r2, [r3, #20]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004704:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f007 fc68 	bl	800bfe0 <USB_ReadInterrupts>
 8004710:	4603      	mov	r3, r0
 8004712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800471a:	d121      	bne.n	8004760 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695a      	ldr	r2, [r3, #20]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800472a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004732:	2b00      	cmp	r3, #0
 8004734:	d111      	bne.n	800475a <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2201      	movs	r2, #1
 800473a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004744:	089b      	lsrs	r3, r3, #2
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004750:	2101      	movs	r1, #1
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f009 ffa4 	bl	800e6a0 <HAL_PCDEx_LPM_Callback>
 8004758:	e002      	b.n	8004760 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f009 fcce 	bl	800e0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f007 fc3b 	bl	800bfe0 <USB_ReadInterrupts>
 800476a:	4603      	mov	r3, r0
 800476c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004774:	f040 80b5 	bne.w	80048e2 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	69fa      	ldr	r2, [r7, #28]
 8004782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004786:	f023 0301 	bic.w	r3, r3, #1
 800478a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2110      	movs	r1, #16
 8004792:	4618      	mov	r0, r3
 8004794:	f006 fcaa 	bl	800b0ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004798:	2300      	movs	r3, #0
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479c:	e046      	b.n	800482c <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800479e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a0:	015a      	lsls	r2, r3, #5
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	4413      	add	r3, r2
 80047a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047aa:	461a      	mov	r2, r3
 80047ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c2:	0151      	lsls	r1, r2, #5
 80047c4:	69fa      	ldr	r2, [r7, #28]
 80047c6:	440a      	add	r2, r1
 80047c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047de:	461a      	mov	r2, r3
 80047e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047e4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e8:	015a      	lsls	r2, r3, #5
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	4413      	add	r3, r2
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f6:	0151      	lsls	r1, r2, #5
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	440a      	add	r2, r1
 80047fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004800:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004804:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004820:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004824:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004828:	3301      	adds	r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004832:	429a      	cmp	r2, r3
 8004834:	d3b3      	bcc.n	800479e <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483c:	69db      	ldr	r3, [r3, #28]
 800483e:	69fa      	ldr	r2, [r7, #28]
 8004840:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004844:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004848:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	2b00      	cmp	r3, #0
 8004850:	d016      	beq.n	8004880 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004862:	f043 030b 	orr.w	r3, r3, #11
 8004866:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004872:	69fa      	ldr	r2, [r7, #28]
 8004874:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004878:	f043 030b 	orr.w	r3, r3, #11
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	e015      	b.n	80048ac <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	695b      	ldr	r3, [r3, #20]
 8004888:	69fa      	ldr	r2, [r7, #28]
 800488a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800488e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004892:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004896:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a6:	f043 030b 	orr.w	r3, r3, #11
 80048aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69fa      	ldr	r2, [r7, #28]
 80048b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f007 fc4b 	bl	800c168 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f007 fb7a 	bl	800bfe0 <USB_ReadInterrupts>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048f6:	d124      	bne.n	8004942 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4618      	mov	r0, r3
 80048fe:	f007 fc10 	bl	800c122 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4618      	mov	r0, r3
 8004908:	f006 fc6d 	bl	800b1e6 <USB_GetDevSpeed>
 800490c:	4603      	mov	r3, r0
 800490e:	461a      	mov	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681c      	ldr	r4, [r3, #0]
 8004918:	f001 fc0c 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 800491c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
 8004926:	4620      	mov	r0, r4
 8004928:	f006 f98a 	bl	800ac40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f009 fbc6 	bl	800e0be <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	695a      	ldr	r2, [r3, #20]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004940:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f007 fb4a 	bl	800bfe0 <USB_ReadInterrupts>
 800494c:	4603      	mov	r3, r0
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b08      	cmp	r3, #8
 8004954:	d10a      	bne.n	800496c <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f009 fba3 	bl	800e0a2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695a      	ldr	r2, [r3, #20]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f002 0208 	and.w	r2, r2, #8
 800496a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4618      	mov	r0, r3
 8004972:	f007 fb35 	bl	800bfe0 <USB_ReadInterrupts>
 8004976:	4603      	mov	r3, r0
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d122      	bne.n	80049c6 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800498c:	2301      	movs	r3, #1
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
 8004990:	e014      	b.n	80049bc <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004992:	6879      	ldr	r1, [r7, #4]
 8004994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d105      	bne.n	80049b6 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	4619      	mov	r1, r3
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 fb0b 	bl	8004fcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	3301      	adds	r3, #1
 80049ba:	627b      	str	r3, [r7, #36]	; 0x24
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d3e5      	bcc.n	8004992 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f007 fb08 	bl	800bfe0 <USB_ReadInterrupts>
 80049d0:	4603      	mov	r3, r0
 80049d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049da:	d13b      	bne.n	8004a54 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049dc:	2301      	movs	r3, #1
 80049de:	627b      	str	r3, [r7, #36]	; 0x24
 80049e0:	e02b      	b.n	8004a3a <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049f2:	6879      	ldr	r1, [r7, #4]
 80049f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f6:	4613      	mov	r3, r2
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4413      	add	r3, r2
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	440b      	add	r3, r1
 8004a00:	3340      	adds	r3, #64	; 0x40
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d115      	bne.n	8004a34 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	da12      	bge.n	8004a34 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	333f      	adds	r3, #63	; 0x3f
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 facc 	bl	8004fcc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	3301      	adds	r3, #1
 8004a38:	627b      	str	r3, [r7, #36]	; 0x24
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d3ce      	bcc.n	80049e2 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695a      	ldr	r2, [r3, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f007 fac1 	bl	800bfe0 <USB_ReadInterrupts>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a68:	d155      	bne.n	8004b16 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6e:	e045      	b.n	8004afc <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	015a      	lsls	r2, r3, #5
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	4413      	add	r3, r2
 8004a78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d12e      	bne.n	8004af6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	da2b      	bge.n	8004af6 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004aaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d121      	bne.n	8004af6 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ab2:	6879      	ldr	r1, [r7, #4]
 8004ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af2:	6053      	str	r3, [r2, #4]
            break;
 8004af4:	e007      	b.n	8004b06 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af8:	3301      	adds	r3, #1
 8004afa:	627b      	str	r3, [r7, #36]	; 0x24
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d3b4      	bcc.n	8004a70 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	695a      	ldr	r2, [r3, #20]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f007 fa60 	bl	800bfe0 <USB_ReadInterrupts>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b2a:	d10a      	bne.n	8004b42 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f009 fb57 	bl	800e1e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f007 fa4a 	bl	800bfe0 <USB_ReadInterrupts>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d115      	bne.n	8004b82 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f009 fb47 	bl	800e1fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	e000      	b.n	8004b82 <HAL_PCD_IRQHandler+0x920>
      return;
 8004b80:	bf00      	nop
    }
  }
}
 8004b82:	3734      	adds	r7, #52	; 0x34
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd90      	pop	{r4, r7, pc}

08004b88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d101      	bne.n	8004ba2 <HAL_PCD_SetAddress+0x1a>
 8004b9e:	2302      	movs	r3, #2
 8004ba0:	e013      	b.n	8004bca <HAL_PCD_SetAddress+0x42>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2201      	movs	r2, #1
 8004ba6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	78fa      	ldrb	r2, [r7, #3]
 8004bae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f007 f9a8 	bl	800bf10 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
 8004bda:	4608      	mov	r0, r1
 8004bdc:	4611      	mov	r1, r2
 8004bde:	461a      	mov	r2, r3
 8004be0:	4603      	mov	r3, r0
 8004be2:	70fb      	strb	r3, [r7, #3]
 8004be4:	460b      	mov	r3, r1
 8004be6:	803b      	strh	r3, [r7, #0]
 8004be8:	4613      	mov	r3, r2
 8004bea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bf0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	da0f      	bge.n	8004c18 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bf8:	78fb      	ldrb	r3, [r7, #3]
 8004bfa:	f003 020f 	and.w	r2, r3, #15
 8004bfe:	4613      	mov	r3, r2
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	4413      	add	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	3338      	adds	r3, #56	; 0x38
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2201      	movs	r2, #1
 8004c14:	705a      	strb	r2, [r3, #1]
 8004c16:	e00f      	b.n	8004c38 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	f003 020f 	and.w	r2, r3, #15
 8004c1e:	4613      	mov	r3, r2
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4413      	add	r3, r2
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	3304      	adds	r3, #4
 8004c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	f003 030f 	and.w	r3, r3, #15
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c44:	883a      	ldrh	r2, [r7, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	78ba      	ldrb	r2, [r7, #2]
 8004c4e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	785b      	ldrb	r3, [r3, #1]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d004      	beq.n	8004c62 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c62:	78bb      	ldrb	r3, [r7, #2]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d102      	bne.n	8004c6e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d101      	bne.n	8004c7c <HAL_PCD_EP_Open+0xaa>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	e00e      	b.n	8004c9a <HAL_PCD_EP_Open+0xc8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68f9      	ldr	r1, [r7, #12]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f006 faca 	bl	800b224 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004c98:	7afb      	ldrb	r3, [r7, #11]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b084      	sub	sp, #16
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
 8004caa:	460b      	mov	r3, r1
 8004cac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da0f      	bge.n	8004cd6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	3338      	adds	r3, #56	; 0x38
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4413      	add	r3, r2
 8004cca:	3304      	adds	r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	705a      	strb	r2, [r3, #1]
 8004cd4:	e00f      	b.n	8004cf6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	4613      	mov	r3, r2
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	4413      	add	r3, r2
 8004cec:	3304      	adds	r3, #4
 8004cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004cf6:	78fb      	ldrb	r3, [r7, #3]
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	b2da      	uxtb	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_PCD_EP_Close+0x6e>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e00e      	b.n	8004d2e <HAL_PCD_EP_Close+0x8c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f006 fb08 	bl	800b334 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	60f8      	str	r0, [r7, #12]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
 8004d42:	460b      	mov	r3, r1
 8004d44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d46:	7afb      	ldrb	r3, [r7, #11]
 8004d48:	f003 020f 	and.w	r2, r3, #15
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	00db      	lsls	r3, r3, #3
 8004d50:	4413      	add	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d78:	7afb      	ldrb	r3, [r7, #11]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	b2da      	uxtb	r2, r3
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d84:	7afb      	ldrb	r3, [r7, #11]
 8004d86:	f003 030f 	and.w	r3, r3, #15
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6979      	ldr	r1, [r7, #20]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f006 fd89 	bl	800b8ac <USB_EP0StartXfer>
 8004d9a:	e005      	b.n	8004da8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6979      	ldr	r1, [r7, #20]
 8004da2:	4618      	mov	r0, r3
 8004da4:	f006 fba2 	bl	800b4ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	460b      	mov	r3, r1
 8004dbc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	f003 020f 	and.w	r2, r3, #15
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	00db      	lsls	r3, r3, #3
 8004dca:	4413      	add	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004dd4:	681b      	ldr	r3, [r3, #0]
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b086      	sub	sp, #24
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	607a      	str	r2, [r7, #4]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	460b      	mov	r3, r1
 8004df0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004df2:	7afb      	ldrb	r3, [r7, #11]
 8004df4:	f003 020f 	and.w	r2, r3, #15
 8004df8:	4613      	mov	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	4413      	add	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	3338      	adds	r3, #56	; 0x38
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	3304      	adds	r3, #4
 8004e08:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e22:	7afb      	ldrb	r3, [r7, #11]
 8004e24:	f003 030f 	and.w	r3, r3, #15
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e2e:	7afb      	ldrb	r3, [r7, #11]
 8004e30:	f003 030f 	and.w	r3, r3, #15
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	6979      	ldr	r1, [r7, #20]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f006 fd34 	bl	800b8ac <USB_EP0StartXfer>
 8004e44:	e005      	b.n	8004e52 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6979      	ldr	r1, [r7, #20]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f006 fb4d 	bl	800b4ec <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	460b      	mov	r3, r1
 8004e66:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004e68:	78fb      	ldrb	r3, [r7, #3]
 8004e6a:	f003 020f 	and.w	r2, r3, #15
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d901      	bls.n	8004e7a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e04e      	b.n	8004f18 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da0f      	bge.n	8004ea2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e82:	78fb      	ldrb	r3, [r7, #3]
 8004e84:	f003 020f 	and.w	r2, r3, #15
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	3338      	adds	r3, #56	; 0x38
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	4413      	add	r3, r2
 8004e96:	3304      	adds	r3, #4
 8004e98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	705a      	strb	r2, [r3, #1]
 8004ea0:	e00d      	b.n	8004ebe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004ea2:	78fa      	ldrb	r2, [r7, #3]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	4413      	add	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	3304      	adds	r3, #4
 8004eb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d101      	bne.n	8004ede <HAL_PCD_EP_SetStall+0x82>
 8004eda:	2302      	movs	r3, #2
 8004edc:	e01c      	b.n	8004f18 <HAL_PCD_EP_SetStall+0xbc>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68f9      	ldr	r1, [r7, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f006 ff3b 	bl	800bd68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ef2:	78fb      	ldrb	r3, [r7, #3]
 8004ef4:	f003 030f 	and.w	r3, r3, #15
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d108      	bne.n	8004f0e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f06:	4619      	mov	r1, r3
 8004f08:	4610      	mov	r0, r2
 8004f0a:	f007 f92d 	bl	800c168 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	460b      	mov	r3, r1
 8004f2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	f003 020f 	and.w	r2, r3, #15
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d901      	bls.n	8004f3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e042      	b.n	8004fc4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	da0f      	bge.n	8004f66 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f46:	78fb      	ldrb	r3, [r7, #3]
 8004f48:	f003 020f 	and.w	r2, r3, #15
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	00db      	lsls	r3, r3, #3
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	3338      	adds	r3, #56	; 0x38
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4413      	add	r3, r2
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2201      	movs	r2, #1
 8004f62:	705a      	strb	r2, [r3, #1]
 8004f64:	e00f      	b.n	8004f86 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f66:	78fb      	ldrb	r3, [r7, #3]
 8004f68:	f003 020f 	and.w	r2, r3, #15
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	3304      	adds	r3, #4
 8004f7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	b2da      	uxtb	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d101      	bne.n	8004fa6 <HAL_PCD_EP_ClrStall+0x86>
 8004fa2:	2302      	movs	r3, #2
 8004fa4:	e00e      	b.n	8004fc4 <HAL_PCD_EP_ClrStall+0xa4>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68f9      	ldr	r1, [r7, #12]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f006 ff45 	bl	800be44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004fd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	da0c      	bge.n	8004ffa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fe0:	78fb      	ldrb	r3, [r7, #3]
 8004fe2:	f003 020f 	and.w	r2, r3, #15
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	3338      	adds	r3, #56	; 0x38
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	e00c      	b.n	8005014 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	f003 020f 	and.w	r2, r3, #15
 8005000:	4613      	mov	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	4413      	add	r3, r2
 8005010:	3304      	adds	r3, #4
 8005012:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68f9      	ldr	r1, [r7, #12]
 800501a:	4618      	mov	r0, r3
 800501c:	f006 fd68 	bl	800baf0 <USB_EPStopXfer>
 8005020:	4603      	mov	r3, r0
 8005022:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005024:	7afb      	ldrb	r3, [r7, #11]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b088      	sub	sp, #32
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	3338      	adds	r3, #56	; 0x38
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1a      	ldr	r2, [r3, #32]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	429a      	cmp	r2, r3
 8005060:	d901      	bls.n	8005066 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e067      	b.n	8005136 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	699a      	ldr	r2, [r3, #24]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	69fa      	ldr	r2, [r7, #28]
 8005078:	429a      	cmp	r2, r3
 800507a:	d902      	bls.n	8005082 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	3303      	adds	r3, #3
 8005086:	089b      	lsrs	r3, r3, #2
 8005088:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800508a:	e026      	b.n	80050da <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d902      	bls.n	80050a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	3303      	adds	r3, #3
 80050ac:	089b      	lsrs	r3, r3, #2
 80050ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6919      	ldr	r1, [r3, #16]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	b2da      	uxtb	r2, r3
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	6978      	ldr	r0, [r7, #20]
 80050be:	f006 fdc1 	bl	800bc44 <USB_WritePacket>

    ep->xfer_buff  += len;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	691a      	ldr	r2, [r3, #16]
 80050c6:	69fb      	ldr	r3, [r7, #28]
 80050c8:	441a      	add	r2, r3
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1a      	ldr	r2, [r3, #32]
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	441a      	add	r2, r3
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	015a      	lsls	r2, r3, #5
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	4413      	add	r3, r2
 80050e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d809      	bhi.n	8005104 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1a      	ldr	r2, [r3, #32]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d203      	bcs.n	8005104 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1c3      	bne.n	800508c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	699a      	ldr	r2, [r3, #24]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	429a      	cmp	r2, r3
 800510e:	d811      	bhi.n	8005134 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	f003 030f 	and.w	r3, r3, #15
 8005116:	2201      	movs	r2, #1
 8005118:	fa02 f303 	lsl.w	r3, r2, r3
 800511c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	43db      	mvns	r3, r3
 800512a:	6939      	ldr	r1, [r7, #16]
 800512c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005130:	4013      	ands	r3, r2
 8005132:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
	...

08005140 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
 8005148:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	333c      	adds	r3, #60	; 0x3c
 8005158:	3304      	adds	r3, #4
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	015a      	lsls	r2, r3, #5
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	4413      	add	r3, r2
 8005166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4a19      	ldr	r2, [pc, #100]	; (80051d8 <PCD_EP_OutXfrComplete_int+0x98>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d124      	bne.n	80051c0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d00a      	beq.n	8005196 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800518c:	461a      	mov	r2, r3
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	6093      	str	r3, [r2, #8]
 8005194:	e01a      	b.n	80051cc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f003 0320 	and.w	r3, r3, #32
 800519c:	2b00      	cmp	r3, #0
 800519e:	d008      	beq.n	80051b2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ac:	461a      	mov	r2, r3
 80051ae:	2320      	movs	r3, #32
 80051b0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	4619      	mov	r1, r3
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f008 ff3d 	bl	800e038 <HAL_PCD_DataOutStageCallback>
 80051be:	e005      	b.n	80051cc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f008 ff36 	bl	800e038 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3718      	adds	r7, #24
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	4f54310a 	.word	0x4f54310a

080051dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	333c      	adds	r3, #60	; 0x3c
 80051f4:	3304      	adds	r3, #4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4a0c      	ldr	r2, [pc, #48]	; (8005240 <PCD_EP_OutSetupPacket_int+0x64>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d90e      	bls.n	8005230 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005218:	2b00      	cmp	r3, #0
 800521a:	d009      	beq.n	8005230 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005228:	461a      	mov	r2, r3
 800522a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800522e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f008 feef 	bl	800e014 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3718      	adds	r7, #24
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	4f54300a 	.word	0x4f54300a

08005244 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005244:	b480      	push	{r7}
 8005246:	b085      	sub	sp, #20
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
 8005250:	4613      	mov	r3, r2
 8005252:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005262:	883b      	ldrh	r3, [r7, #0]
 8005264:	0419      	lsls	r1, r3, #16
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	430a      	orrs	r2, r1
 800526e:	629a      	str	r2, [r3, #40]	; 0x28
 8005270:	e028      	b.n	80052c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005280:	2300      	movs	r3, #0
 8005282:	73fb      	strb	r3, [r7, #15]
 8005284:	e00d      	b.n	80052a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	3340      	adds	r3, #64	; 0x40
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	0c1b      	lsrs	r3, r3, #16
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4413      	add	r3, r2
 800529a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800529c:	7bfb      	ldrb	r3, [r7, #15]
 800529e:	3301      	adds	r3, #1
 80052a0:	73fb      	strb	r3, [r7, #15]
 80052a2:	7bfa      	ldrb	r2, [r7, #15]
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d3ec      	bcc.n	8005286 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80052ac:	883b      	ldrh	r3, [r7, #0]
 80052ae:	0418      	lsls	r0, r3, #16
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6819      	ldr	r1, [r3, #0]
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	3b01      	subs	r3, #1
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	4302      	orrs	r2, r0
 80052bc:	3340      	adds	r3, #64	; 0x40
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	460b      	mov	r3, r1
 80052dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	887a      	ldrh	r2, [r7, #2]
 80052e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005326:	f043 0303 	orr.w	r3, r3, #3
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005340:	4b05      	ldr	r3, [pc, #20]	; (8005358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800534a:	6013      	str	r3, [r2, #0]
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	40007000 	.word	0x40007000

0800535c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8005360:	4b04      	ldr	r3, [pc, #16]	; (8005374 <HAL_PWREx_GetVoltageRange+0x18>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005368:	4618      	mov	r0, r3
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40007000 	.word	0x40007000

08005378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005386:	d130      	bne.n	80053ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005388:	4b23      	ldr	r3, [pc, #140]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005394:	d038      	beq.n	8005408 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005396:	4b20      	ldr	r3, [pc, #128]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800539e:	4a1e      	ldr	r2, [pc, #120]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053a6:	4b1d      	ldr	r3, [pc, #116]	; (800541c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2232      	movs	r2, #50	; 0x32
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80053b2:	fba2 2303 	umull	r2, r3, r2, r3
 80053b6:	0c9b      	lsrs	r3, r3, #18
 80053b8:	3301      	adds	r3, #1
 80053ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053bc:	e002      	b.n	80053c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b01      	subs	r3, #1
 80053c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053c4:	4b14      	ldr	r3, [pc, #80]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d0:	d102      	bne.n	80053d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f2      	bne.n	80053be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053d8:	4b0f      	ldr	r3, [pc, #60]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e4:	d110      	bne.n	8005408 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e00f      	b.n	800540a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80053ea:	4b0b      	ldr	r3, [pc, #44]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d007      	beq.n	8005408 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80053f8:	4b07      	ldr	r3, [pc, #28]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005400:	4a05      	ldr	r2, [pc, #20]	; (8005418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005406:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40007000 	.word	0x40007000
 800541c:	20000000 	.word	0x20000000
 8005420:	431bde83 	.word	0x431bde83

08005424 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8005428:	4b05      	ldr	r3, [pc, #20]	; (8005440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	4a04      	ldr	r2, [pc, #16]	; (8005440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800542e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005432:	6053      	str	r3, [r2, #4]
}
 8005434:	bf00      	nop
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40007000 	.word	0x40007000

08005444 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_PWREx_EnableVddIO2+0x1c>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a04      	ldr	r2, [pc, #16]	; (8005460 <HAL_PWREx_EnableVddIO2+0x1c>)
 800544e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005452:	6053      	str	r3, [r2, #4]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40007000 	.word	0x40007000

08005464 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af02      	add	r7, sp, #8
 800546a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800546c:	f7fc ff8c 	bl	8002388 <HAL_GetTick>
 8005470:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e069      	b.n	8005550 <HAL_QSPI_Init+0xec>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10b      	bne.n	80054a0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fc fc1b 	bl	8001ccc <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8005496:	f241 3188 	movw	r1, #5000	; 0x1388
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f85e 	bl	800555c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	021a      	lsls	r2, r3, #8
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	430a      	orrs	r2, r1
 80054b8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054be:	9300      	str	r3, [sp, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	2120      	movs	r1, #32
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 f856 	bl	8005578 <QSPI_WaitFlagStateUntilTimeout>
 80054cc:	4603      	mov	r3, r0
 80054ce:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80054d0:	7afb      	ldrb	r3, [r7, #11]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d137      	bne.n	8005546 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	6852      	ldr	r2, [r2, #4]
 80054e8:	0611      	lsls	r1, r2, #24
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	68d2      	ldr	r2, [r2, #12]
 80054ee:	4311      	orrs	r1, r2
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	69d2      	ldr	r2, [r2, #28]
 80054f4:	4311      	orrs	r1, r2
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	6a12      	ldr	r2, [r2, #32]
 80054fa:	4311      	orrs	r1, r2
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6812      	ldr	r2, [r2, #0]
 8005500:	430b      	orrs	r3, r1
 8005502:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	4b13      	ldr	r3, [pc, #76]	; (8005558 <HAL_QSPI_Init+0xf4>)
 800550c:	4013      	ands	r3, r2
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	6912      	ldr	r2, [r2, #16]
 8005512:	0411      	lsls	r1, r2, #16
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	6952      	ldr	r2, [r2, #20]
 8005518:	4311      	orrs	r1, r2
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6992      	ldr	r2, [r2, #24]
 800551e:	4311      	orrs	r1, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6812      	ldr	r2, [r2, #0]
 8005524:	430b      	orrs	r3, r1
 8005526:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f042 0201 	orr.w	r2, r2, #1
 8005536:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 800554e:	7afb      	ldrb	r3, [r7, #11]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	ffe0f8fe 	.word	0xffe0f8fe

0800555c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	683a      	ldr	r2, [r7, #0]
 800556a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005588:	e01a      	b.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800558a:	69bb      	ldr	r3, [r7, #24]
 800558c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005590:	d016      	beq.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005592:	f7fc fef9 	bl	8002388 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d302      	bcc.n	80055a8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d10b      	bne.n	80055c0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2204      	movs	r2, #4
 80055ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e00e      	b.n	80055de <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689a      	ldr	r2, [r3, #8]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	bf14      	ite	ne
 80055ce:	2301      	movne	r3, #1
 80055d0:	2300      	moveq	r3, #0
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	461a      	mov	r2, r3
 80055d6:	79fb      	ldrb	r3, [r7, #7]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d1d6      	bne.n	800558a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b088      	sub	sp, #32
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d102      	bne.n	80055fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	f000 bc08 	b.w	8005e0c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fc:	4b96      	ldr	r3, [pc, #600]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f003 030c 	and.w	r3, r3, #12
 8005604:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005606:	4b94      	ldr	r3, [pc, #592]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0310 	and.w	r3, r3, #16
 8005618:	2b00      	cmp	r3, #0
 800561a:	f000 80e4 	beq.w	80057e6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d007      	beq.n	8005634 <HAL_RCC_OscConfig+0x4c>
 8005624:	69bb      	ldr	r3, [r7, #24]
 8005626:	2b0c      	cmp	r3, #12
 8005628:	f040 808b 	bne.w	8005742 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	2b01      	cmp	r3, #1
 8005630:	f040 8087 	bne.w	8005742 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005634:	4b88      	ldr	r3, [pc, #544]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d005      	beq.n	800564c <HAL_RCC_OscConfig+0x64>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	699b      	ldr	r3, [r3, #24]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005648:	2301      	movs	r3, #1
 800564a:	e3df      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1a      	ldr	r2, [r3, #32]
 8005650:	4b81      	ldr	r3, [pc, #516]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <HAL_RCC_OscConfig+0x7e>
 800565c:	4b7e      	ldr	r3, [pc, #504]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005664:	e005      	b.n	8005672 <HAL_RCC_OscConfig+0x8a>
 8005666:	4b7c      	ldr	r3, [pc, #496]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005668:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005672:	4293      	cmp	r3, r2
 8005674:	d223      	bcs.n	80056be <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fd92 	bl	80061a4 <RCC_SetFlashLatencyFromMSIRange>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e3c0      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800568a:	4b73      	ldr	r3, [pc, #460]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a72      	ldr	r2, [pc, #456]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005690:	f043 0308 	orr.w	r3, r3, #8
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	4b70      	ldr	r3, [pc, #448]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
 80056a2:	496d      	ldr	r1, [pc, #436]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056a8:	4b6b      	ldr	r3, [pc, #428]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	021b      	lsls	r3, r3, #8
 80056b6:	4968      	ldr	r1, [pc, #416]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	604b      	str	r3, [r1, #4]
 80056bc:	e025      	b.n	800570a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80056be:	4b66      	ldr	r3, [pc, #408]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056c4:	f043 0308 	orr.w	r3, r3, #8
 80056c8:	6013      	str	r3, [r2, #0]
 80056ca:	4b63      	ldr	r3, [pc, #396]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4960      	ldr	r1, [pc, #384]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056dc:	4b5e      	ldr	r3, [pc, #376]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	69db      	ldr	r3, [r3, #28]
 80056e8:	021b      	lsls	r3, r3, #8
 80056ea:	495b      	ldr	r1, [pc, #364]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d109      	bne.n	800570a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fd52 	bl	80061a4 <RCC_SetFlashLatencyFromMSIRange>
 8005700:	4603      	mov	r3, r0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d001      	beq.n	800570a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e380      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800570a:	f000 fc87 	bl	800601c <HAL_RCC_GetSysClockFreq>
 800570e:	4602      	mov	r2, r0
 8005710:	4b51      	ldr	r3, [pc, #324]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	4950      	ldr	r1, [pc, #320]	; (800585c <HAL_RCC_OscConfig+0x274>)
 800571c:	5ccb      	ldrb	r3, [r1, r3]
 800571e:	f003 031f 	and.w	r3, r3, #31
 8005722:	fa22 f303 	lsr.w	r3, r2, r3
 8005726:	4a4e      	ldr	r2, [pc, #312]	; (8005860 <HAL_RCC_OscConfig+0x278>)
 8005728:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800572a:	4b4e      	ldr	r3, [pc, #312]	; (8005864 <HAL_RCC_OscConfig+0x27c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7fc fdda 	bl	80022e8 <HAL_InitTick>
 8005734:	4603      	mov	r3, r0
 8005736:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d052      	beq.n	80057e4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800573e:	7bfb      	ldrb	r3, [r7, #15]
 8005740:	e364      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d032      	beq.n	80057b0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800574a:	4b43      	ldr	r3, [pc, #268]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a42      	ldr	r2, [pc, #264]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005750:	f043 0301 	orr.w	r3, r3, #1
 8005754:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005756:	f7fc fe17 	bl	8002388 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800575e:	f7fc fe13 	bl	8002388 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e34d      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005770:	4b39      	ldr	r3, [pc, #228]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0f0      	beq.n	800575e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800577c:	4b36      	ldr	r3, [pc, #216]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a35      	ldr	r2, [pc, #212]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005782:	f043 0308 	orr.w	r3, r3, #8
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	4b33      	ldr	r3, [pc, #204]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	4930      	ldr	r1, [pc, #192]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005796:	4313      	orrs	r3, r2
 8005798:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	021b      	lsls	r3, r3, #8
 80057a8:	492b      	ldr	r1, [pc, #172]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	604b      	str	r3, [r1, #4]
 80057ae:	e01a      	b.n	80057e6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80057b0:	4b29      	ldr	r3, [pc, #164]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a28      	ldr	r2, [pc, #160]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80057b6:	f023 0301 	bic.w	r3, r3, #1
 80057ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80057bc:	f7fc fde4 	bl	8002388 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80057c4:	f7fc fde0 	bl	8002388 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e31a      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80057d6:	4b20      	ldr	r3, [pc, #128]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x1dc>
 80057e2:	e000      	b.n	80057e6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80057e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d073      	beq.n	80058da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d005      	beq.n	8005804 <HAL_RCC_OscConfig+0x21c>
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	2b0c      	cmp	r3, #12
 80057fc:	d10e      	bne.n	800581c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d10b      	bne.n	800581c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005804:	4b14      	ldr	r3, [pc, #80]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d063      	beq.n	80058d8 <HAL_RCC_OscConfig+0x2f0>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d15f      	bne.n	80058d8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e2f7      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005824:	d106      	bne.n	8005834 <HAL_RCC_OscConfig+0x24c>
 8005826:	4b0c      	ldr	r3, [pc, #48]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a0b      	ldr	r2, [pc, #44]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800582c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	e025      	b.n	8005880 <HAL_RCC_OscConfig+0x298>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800583c:	d114      	bne.n	8005868 <HAL_RCC_OscConfig+0x280>
 800583e:	4b06      	ldr	r3, [pc, #24]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a05      	ldr	r2, [pc, #20]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005848:	6013      	str	r3, [r2, #0]
 800584a:	4b03      	ldr	r3, [pc, #12]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a02      	ldr	r2, [pc, #8]	; (8005858 <HAL_RCC_OscConfig+0x270>)
 8005850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	e013      	b.n	8005880 <HAL_RCC_OscConfig+0x298>
 8005858:	40021000 	.word	0x40021000
 800585c:	0800e840 	.word	0x0800e840
 8005860:	20000000 	.word	0x20000000
 8005864:	20000004 	.word	0x20000004
 8005868:	4ba0      	ldr	r3, [pc, #640]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a9f      	ldr	r2, [pc, #636]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 800586e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	4b9d      	ldr	r3, [pc, #628]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a9c      	ldr	r2, [pc, #624]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 800587a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800587e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d013      	beq.n	80058b0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fc fd7e 	bl	8002388 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005890:	f7fc fd7a 	bl	8002388 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	; 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e2b4      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058a2:	4b92      	ldr	r3, [pc, #584]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0x2a8>
 80058ae:	e014      	b.n	80058da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058b0:	f7fc fd6a 	bl	8002388 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b8:	f7fc fd66 	bl	8002388 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b64      	cmp	r3, #100	; 0x64
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e2a0      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80058ca:	4b88      	ldr	r3, [pc, #544]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f0      	bne.n	80058b8 <HAL_RCC_OscConfig+0x2d0>
 80058d6:	e000      	b.n	80058da <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d060      	beq.n	80059a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80058e6:	69bb      	ldr	r3, [r7, #24]
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_OscConfig+0x310>
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	2b0c      	cmp	r3, #12
 80058f0:	d119      	bne.n	8005926 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d116      	bne.n	8005926 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058f8:	4b7c      	ldr	r3, [pc, #496]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_OscConfig+0x328>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d101      	bne.n	8005910 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	e27d      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005910:	4b76      	ldr	r3, [pc, #472]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	061b      	lsls	r3, r3, #24
 800591e:	4973      	ldr	r1, [pc, #460]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005920:	4313      	orrs	r3, r2
 8005922:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005924:	e040      	b.n	80059a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d023      	beq.n	8005976 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800592e:	4b6f      	ldr	r3, [pc, #444]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a6e      	ldr	r2, [pc, #440]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005938:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800593a:	f7fc fd25 	bl	8002388 <HAL_GetTick>
 800593e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005940:	e008      	b.n	8005954 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005942:	f7fc fd21 	bl	8002388 <HAL_GetTick>
 8005946:	4602      	mov	r2, r0
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	2b02      	cmp	r3, #2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e25b      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005954:	4b65      	ldr	r3, [pc, #404]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800595c:	2b00      	cmp	r3, #0
 800595e:	d0f0      	beq.n	8005942 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005960:	4b62      	ldr	r3, [pc, #392]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	061b      	lsls	r3, r3, #24
 800596e:	495f      	ldr	r1, [pc, #380]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005970:	4313      	orrs	r3, r2
 8005972:	604b      	str	r3, [r1, #4]
 8005974:	e018      	b.n	80059a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005976:	4b5d      	ldr	r3, [pc, #372]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5c      	ldr	r2, [pc, #368]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 800597c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005982:	f7fc fd01 	bl	8002388 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800598a:	f7fc fcfd 	bl	8002388 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e237      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800599c:	4b53      	ldr	r3, [pc, #332]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f0      	bne.n	800598a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d03c      	beq.n	8005a2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d01c      	beq.n	80059f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059bc:	4b4b      	ldr	r3, [pc, #300]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80059be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059c2:	4a4a      	ldr	r2, [pc, #296]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059cc:	f7fc fcdc 	bl	8002388 <HAL_GetTick>
 80059d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059d2:	e008      	b.n	80059e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d4:	f7fc fcd8 	bl	8002388 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d901      	bls.n	80059e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80059e2:	2303      	movs	r3, #3
 80059e4:	e212      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80059e6:	4b41      	ldr	r3, [pc, #260]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80059e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d0ef      	beq.n	80059d4 <HAL_RCC_OscConfig+0x3ec>
 80059f4:	e01b      	b.n	8005a2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f6:	4b3d      	ldr	r3, [pc, #244]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80059f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059fc:	4a3b      	ldr	r2, [pc, #236]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fc fcbf 	bl	8002388 <HAL_GetTick>
 8005a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0e:	f7fc fcbb 	bl	8002388 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e1f5      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005a20:	4b32      	ldr	r3, [pc, #200]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005a22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d1ef      	bne.n	8005a0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	f000 80a6 	beq.w	8005b88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005a40:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d10d      	bne.n	8005a68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a4c:	4b27      	ldr	r3, [pc, #156]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	4a26      	ldr	r2, [pc, #152]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a56:	6593      	str	r3, [r2, #88]	; 0x58
 8005a58:	4b24      	ldr	r3, [pc, #144]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a64:	2301      	movs	r3, #1
 8005a66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a68:	4b21      	ldr	r3, [pc, #132]	; (8005af0 <HAL_RCC_OscConfig+0x508>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d118      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a74:	4b1e      	ldr	r3, [pc, #120]	; (8005af0 <HAL_RCC_OscConfig+0x508>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1d      	ldr	r2, [pc, #116]	; (8005af0 <HAL_RCC_OscConfig+0x508>)
 8005a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a80:	f7fc fc82 	bl	8002388 <HAL_GetTick>
 8005a84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a86:	e008      	b.n	8005a9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a88:	f7fc fc7e 	bl	8002388 <HAL_GetTick>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d901      	bls.n	8005a9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005a96:	2303      	movs	r3, #3
 8005a98:	e1b8      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a9a:	4b15      	ldr	r3, [pc, #84]	; (8005af0 <HAL_RCC_OscConfig+0x508>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d0f0      	beq.n	8005a88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d108      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x4d8>
 8005aae:	4b0f      	ldr	r3, [pc, #60]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ab4:	4a0d      	ldr	r2, [pc, #52]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005abe:	e029      	b.n	8005b14 <HAL_RCC_OscConfig+0x52c>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	2b05      	cmp	r3, #5
 8005ac6:	d115      	bne.n	8005af4 <HAL_RCC_OscConfig+0x50c>
 8005ac8:	4b08      	ldr	r3, [pc, #32]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ace:	4a07      	ldr	r2, [pc, #28]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005ad0:	f043 0304 	orr.w	r3, r3, #4
 8005ad4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ad8:	4b04      	ldr	r3, [pc, #16]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	4a03      	ldr	r2, [pc, #12]	; (8005aec <HAL_RCC_OscConfig+0x504>)
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ae8:	e014      	b.n	8005b14 <HAL_RCC_OscConfig+0x52c>
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40007000 	.word	0x40007000
 8005af4:	4b9d      	ldr	r3, [pc, #628]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	4a9c      	ldr	r2, [pc, #624]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005afc:	f023 0301 	bic.w	r3, r3, #1
 8005b00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005b04:	4b99      	ldr	r3, [pc, #612]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0a:	4a98      	ldr	r2, [pc, #608]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b0c:	f023 0304 	bic.w	r3, r3, #4
 8005b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d016      	beq.n	8005b4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b1c:	f7fc fc34 	bl	8002388 <HAL_GetTick>
 8005b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b22:	e00a      	b.n	8005b3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b24:	f7fc fc30 	bl	8002388 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d901      	bls.n	8005b3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e168      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b3a:	4b8c      	ldr	r3, [pc, #560]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b40:	f003 0302 	and.w	r3, r3, #2
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d0ed      	beq.n	8005b24 <HAL_RCC_OscConfig+0x53c>
 8005b48:	e015      	b.n	8005b76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b4a:	f7fc fc1d 	bl	8002388 <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b50:	e00a      	b.n	8005b68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b52:	f7fc fc19 	bl	8002388 <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e151      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b68:	4b80      	ldr	r3, [pc, #512]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d1ed      	bne.n	8005b52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b76:	7ffb      	ldrb	r3, [r7, #31]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d105      	bne.n	8005b88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b7c:	4b7b      	ldr	r3, [pc, #492]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b80:	4a7a      	ldr	r2, [pc, #488]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d03c      	beq.n	8005c0e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d01c      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b9c:	4b73      	ldr	r3, [pc, #460]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ba2:	4a72      	ldr	r2, [pc, #456]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005ba4:	f043 0301 	orr.w	r3, r3, #1
 8005ba8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bac:	f7fc fbec 	bl	8002388 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bb4:	f7fc fbe8 	bl	8002388 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b02      	cmp	r3, #2
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e122      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005bc6:	4b69      	ldr	r3, [pc, #420]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0ef      	beq.n	8005bb4 <HAL_RCC_OscConfig+0x5cc>
 8005bd4:	e01b      	b.n	8005c0e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005bd6:	4b65      	ldr	r3, [pc, #404]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005bd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005bdc:	4a63      	ldr	r2, [pc, #396]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be6:	f7fc fbcf 	bl	8002388 <HAL_GetTick>
 8005bea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bee:	f7fc fbcb 	bl	8002388 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e105      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c00:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005c06:	f003 0302 	and.w	r3, r3, #2
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1ef      	bne.n	8005bee <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	f000 80f9 	beq.w	8005e0a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	f040 80cf 	bne.w	8005dc0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005c22:	4b52      	ldr	r3, [pc, #328]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f003 0203 	and.w	r2, r3, #3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d12c      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	3b01      	subs	r3, #1
 8005c42:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d123      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c52:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d11b      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d113      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	3b01      	subs	r3, #1
 8005c76:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d109      	bne.n	8005c90 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	085b      	lsrs	r3, r3, #1
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d071      	beq.n	8005d74 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c90:	69bb      	ldr	r3, [r7, #24]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d068      	beq.n	8005d68 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005c96:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d105      	bne.n	8005cae <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005ca2:	4b32      	ldr	r3, [pc, #200]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e0ac      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005cb2:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a2d      	ldr	r2, [pc, #180]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005cb8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cbc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005cbe:	f7fc fb63 	bl	8002388 <HAL_GetTick>
 8005cc2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cc4:	e008      	b.n	8005cd8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cc6:	f7fc fb5f 	bl	8002388 <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d901      	bls.n	8005cd8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e099      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1f0      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ce4:	4b21      	ldr	r3, [pc, #132]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	4b21      	ldr	r3, [pc, #132]	; (8005d70 <HAL_RCC_OscConfig+0x788>)
 8005cea:	4013      	ands	r3, r2
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005cf4:	3a01      	subs	r2, #1
 8005cf6:	0112      	lsls	r2, r2, #4
 8005cf8:	4311      	orrs	r1, r2
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005cfe:	0212      	lsls	r2, r2, #8
 8005d00:	4311      	orrs	r1, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005d06:	0852      	lsrs	r2, r2, #1
 8005d08:	3a01      	subs	r2, #1
 8005d0a:	0552      	lsls	r2, r2, #21
 8005d0c:	4311      	orrs	r1, r2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005d12:	0852      	lsrs	r2, r2, #1
 8005d14:	3a01      	subs	r2, #1
 8005d16:	0652      	lsls	r2, r2, #25
 8005d18:	4311      	orrs	r1, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005d1e:	06d2      	lsls	r2, r2, #27
 8005d20:	430a      	orrs	r2, r1
 8005d22:	4912      	ldr	r1, [pc, #72]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005d28:	4b10      	ldr	r3, [pc, #64]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a0f      	ldr	r2, [pc, #60]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d32:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	4a0c      	ldr	r2, [pc, #48]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005d40:	f7fc fb22 	bl	8002388 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d48:	f7fc fb1e 	bl	8002388 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e058      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d5a:	4b04      	ldr	r3, [pc, #16]	; (8005d6c <HAL_RCC_OscConfig+0x784>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005d66:	e050      	b.n	8005e0a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e04f      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
 8005d6c:	40021000 	.word	0x40021000
 8005d70:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d74:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d144      	bne.n	8005e0a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005d80:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a23      	ldr	r2, [pc, #140]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005d86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d8c:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005d98:	f7fc faf6 	bl	8002388 <HAL_GetTick>
 8005d9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d9e:	e008      	b.n	8005db2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005da0:	f7fc faf2 	bl	8002388 <HAL_GetTick>
 8005da4:	4602      	mov	r2, r0
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d901      	bls.n	8005db2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e02c      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db2:	4b18      	ldr	r3, [pc, #96]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d0f0      	beq.n	8005da0 <HAL_RCC_OscConfig+0x7b8>
 8005dbe:	e024      	b.n	8005e0a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b0c      	cmp	r3, #12
 8005dc4:	d01f      	beq.n	8005e06 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dc6:	4b13      	ldr	r3, [pc, #76]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a12      	ldr	r2, [pc, #72]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005dcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd2:	f7fc fad9 	bl	8002388 <HAL_GetTick>
 8005dd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dd8:	e008      	b.n	8005dec <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dda:	f7fc fad5 	bl	8002388 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d901      	bls.n	8005dec <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e00f      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005dec:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1f0      	bne.n	8005dda <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005df8:	4b06      	ldr	r3, [pc, #24]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	4905      	ldr	r1, [pc, #20]	; (8005e14 <HAL_RCC_OscConfig+0x82c>)
 8005dfe:	4b06      	ldr	r3, [pc, #24]	; (8005e18 <HAL_RCC_OscConfig+0x830>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	60cb      	str	r3, [r1, #12]
 8005e04:	e001      	b.n	8005e0a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e000      	b.n	8005e0c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3720      	adds	r7, #32
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	40021000 	.word	0x40021000
 8005e18:	feeefffc 	.word	0xfeeefffc

08005e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e0e7      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e30:	4b75      	ldr	r3, [pc, #468]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	683a      	ldr	r2, [r7, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d910      	bls.n	8005e60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e3e:	4b72      	ldr	r3, [pc, #456]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f023 0207 	bic.w	r2, r3, #7
 8005e46:	4970      	ldr	r1, [pc, #448]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4e:	4b6e      	ldr	r3, [pc, #440]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	683a      	ldr	r2, [r7, #0]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d001      	beq.n	8005e60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e0cf      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0302 	and.w	r3, r3, #2
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d010      	beq.n	8005e8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	689a      	ldr	r2, [r3, #8]
 8005e70:	4b66      	ldr	r3, [pc, #408]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d908      	bls.n	8005e8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e7c:	4b63      	ldr	r3, [pc, #396]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	4960      	ldr	r1, [pc, #384]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d04c      	beq.n	8005f34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b03      	cmp	r3, #3
 8005ea0:	d107      	bne.n	8005eb2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ea2:	4b5a      	ldr	r3, [pc, #360]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d121      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e0a6      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d107      	bne.n	8005eca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eba:	4b54      	ldr	r3, [pc, #336]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d115      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e09a      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d107      	bne.n	8005ee2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005ed2:	4b4e      	ldr	r3, [pc, #312]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d109      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e08e      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e086      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ef2:	4b46      	ldr	r3, [pc, #280]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	f023 0203 	bic.w	r2, r3, #3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	4943      	ldr	r1, [pc, #268]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f04:	f7fc fa40 	bl	8002388 <HAL_GetTick>
 8005f08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f0a:	e00a      	b.n	8005f22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f0c:	f7fc fa3c 	bl	8002388 <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e06e      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f22:	4b3a      	ldr	r3, [pc, #232]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	f003 020c 	and.w	r2, r3, #12
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d1eb      	bne.n	8005f0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0302 	and.w	r3, r3, #2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d010      	beq.n	8005f62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689a      	ldr	r2, [r3, #8]
 8005f44:	4b31      	ldr	r3, [pc, #196]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d208      	bcs.n	8005f62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f50:	4b2e      	ldr	r3, [pc, #184]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	492b      	ldr	r1, [pc, #172]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f62:	4b29      	ldr	r3, [pc, #164]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0307 	and.w	r3, r3, #7
 8005f6a:	683a      	ldr	r2, [r7, #0]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d210      	bcs.n	8005f92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f70:	4b25      	ldr	r3, [pc, #148]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f023 0207 	bic.w	r2, r3, #7
 8005f78:	4923      	ldr	r1, [pc, #140]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f80:	4b21      	ldr	r3, [pc, #132]	; (8006008 <HAL_RCC_ClockConfig+0x1ec>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0307 	and.w	r3, r3, #7
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d001      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e036      	b.n	8006000 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0304 	and.w	r3, r3, #4
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d008      	beq.n	8005fb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f9e:	4b1b      	ldr	r3, [pc, #108]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4918      	ldr	r1, [pc, #96]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005fac:	4313      	orrs	r3, r2
 8005fae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0308 	and.w	r3, r3, #8
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d009      	beq.n	8005fd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005fbc:	4b13      	ldr	r3, [pc, #76]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4910      	ldr	r1, [pc, #64]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005fd0:	f000 f824 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b0d      	ldr	r3, [pc, #52]	; (800600c <HAL_RCC_ClockConfig+0x1f0>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	091b      	lsrs	r3, r3, #4
 8005fdc:	f003 030f 	and.w	r3, r3, #15
 8005fe0:	490b      	ldr	r1, [pc, #44]	; (8006010 <HAL_RCC_ClockConfig+0x1f4>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	f003 031f 	and.w	r3, r3, #31
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fec:	4a09      	ldr	r2, [pc, #36]	; (8006014 <HAL_RCC_ClockConfig+0x1f8>)
 8005fee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ff0:	4b09      	ldr	r3, [pc, #36]	; (8006018 <HAL_RCC_ClockConfig+0x1fc>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f7fc f977 	bl	80022e8 <HAL_InitTick>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}
 8006008:	40022000 	.word	0x40022000
 800600c:	40021000 	.word	0x40021000
 8006010:	0800e840 	.word	0x0800e840
 8006014:	20000000 	.word	0x20000000
 8006018:	20000004 	.word	0x20000004

0800601c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800601c:	b480      	push	{r7}
 800601e:	b089      	sub	sp, #36	; 0x24
 8006020:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800602a:	4b3e      	ldr	r3, [pc, #248]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 030c 	and.w	r3, r3, #12
 8006032:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006034:	4b3b      	ldr	r3, [pc, #236]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 8006036:	68db      	ldr	r3, [r3, #12]
 8006038:	f003 0303 	and.w	r3, r3, #3
 800603c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d005      	beq.n	8006050 <HAL_RCC_GetSysClockFreq+0x34>
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	2b0c      	cmp	r3, #12
 8006048:	d121      	bne.n	800608e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d11e      	bne.n	800608e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006050:	4b34      	ldr	r3, [pc, #208]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0308 	and.w	r3, r3, #8
 8006058:	2b00      	cmp	r3, #0
 800605a:	d107      	bne.n	800606c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800605c:	4b31      	ldr	r3, [pc, #196]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 800605e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006062:	0a1b      	lsrs	r3, r3, #8
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e005      	b.n	8006078 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800606c:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	f003 030f 	and.w	r3, r3, #15
 8006076:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006078:	4a2b      	ldr	r2, [pc, #172]	; (8006128 <HAL_RCC_GetSysClockFreq+0x10c>)
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006080:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10d      	bne.n	80060a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800608c:	e00a      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	2b04      	cmp	r3, #4
 8006092:	d102      	bne.n	800609a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <HAL_RCC_GetSysClockFreq+0x110>)
 8006096:	61bb      	str	r3, [r7, #24]
 8006098:	e004      	b.n	80060a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d101      	bne.n	80060a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80060a0:	4b23      	ldr	r3, [pc, #140]	; (8006130 <HAL_RCC_GetSysClockFreq+0x114>)
 80060a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	2b0c      	cmp	r3, #12
 80060a8:	d134      	bne.n	8006114 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80060aa:	4b1e      	ldr	r3, [pc, #120]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d003      	beq.n	80060c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d003      	beq.n	80060c8 <HAL_RCC_GetSysClockFreq+0xac>
 80060c0:	e005      	b.n	80060ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80060c2:	4b1a      	ldr	r3, [pc, #104]	; (800612c <HAL_RCC_GetSysClockFreq+0x110>)
 80060c4:	617b      	str	r3, [r7, #20]
      break;
 80060c6:	e005      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80060c8:	4b19      	ldr	r3, [pc, #100]	; (8006130 <HAL_RCC_GetSysClockFreq+0x114>)
 80060ca:	617b      	str	r3, [r7, #20]
      break;
 80060cc:	e002      	b.n	80060d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	617b      	str	r3, [r7, #20]
      break;
 80060d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80060d4:	4b13      	ldr	r3, [pc, #76]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	091b      	lsrs	r3, r3, #4
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	3301      	adds	r3, #1
 80060e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80060e2:	4b10      	ldr	r3, [pc, #64]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	fb03 f202 	mul.w	r2, r3, r2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80060fa:	4b0a      	ldr	r3, [pc, #40]	; (8006124 <HAL_RCC_GetSysClockFreq+0x108>)
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	0e5b      	lsrs	r3, r3, #25
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	3301      	adds	r3, #1
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006112:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006114:	69bb      	ldr	r3, [r7, #24]
}
 8006116:	4618      	mov	r0, r3
 8006118:	3724      	adds	r7, #36	; 0x24
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr
 8006122:	bf00      	nop
 8006124:	40021000 	.word	0x40021000
 8006128:	0800e858 	.word	0x0800e858
 800612c:	00f42400 	.word	0x00f42400
 8006130:	007a1200 	.word	0x007a1200

08006134 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006138:	4b03      	ldr	r3, [pc, #12]	; (8006148 <HAL_RCC_GetHCLKFreq+0x14>)
 800613a:	681b      	ldr	r3, [r3, #0]
}
 800613c:	4618      	mov	r0, r3
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop
 8006148:	20000000 	.word	0x20000000

0800614c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006150:	f7ff fff0 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006154:	4602      	mov	r2, r0
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	0a1b      	lsrs	r3, r3, #8
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	4904      	ldr	r1, [pc, #16]	; (8006174 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006162:	5ccb      	ldrb	r3, [r1, r3]
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800616c:	4618      	mov	r0, r3
 800616e:	bd80      	pop	{r7, pc}
 8006170:	40021000 	.word	0x40021000
 8006174:	0800e850 	.word	0x0800e850

08006178 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800617c:	f7ff ffda 	bl	8006134 <HAL_RCC_GetHCLKFreq>
 8006180:	4602      	mov	r2, r0
 8006182:	4b06      	ldr	r3, [pc, #24]	; (800619c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	0adb      	lsrs	r3, r3, #11
 8006188:	f003 0307 	and.w	r3, r3, #7
 800618c:	4904      	ldr	r1, [pc, #16]	; (80061a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800618e:	5ccb      	ldrb	r3, [r1, r3]
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006198:	4618      	mov	r0, r3
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40021000 	.word	0x40021000
 80061a0:	0800e850 	.word	0x0800e850

080061a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80061ac:	2300      	movs	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061b0:	4b2a      	ldr	r3, [pc, #168]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d003      	beq.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80061bc:	f7ff f8ce 	bl	800535c <HAL_PWREx_GetVoltageRange>
 80061c0:	6178      	str	r0, [r7, #20]
 80061c2:	e014      	b.n	80061ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80061c4:	4b25      	ldr	r3, [pc, #148]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061c8:	4a24      	ldr	r2, [pc, #144]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	6593      	str	r3, [r2, #88]	; 0x58
 80061d0:	4b22      	ldr	r3, [pc, #136]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80061dc:	f7ff f8be 	bl	800535c <HAL_PWREx_GetVoltageRange>
 80061e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80061e2:	4b1e      	ldr	r3, [pc, #120]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e6:	4a1d      	ldr	r2, [pc, #116]	; (800625c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80061e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061f4:	d10b      	bne.n	800620e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2b80      	cmp	r3, #128	; 0x80
 80061fa:	d919      	bls.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2ba0      	cmp	r3, #160	; 0xa0
 8006200:	d902      	bls.n	8006208 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006202:	2302      	movs	r3, #2
 8006204:	613b      	str	r3, [r7, #16]
 8006206:	e013      	b.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006208:	2301      	movs	r3, #1
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	e010      	b.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2b80      	cmp	r3, #128	; 0x80
 8006212:	d902      	bls.n	800621a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006214:	2303      	movs	r3, #3
 8006216:	613b      	str	r3, [r7, #16]
 8006218:	e00a      	b.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b80      	cmp	r3, #128	; 0x80
 800621e:	d102      	bne.n	8006226 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006220:	2302      	movs	r3, #2
 8006222:	613b      	str	r3, [r7, #16]
 8006224:	e004      	b.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b70      	cmp	r3, #112	; 0x70
 800622a:	d101      	bne.n	8006230 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800622c:	2301      	movs	r3, #1
 800622e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006230:	4b0b      	ldr	r3, [pc, #44]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f023 0207 	bic.w	r2, r3, #7
 8006238:	4909      	ldr	r1, [pc, #36]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006240:	4b07      	ldr	r3, [pc, #28]	; (8006260 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	429a      	cmp	r2, r3
 800624c:	d001      	beq.n	8006252 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e000      	b.n	8006254 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006252:	2300      	movs	r3, #0
}
 8006254:	4618      	mov	r0, r3
 8006256:	3718      	adds	r7, #24
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40021000 	.word	0x40021000
 8006260:	40022000 	.word	0x40022000

08006264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b086      	sub	sp, #24
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800626c:	2300      	movs	r3, #0
 800626e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006270:	2300      	movs	r3, #0
 8006272:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627c:	2b00      	cmp	r3, #0
 800627e:	d041      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006284:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006288:	d02a      	beq.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800628a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800628e:	d824      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006290:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006294:	d008      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800629a:	d81e      	bhi.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00a      	beq.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80062a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062a4:	d010      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062a6:	e018      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062a8:	4b86      	ldr	r3, [pc, #536]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	4a85      	ldr	r2, [pc, #532]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062b4:	e015      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	3304      	adds	r3, #4
 80062ba:	2100      	movs	r1, #0
 80062bc:	4618      	mov	r0, r3
 80062be:	f001 f895 	bl	80073ec <RCCEx_PLLSAI1_Config>
 80062c2:	4603      	mov	r3, r0
 80062c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062c6:	e00c      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	3320      	adds	r3, #32
 80062cc:	2100      	movs	r1, #0
 80062ce:	4618      	mov	r0, r3
 80062d0:	f001 f97e 	bl	80075d0 <RCCEx_PLLSAI2_Config>
 80062d4:	4603      	mov	r3, r0
 80062d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80062d8:	e003      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	74fb      	strb	r3, [r7, #19]
      break;
 80062de:	e000      	b.n	80062e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80062e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062e2:	7cfb      	ldrb	r3, [r7, #19]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10b      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80062e8:	4b76      	ldr	r3, [pc, #472]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062f6:	4973      	ldr	r1, [pc, #460]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062fe:	e001      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006300:	7cfb      	ldrb	r3, [r7, #19]
 8006302:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800630c:	2b00      	cmp	r3, #0
 800630e:	d041      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006314:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006318:	d02a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800631a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800631e:	d824      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8006320:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006324:	d008      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800632a:	d81e      	bhi.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d00a      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8006330:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006334:	d010      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006336:	e018      	b.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006338:	4b62      	ldr	r3, [pc, #392]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	4a61      	ldr	r2, [pc, #388]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800633e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006342:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006344:	e015      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	3304      	adds	r3, #4
 800634a:	2100      	movs	r1, #0
 800634c:	4618      	mov	r0, r3
 800634e:	f001 f84d 	bl	80073ec <RCCEx_PLLSAI1_Config>
 8006352:	4603      	mov	r3, r0
 8006354:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006356:	e00c      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	3320      	adds	r3, #32
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f936 	bl	80075d0 <RCCEx_PLLSAI2_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8006368:	e003      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	74fb      	strb	r3, [r7, #19]
      break;
 800636e:	e000      	b.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8006370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006372:	7cfb      	ldrb	r3, [r7, #19]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10b      	bne.n	8006390 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006378:	4b52      	ldr	r3, [pc, #328]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800637a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800637e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006386:	494f      	ldr	r1, [pc, #316]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006388:	4313      	orrs	r3, r2
 800638a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800638e:	e001      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006390:	7cfb      	ldrb	r3, [r7, #19]
 8006392:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639c:	2b00      	cmp	r3, #0
 800639e:	f000 80a0 	beq.w	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80063a2:	2300      	movs	r3, #0
 80063a4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80063a6:	4b47      	ldr	r3, [pc, #284]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80063b2:	2301      	movs	r3, #1
 80063b4:	e000      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80063b6:	2300      	movs	r3, #0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d00d      	beq.n	80063d8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80063bc:	4b41      	ldr	r3, [pc, #260]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063c0:	4a40      	ldr	r2, [pc, #256]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063c6:	6593      	str	r3, [r2, #88]	; 0x58
 80063c8:	4b3e      	ldr	r3, [pc, #248]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80063ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063d0:	60bb      	str	r3, [r7, #8]
 80063d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80063d4:	2301      	movs	r3, #1
 80063d6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80063d8:	4b3b      	ldr	r3, [pc, #236]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a3a      	ldr	r2, [pc, #232]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80063de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e4:	f7fb ffd0 	bl	8002388 <HAL_GetTick>
 80063e8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80063ea:	e009      	b.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063ec:	f7fb ffcc 	bl	8002388 <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d902      	bls.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	74fb      	strb	r3, [r7, #19]
        break;
 80063fe:	e005      	b.n	800640c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006400:	4b31      	ldr	r3, [pc, #196]	; (80064c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0ef      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800640c:	7cfb      	ldrb	r3, [r7, #19]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d15c      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006412:	4b2c      	ldr	r3, [pc, #176]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006418:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01f      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d019      	beq.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006430:	4b24      	ldr	r3, [pc, #144]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800643c:	4b21      	ldr	r3, [pc, #132]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800643e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006442:	4a20      	ldr	r2, [pc, #128]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006444:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006448:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800644c:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	4a1c      	ldr	r2, [pc, #112]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800645c:	4a19      	ldr	r2, [pc, #100]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d016      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800646e:	f7fb ff8b 	bl	8002388 <HAL_GetTick>
 8006472:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006474:	e00b      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006476:	f7fb ff87 	bl	8002388 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	f241 3288 	movw	r2, #5000	; 0x1388
 8006484:	4293      	cmp	r3, r2
 8006486:	d902      	bls.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	74fb      	strb	r3, [r7, #19]
            break;
 800648c:	e006      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800648e:	4b0d      	ldr	r3, [pc, #52]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d0ec      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800649c:	7cfb      	ldrb	r3, [r7, #19]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10c      	bne.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064b2:	4904      	ldr	r1, [pc, #16]	; (80064c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80064ba:	e009      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80064bc:	7cfb      	ldrb	r3, [r7, #19]
 80064be:	74bb      	strb	r3, [r7, #18]
 80064c0:	e006      	b.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80064c2:	bf00      	nop
 80064c4:	40021000 	.word	0x40021000
 80064c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064cc:	7cfb      	ldrb	r3, [r7, #19]
 80064ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80064d0:	7c7b      	ldrb	r3, [r7, #17]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d105      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80064d6:	4ba6      	ldr	r3, [pc, #664]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064da:	4aa5      	ldr	r2, [pc, #660]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0301 	and.w	r3, r3, #1
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80064ee:	4ba0      	ldr	r3, [pc, #640]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f023 0203 	bic.w	r2, r3, #3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064fc:	499c      	ldr	r1, [pc, #624]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0302 	and.w	r3, r3, #2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00a      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006510:	4b97      	ldr	r3, [pc, #604]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006516:	f023 020c 	bic.w	r2, r3, #12
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800651e:	4994      	ldr	r1, [pc, #592]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006520:	4313      	orrs	r3, r2
 8006522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006532:	4b8f      	ldr	r3, [pc, #572]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	498b      	ldr	r1, [pc, #556]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f003 0308 	and.w	r3, r3, #8
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00a      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006554:	4b86      	ldr	r3, [pc, #536]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800655a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006562:	4983      	ldr	r1, [pc, #524]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006564:	4313      	orrs	r3, r2
 8006566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	d00a      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006576:	4b7e      	ldr	r3, [pc, #504]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800657c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006584:	497a      	ldr	r1, [pc, #488]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00a      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006598:	4b75      	ldr	r3, [pc, #468]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800659a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065a6:	4972      	ldr	r1, [pc, #456]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d00a      	beq.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80065ba:	4b6d      	ldr	r3, [pc, #436]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065c8:	4969      	ldr	r1, [pc, #420]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065ca:	4313      	orrs	r3, r2
 80065cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80065dc:	4b64      	ldr	r3, [pc, #400]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ea:	4961      	ldr	r1, [pc, #388]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80065ec:	4313      	orrs	r3, r2
 80065ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80065fe:	4b5c      	ldr	r3, [pc, #368]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006604:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800660c:	4958      	ldr	r1, [pc, #352]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800660e:	4313      	orrs	r3, r2
 8006610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006620:	4b53      	ldr	r3, [pc, #332]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006626:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800662e:	4950      	ldr	r1, [pc, #320]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006642:	4b4b      	ldr	r3, [pc, #300]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006648:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006650:	4947      	ldr	r1, [pc, #284]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006652:	4313      	orrs	r3, r2
 8006654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006664:	4b42      	ldr	r3, [pc, #264]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006666:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800666a:	f023 0203 	bic.w	r2, r3, #3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006672:	493f      	ldr	r1, [pc, #252]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006674:	4313      	orrs	r3, r2
 8006676:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006682:	2b00      	cmp	r3, #0
 8006684:	d028      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006686:	4b3a      	ldr	r3, [pc, #232]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006694:	4936      	ldr	r1, [pc, #216]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006696:	4313      	orrs	r3, r2
 8006698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066a4:	d106      	bne.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066a6:	4b32      	ldr	r3, [pc, #200]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066a8:	68db      	ldr	r3, [r3, #12]
 80066aa:	4a31      	ldr	r2, [pc, #196]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066b0:	60d3      	str	r3, [r2, #12]
 80066b2:	e011      	b.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066bc:	d10c      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	3304      	adds	r3, #4
 80066c2:	2101      	movs	r1, #1
 80066c4:	4618      	mov	r0, r3
 80066c6:	f000 fe91 	bl	80073ec <RCCEx_PLLSAI1_Config>
 80066ca:	4603      	mov	r3, r0
 80066cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80066ce:	7cfb      	ldrb	r3, [r7, #19]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80066d4:	7cfb      	ldrb	r3, [r7, #19]
 80066d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d028      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80066e4:	4b22      	ldr	r3, [pc, #136]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066f2:	491f      	ldr	r1, [pc, #124]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006702:	d106      	bne.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006704:	4b1a      	ldr	r3, [pc, #104]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	4a19      	ldr	r2, [pc, #100]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800670a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800670e:	60d3      	str	r3, [r2, #12]
 8006710:	e011      	b.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006716:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800671a:	d10c      	bne.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	2101      	movs	r1, #1
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fe62 	bl	80073ec <RCCEx_PLLSAI1_Config>
 8006728:	4603      	mov	r3, r0
 800672a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800672c:	7cfb      	ldrb	r3, [r7, #19]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d001      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8006732:	7cfb      	ldrb	r3, [r7, #19]
 8006734:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d02a      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006742:	4b0b      	ldr	r3, [pc, #44]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006748:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006750:	4907      	ldr	r1, [pc, #28]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800675c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006760:	d108      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006762:	4b03      	ldr	r3, [pc, #12]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	4a02      	ldr	r2, [pc, #8]	; (8006770 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8006768:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800676c:	60d3      	str	r3, [r2, #12]
 800676e:	e013      	b.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8006770:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800677c:	d10c      	bne.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	2101      	movs	r1, #1
 8006784:	4618      	mov	r0, r3
 8006786:	f000 fe31 	bl	80073ec <RCCEx_PLLSAI1_Config>
 800678a:	4603      	mov	r3, r0
 800678c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800678e:	7cfb      	ldrb	r3, [r7, #19]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d001      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8006794:	7cfb      	ldrb	r3, [r7, #19]
 8006796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d02f      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067a4:	4b2c      	ldr	r3, [pc, #176]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80067a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067b2:	4929      	ldr	r1, [pc, #164]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067c2:	d10d      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	3304      	adds	r3, #4
 80067c8:	2102      	movs	r1, #2
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fe0e 	bl	80073ec <RCCEx_PLLSAI1_Config>
 80067d0:	4603      	mov	r3, r0
 80067d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067d4:	7cfb      	ldrb	r3, [r7, #19]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d014      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80067da:	7cfb      	ldrb	r3, [r7, #19]
 80067dc:	74bb      	strb	r3, [r7, #18]
 80067de:	e011      	b.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067e8:	d10c      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3320      	adds	r3, #32
 80067ee:	2102      	movs	r1, #2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 feed 	bl	80075d0 <RCCEx_PLLSAI2_Config>
 80067f6:	4603      	mov	r3, r0
 80067f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80067fa:	7cfb      	ldrb	r3, [r7, #19]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8006800:	7cfb      	ldrb	r3, [r7, #19]
 8006802:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006810:	4b11      	ldr	r3, [pc, #68]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006816:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006820:	490d      	ldr	r1, [pc, #52]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00b      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006834:	4b08      	ldr	r3, [pc, #32]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006844:	4904      	ldr	r1, [pc, #16]	; (8006858 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8006846:	4313      	orrs	r3, r2
 8006848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800684c:	7cbb      	ldrb	r3, [r7, #18]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	40021000 	.word	0x40021000

0800685c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8006864:	2300      	movs	r3, #0
 8006866:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800686e:	d13e      	bne.n	80068ee <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006870:	4bb4      	ldr	r3, [pc, #720]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800687a:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006882:	d028      	beq.n	80068d6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800688a:	f200 858c 	bhi.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006894:	d005      	beq.n	80068a2 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800689c:	d00e      	beq.n	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 800689e:	f000 bd82 	b.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80068a2:	4ba8      	ldr	r3, [pc, #672]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	f040 857c 	bne.w	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
        frequency = LSE_VALUE;
 80068b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068b6:	61fb      	str	r3, [r7, #28]
      break;
 80068b8:	f000 bd77 	b.w	80073aa <HAL_RCCEx_GetPeriphCLKFreq+0xb4e>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80068bc:	4ba1      	ldr	r3, [pc, #644]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80068be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	f040 8571 	bne.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
          frequency = LSI_VALUE;
 80068cc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80068d0:	61fb      	str	r3, [r7, #28]
      break;
 80068d2:	f000 bd6c 	b.w	80073ae <HAL_RCCEx_GetPeriphCLKFreq+0xb52>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80068d6:	4b9b      	ldr	r3, [pc, #620]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068e2:	f040 8566 	bne.w	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
        frequency = HSE_VALUE / 32U;
 80068e6:	4b98      	ldr	r3, [pc, #608]	; (8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 80068e8:	61fb      	str	r3, [r7, #28]
      break;
 80068ea:	f000 bd62 	b.w	80073b2 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068ee:	4b95      	ldr	r3, [pc, #596]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	f003 0303 	and.w	r3, r3, #3
 80068f6:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	2b03      	cmp	r3, #3
 80068fc:	d036      	beq.n	800696c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	2b03      	cmp	r3, #3
 8006902:	d840      	bhi.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	2b01      	cmp	r3, #1
 8006908:	d003      	beq.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d020      	beq.n	8006952 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006910:	e039      	b.n	8006986 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006912:	4b8c      	ldr	r3, [pc, #560]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b02      	cmp	r3, #2
 800691c:	d116      	bne.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800691e:	4b89      	ldr	r3, [pc, #548]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0308 	and.w	r3, r3, #8
 8006926:	2b00      	cmp	r3, #0
 8006928:	d005      	beq.n	8006936 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 800692a:	4b86      	ldr	r3, [pc, #536]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	091b      	lsrs	r3, r3, #4
 8006930:	f003 030f 	and.w	r3, r3, #15
 8006934:	e005      	b.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006936:	4b83      	ldr	r3, [pc, #524]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800693c:	0a1b      	lsrs	r3, r3, #8
 800693e:	f003 030f 	and.w	r3, r3, #15
 8006942:	4a82      	ldr	r2, [pc, #520]	; (8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8006944:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006948:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800694a:	e01f      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 800694c:	2300      	movs	r3, #0
 800694e:	61bb      	str	r3, [r7, #24]
      break;
 8006950:	e01c      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006952:	4b7c      	ldr	r3, [pc, #496]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800695a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800695e:	d102      	bne.n	8006966 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8006960:	4b7b      	ldr	r3, [pc, #492]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8006962:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8006964:	e012      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
      break;
 800696a:	e00f      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800696c:	4b75      	ldr	r3, [pc, #468]	; (8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006978:	d102      	bne.n	8006980 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 800697a:	4b76      	ldr	r3, [pc, #472]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800697c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 800697e:	e005      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	61bb      	str	r3, [r7, #24]
      break;
 8006984:	e002      	b.n	800698c <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
      break;
 800698a:	bf00      	nop
    }

    switch(PeriphClk)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006992:	f000 842a 	beq.w	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800699c:	f200 850b 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069a6:	f000 80df 	beq.w	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069b0:	f200 8501 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069ba:	f000 80d5 	beq.w	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80069c4:	f200 84f7 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ce:	f000 8377 	beq.w	80070c0 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d8:	f200 84ed 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069e2:	f000 84c3 	beq.w	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ec:	f200 84e3 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069f6:	f000 82e6 	beq.w	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a00:	f200 84d9 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0a:	f000 80ad 	beq.w	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a14:	f200 84cf 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	f000 809b 	beq.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a28:	f200 84c5 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a32:	d07f      	beq.n	8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a3a:	f200 84bc 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a44:	f000 8448 	beq.w	80072d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a4e:	f200 84b2 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a58:	f000 83f0 	beq.w	800723c <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a62:	f200 84a8 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a6c:	f000 8391 	beq.w	8007192 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a76:	f200 849e 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b80      	cmp	r3, #128	; 0x80
 8006a7e:	f000 835c 	beq.w	800713a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b80      	cmp	r3, #128	; 0x80
 8006a86:	f200 8496 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2b20      	cmp	r3, #32
 8006a8e:	d84b      	bhi.n	8006b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	f000 848f 	beq.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b1f      	cmp	r3, #31
 8006a9e:	f200 848a 	bhi.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006cbf 	.word	0x08006cbf
 8006aac:	08006d2f 	.word	0x08006d2f
 8006ab0:	080073b7 	.word	0x080073b7
 8006ab4:	08006dc3 	.word	0x08006dc3
 8006ab8:	080073b7 	.word	0x080073b7
 8006abc:	080073b7 	.word	0x080073b7
 8006ac0:	080073b7 	.word	0x080073b7
 8006ac4:	08006e4b 	.word	0x08006e4b
 8006ac8:	080073b7 	.word	0x080073b7
 8006acc:	080073b7 	.word	0x080073b7
 8006ad0:	080073b7 	.word	0x080073b7
 8006ad4:	080073b7 	.word	0x080073b7
 8006ad8:	080073b7 	.word	0x080073b7
 8006adc:	080073b7 	.word	0x080073b7
 8006ae0:	080073b7 	.word	0x080073b7
 8006ae4:	08006ec3 	.word	0x08006ec3
 8006ae8:	080073b7 	.word	0x080073b7
 8006aec:	080073b7 	.word	0x080073b7
 8006af0:	080073b7 	.word	0x080073b7
 8006af4:	080073b7 	.word	0x080073b7
 8006af8:	080073b7 	.word	0x080073b7
 8006afc:	080073b7 	.word	0x080073b7
 8006b00:	080073b7 	.word	0x080073b7
 8006b04:	080073b7 	.word	0x080073b7
 8006b08:	080073b7 	.word	0x080073b7
 8006b0c:	080073b7 	.word	0x080073b7
 8006b10:	080073b7 	.word	0x080073b7
 8006b14:	080073b7 	.word	0x080073b7
 8006b18:	080073b7 	.word	0x080073b7
 8006b1c:	080073b7 	.word	0x080073b7
 8006b20:	080073b7 	.word	0x080073b7
 8006b24:	08006f45 	.word	0x08006f45
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b40      	cmp	r3, #64	; 0x40
 8006b2c:	f000 82d9 	beq.w	80070e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8006b30:	f000 bc41 	b.w	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5a>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006b34:	69b9      	ldr	r1, [r7, #24]
 8006b36:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006b3a:	f000 fe25 	bl	8007788 <RCCEx_GetSAIxPeriphCLKFreq>
 8006b3e:	61f8      	str	r0, [r7, #28]
      break;
 8006b40:	f000 bc3a 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 8006b44:	40021000 	.word	0x40021000
 8006b48:	0003d090 	.word	0x0003d090
 8006b4c:	0800e858 	.word	0x0800e858
 8006b50:	00f42400 	.word	0x00f42400
 8006b54:	007a1200 	.word	0x007a1200
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006b58:	69b9      	ldr	r1, [r7, #24]
 8006b5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006b5e:	f000 fe13 	bl	8007788 <RCCEx_GetSAIxPeriphCLKFreq>
 8006b62:	61f8      	str	r0, [r7, #28]
      break;
 8006b64:	f000 bc28 	b.w	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8006b68:	4ba6      	ldr	r3, [pc, #664]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006b72:	613b      	str	r3, [r7, #16]
 8006b74:	693b      	ldr	r3, [r7, #16]
 8006b76:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b7a:	d015      	beq.n	8006ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006b82:	f200 8092 	bhi.w	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b8c:	d029      	beq.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b94:	f200 8089 	bhi.w	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d07b      	beq.n	8006c96 <HAL_RCCEx_GetPeriphCLKFreq+0x43a>
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ba4:	d04a      	beq.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
          break;
 8006ba6:	e080      	b.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006ba8:	4b96      	ldr	r3, [pc, #600]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0302 	and.w	r3, r3, #2
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d17c      	bne.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x452>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006bb4:	4b93      	ldr	r3, [pc, #588]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0308 	and.w	r3, r3, #8
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 8006bc0:	4b90      	ldr	r3, [pc, #576]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	e005      	b.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8006bcc:	4b8d      	ldr	r3, [pc, #564]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006bce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bd2:	0a1b      	lsrs	r3, r3, #8
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	4a8b      	ldr	r2, [pc, #556]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bde:	61fb      	str	r3, [r7, #28]
          break;
 8006be0:	e065      	b.n	8006cae <HAL_RCCEx_GetPeriphCLKFreq+0x452>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006be2:	4b88      	ldr	r3, [pc, #544]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006bee:	d160      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006bf0:	4b84      	ldr	r3, [pc, #528]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bfc:	d159      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006bfe:	4b81      	ldr	r3, [pc, #516]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c08:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c0a:	69bb      	ldr	r3, [r7, #24]
 8006c0c:	68fa      	ldr	r2, [r7, #12]
 8006c0e:	fb03 f202 	mul.w	r2, r3, r2
 8006c12:	4b7c      	ldr	r3, [pc, #496]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	091b      	lsrs	r3, r3, #4
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c22:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8006c24:	4b77      	ldr	r3, [pc, #476]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	0d5b      	lsrs	r3, r3, #21
 8006c2a:	f003 0303 	and.w	r3, r3, #3
 8006c2e:	3301      	adds	r3, #1
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c38:	61fb      	str	r3, [r7, #28]
          break;
 8006c3a:	e03a      	b.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006c3c:	4b71      	ldr	r3, [pc, #452]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c48:	d135      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006c4a:	4b6e      	ldr	r3, [pc, #440]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c56:	d12e      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006c58:	4b6a      	ldr	r3, [pc, #424]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c62:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	fb03 f202 	mul.w	r2, r3, r2
 8006c6c:	4b65      	ldr	r3, [pc, #404]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	091b      	lsrs	r3, r3, #4
 8006c72:	f003 0307 	and.w	r3, r3, #7
 8006c76:	3301      	adds	r3, #1
 8006c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c7c:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8006c7e:	4b61      	ldr	r3, [pc, #388]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	0d5b      	lsrs	r3, r3, #21
 8006c84:	f003 0303 	and.w	r3, r3, #3
 8006c88:	3301      	adds	r3, #1
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c92:	61fb      	str	r3, [r7, #28]
          break;
 8006c94:	e00f      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
          if(HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006c96:	4b5b      	ldr	r3, [pc, #364]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c9c:	f003 0302 	and.w	r3, r3, #2
 8006ca0:	2b02      	cmp	r3, #2
 8006ca2:	d10a      	bne.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            frequency = HSI48_VALUE;
 8006ca4:	4b59      	ldr	r3, [pc, #356]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8006ca6:	61fb      	str	r3, [r7, #28]
          break;
 8006ca8:	e007      	b.n	8006cba <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
          break;
 8006caa:	bf00      	nop
 8006cac:	e384      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006cae:	bf00      	nop
 8006cb0:	e382      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006cb2:	bf00      	nop
 8006cb4:	e380      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006cb6:	bf00      	nop
 8006cb8:	e37e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006cba:	bf00      	nop
        break;
 8006cbc:	e37c      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006cbe:	4b51      	ldr	r3, [pc, #324]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b03      	cmp	r3, #3
 8006cce:	d828      	bhi.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x4c6>
 8006cd0:	a201      	add	r2, pc, #4	; (adr r2, 8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x47c>)
 8006cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd6:	bf00      	nop
 8006cd8:	08006ce9 	.word	0x08006ce9
 8006cdc:	08006cf1 	.word	0x08006cf1
 8006ce0:	08006cf9 	.word	0x08006cf9
 8006ce4:	08006d0d 	.word	0x08006d0d
          frequency = HAL_RCC_GetPCLK2Freq();
 8006ce8:	f7ff fa46 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 8006cec:	61f8      	str	r0, [r7, #28]
          break;
 8006cee:	e01d      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          frequency = HAL_RCC_GetSysClockFreq();
 8006cf0:	f7ff f994 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006cf4:	61f8      	str	r0, [r7, #28]
          break;
 8006cf6:	e019      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006cf8:	4b42      	ldr	r3, [pc, #264]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d04:	d10f      	bne.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
            frequency = HSI_VALUE;
 8006d06:	4b42      	ldr	r3, [pc, #264]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006d08:	61fb      	str	r3, [r7, #28]
          break;
 8006d0a:	e00c      	b.n	8006d26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ca>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d0c:	4b3d      	ldr	r3, [pc, #244]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	f003 0302 	and.w	r3, r3, #2
 8006d16:	2b02      	cmp	r3, #2
 8006d18:	d107      	bne.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
            frequency = LSE_VALUE;
 8006d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1e:	61fb      	str	r3, [r7, #28]
          break;
 8006d20:	e003      	b.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
          break;
 8006d22:	bf00      	nop
 8006d24:	e348      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006d26:	bf00      	nop
 8006d28:	e346      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006d2a:	bf00      	nop
        break;
 8006d2c:	e344      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006d2e:	4b35      	ldr	r3, [pc, #212]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d34:	f003 030c 	and.w	r3, r3, #12
 8006d38:	613b      	str	r3, [r7, #16]
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	2b0c      	cmp	r3, #12
 8006d3e:	d83a      	bhi.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x55a>
 8006d40:	a201      	add	r2, pc, #4	; (adr r2, 8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8006d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d46:	bf00      	nop
 8006d48:	08006d7d 	.word	0x08006d7d
 8006d4c:	08006db7 	.word	0x08006db7
 8006d50:	08006db7 	.word	0x08006db7
 8006d54:	08006db7 	.word	0x08006db7
 8006d58:	08006d85 	.word	0x08006d85
 8006d5c:	08006db7 	.word	0x08006db7
 8006d60:	08006db7 	.word	0x08006db7
 8006d64:	08006db7 	.word	0x08006db7
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006db7 	.word	0x08006db7
 8006d70:	08006db7 	.word	0x08006db7
 8006d74:	08006db7 	.word	0x08006db7
 8006d78:	08006da1 	.word	0x08006da1
          frequency = HAL_RCC_GetPCLK1Freq();
 8006d7c:	f7ff f9e6 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006d80:	61f8      	str	r0, [r7, #28]
          break;
 8006d82:	e01d      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          frequency = HAL_RCC_GetSysClockFreq();
 8006d84:	f7ff f94a 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006d88:	61f8      	str	r0, [r7, #28]
          break;
 8006d8a:	e019      	b.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d8c:	4b1d      	ldr	r3, [pc, #116]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d98:	d10f      	bne.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
            frequency = HSI_VALUE;
 8006d9a:	4b1d      	ldr	r3, [pc, #116]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006d9c:	61fb      	str	r3, [r7, #28]
          break;
 8006d9e:	e00c      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006da0:	4b18      	ldr	r3, [pc, #96]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d107      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x562>
            frequency = LSE_VALUE;
 8006dae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db2:	61fb      	str	r3, [r7, #28]
          break;
 8006db4:	e003      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x562>
          break;
 8006db6:	bf00      	nop
 8006db8:	e2fe      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006dba:	bf00      	nop
 8006dbc:	e2fc      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006dbe:	bf00      	nop
        break;
 8006dc0:	e2fa      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006dc2:	4b10      	ldr	r3, [pc, #64]	; (8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>)
 8006dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dcc:	613b      	str	r3, [r7, #16]
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b30      	cmp	r3, #48	; 0x30
 8006dd2:	d029      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	2b30      	cmp	r3, #48	; 0x30
 8006dd8:	d831      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006dda:	693b      	ldr	r3, [r7, #16]
 8006ddc:	2b20      	cmp	r3, #32
 8006dde:	d019      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b20      	cmp	r3, #32
 8006de4:	d82b      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d003      	beq.n	8006df4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	2b10      	cmp	r3, #16
 8006df0:	d004      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
          break;
 8006df2:	e024      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006df4:	f7ff f9aa 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006df8:	61f8      	str	r0, [r7, #28]
          break;
 8006dfa:	e025      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
          frequency = HAL_RCC_GetSysClockFreq();
 8006dfc:	f7ff f90e 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006e00:	61f8      	str	r0, [r7, #28]
          break;
 8006e02:	e021      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8006e04:	40021000 	.word	0x40021000
 8006e08:	0800e858 	.word	0x0800e858
 8006e0c:	02dc6c00 	.word	0x02dc6c00
 8006e10:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e14:	4b8f      	ldr	r3, [pc, #572]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e20:	d10f      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
            frequency = HSI_VALUE;
 8006e22:	4b8d      	ldr	r3, [pc, #564]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006e24:	61fb      	str	r3, [r7, #28]
          break;
 8006e26:	e00c      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e28:	4b8a      	ldr	r3, [pc, #552]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d107      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
            frequency = LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3a:	61fb      	str	r3, [r7, #28]
          break;
 8006e3c:	e003      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
          break;
 8006e3e:	bf00      	nop
 8006e40:	e2ba      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006e42:	bf00      	nop
 8006e44:	e2b8      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006e46:	bf00      	nop
        break;
 8006e48:	e2b6      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006e4a:	4b82      	ldr	r3, [pc, #520]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e50:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2bc0      	cmp	r3, #192	; 0xc0
 8006e5a:	d021      	beq.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006e60:	d829      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	2b80      	cmp	r3, #128	; 0x80
 8006e66:	d011      	beq.n	8006e8c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d823      	bhi.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d003      	beq.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	2b40      	cmp	r3, #64	; 0x40
 8006e78:	d004      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x628>
          break;
 8006e7a:	e01c      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006e7c:	f7ff f966 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006e80:	61f8      	str	r0, [r7, #28]
          break;
 8006e82:	e01d      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e84:	f7ff f8ca 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006e88:	61f8      	str	r0, [r7, #28]
          break;
 8006e8a:	e019      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e8c:	4b71      	ldr	r3, [pc, #452]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e98:	d10f      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
            frequency = HSI_VALUE;
 8006e9a:	4b6f      	ldr	r3, [pc, #444]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006e9c:	61fb      	str	r3, [r7, #28]
          break;
 8006e9e:	e00c      	b.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006ea0:	4b6c      	ldr	r3, [pc, #432]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	f003 0302 	and.w	r3, r3, #2
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	d107      	bne.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x662>
            frequency = LSE_VALUE;
 8006eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eb2:	61fb      	str	r3, [r7, #28]
          break;
 8006eb4:	e003      	b.n	8006ebe <HAL_RCCEx_GetPeriphCLKFreq+0x662>
          break;
 8006eb6:	bf00      	nop
 8006eb8:	e27e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006eba:	bf00      	nop
 8006ebc:	e27c      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006ebe:	bf00      	nop
        break;
 8006ec0:	e27a      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006ec2:	4b64      	ldr	r3, [pc, #400]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed4:	d025      	beq.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006edc:	d82c      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee4:	d013      	beq.n	8006f0e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006eec:	d824      	bhi.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d004      	beq.n	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efa:	d004      	beq.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
          break;
 8006efc:	e01c      	b.n	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006efe:	f7ff f925 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006f02:	61f8      	str	r0, [r7, #28]
          break;
 8006f04:	e01d      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f06:	f7ff f889 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006f0a:	61f8      	str	r0, [r7, #28]
          break;
 8006f0c:	e019      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f0e:	4b51      	ldr	r3, [pc, #324]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f1a:	d10f      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
            frequency = HSI_VALUE;
 8006f1c:	4b4e      	ldr	r3, [pc, #312]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006f1e:	61fb      	str	r3, [r7, #28]
          break;
 8006f20:	e00c      	b.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f22:	4b4c      	ldr	r3, [pc, #304]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f28:	f003 0302 	and.w	r3, r3, #2
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d107      	bne.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
            frequency = LSE_VALUE;
 8006f30:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f34:	61fb      	str	r3, [r7, #28]
          break;
 8006f36:	e003      	b.n	8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
          break;
 8006f38:	bf00      	nop
 8006f3a:	e23d      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f3c:	bf00      	nop
 8006f3e:	e23b      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006f40:	bf00      	nop
        break;
 8006f42:	e239      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006f44:	4b43      	ldr	r3, [pc, #268]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f4a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f56:	d025      	beq.n	8006fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f5e:	d82c      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f66:	d013      	beq.n	8006f90 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6e:	d824      	bhi.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d004      	beq.n	8006f80 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8006f76:	693b      	ldr	r3, [r7, #16]
 8006f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7c:	d004      	beq.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
          break;
 8006f7e:	e01c      	b.n	8006fba <HAL_RCCEx_GetPeriphCLKFreq+0x75e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8006f80:	f7ff f8e4 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8006f84:	61f8      	str	r0, [r7, #28]
          break;
 8006f86:	e01d      	b.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          frequency = HAL_RCC_GetSysClockFreq();
 8006f88:	f7ff f848 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006f8c:	61f8      	str	r0, [r7, #28]
          break;
 8006f8e:	e019      	b.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f90:	4b30      	ldr	r3, [pc, #192]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9c:	d10f      	bne.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x762>
            frequency = HSI_VALUE;
 8006f9e:	4b2e      	ldr	r3, [pc, #184]	; (8007058 <HAL_RCCEx_GetPeriphCLKFreq+0x7fc>)
 8006fa0:	61fb      	str	r3, [r7, #28]
          break;
 8006fa2:	e00c      	b.n	8006fbe <HAL_RCCEx_GetPeriphCLKFreq+0x762>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006fa4:	4b2b      	ldr	r3, [pc, #172]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b02      	cmp	r3, #2
 8006fb0:	d107      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
            frequency = LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb6:	61fb      	str	r3, [r7, #28]
          break;
 8006fb8:	e003      	b.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x766>
          break;
 8006fba:	bf00      	nop
 8006fbc:	e1fc      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006fbe:	bf00      	nop
 8006fc0:	e1fa      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8006fc2:	bf00      	nop
        break;
 8006fc4:	e1f8      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006fc6:	4b23      	ldr	r3, [pc, #140]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006fe0:	d868      	bhi.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006fe8:	d008      	beq.n	8006ffc <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ff0:	d034      	beq.n	800705c <HAL_RCCEx_GetPeriphCLKFreq+0x800>
          break;
 8006ff2:	e05f      	b.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0x858>
          frequency = HAL_RCC_GetSysClockFreq();
 8006ff4:	f7ff f812 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8006ff8:	61f8      	str	r0, [r7, #28]
          break;
 8006ffa:	e060      	b.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x862>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8006ffc:	4b15      	ldr	r3, [pc, #84]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007008:	d156      	bne.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 800700a:	4b12      	ldr	r3, [pc, #72]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800700c:	691b      	ldr	r3, [r3, #16]
 800700e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d050      	beq.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007016:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007020:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007022:	69bb      	ldr	r3, [r7, #24]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	fb03 f202 	mul.w	r2, r3, r2
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	091b      	lsrs	r3, r3, #4
 8007030:	f003 0307 	and.w	r3, r3, #7
 8007034:	3301      	adds	r3, #1
 8007036:	fbb2 f3f3 	udiv	r3, r2, r3
 800703a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800703c:	4b05      	ldr	r3, [pc, #20]	; (8007054 <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>)
 800703e:	691b      	ldr	r3, [r3, #16]
 8007040:	0e5b      	lsrs	r3, r3, #25
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	3301      	adds	r3, #1
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	61fb      	str	r3, [r7, #28]
          break;
 8007052:	e031      	b.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
 8007054:	40021000 	.word	0x40021000
 8007058:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800705c:	4b9c      	ldr	r3, [pc, #624]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007064:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007068:	d128      	bne.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
 800706a:	4b99      	ldr	r3, [pc, #612]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800706c:	695b      	ldr	r3, [r3, #20]
 800706e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007072:	2b00      	cmp	r3, #0
 8007074:	d022      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007076:	4b96      	ldr	r3, [pc, #600]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	0a1b      	lsrs	r3, r3, #8
 800707c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007080:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	fb03 f202 	mul.w	r2, r3, r2
 800708a:	4b91      	ldr	r3, [pc, #580]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	091b      	lsrs	r3, r3, #4
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	3301      	adds	r3, #1
 8007096:	fbb2 f3f3 	udiv	r3, r2, r3
 800709a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 800709c:	4b8c      	ldr	r3, [pc, #560]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	0e5b      	lsrs	r3, r3, #25
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	3301      	adds	r3, #1
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b0:	61fb      	str	r3, [r7, #28]
          break;
 80070b2:	e003      	b.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
          break;
 80070b4:	bf00      	nop
 80070b6:	e17f      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80070b8:	bf00      	nop
 80070ba:	e17d      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80070bc:	bf00      	nop
        break;
 80070be:	e17b      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80070c0:	4b83      	ldr	r3, [pc, #524]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80070c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070ca:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
          frequency = HAL_RCC_GetPCLK2Freq();
 80070d2:	f7ff f851 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 80070d6:	61f8      	str	r0, [r7, #28]
        break;
 80070d8:	e16e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          frequency = HAL_RCC_GetSysClockFreq();
 80070da:	f7fe ff9f 	bl	800601c <HAL_RCC_GetSysClockFreq>
 80070de:	61f8      	str	r0, [r7, #28]
        break;
 80070e0:	e16a      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80070e2:	4b7b      	ldr	r3, [pc, #492]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80070e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070f4:	d013      	beq.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070fc:	d819      	bhi.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d004      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800710a:	d004      	beq.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x8ba>
          break;
 800710c:	e011      	b.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
          frequency = HAL_RCC_GetPCLK1Freq();
 800710e:	f7ff f81d 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8007112:	61f8      	str	r0, [r7, #28]
          break;
 8007114:	e010      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          frequency = HAL_RCC_GetSysClockFreq();
 8007116:	f7fe ff81 	bl	800601c <HAL_RCC_GetSysClockFreq>
 800711a:	61f8      	str	r0, [r7, #28]
          break;
 800711c:	e00c      	b.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800711e:	4b6c      	ldr	r3, [pc, #432]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800712a:	d104      	bne.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
            frequency = HSI_VALUE;
 800712c:	4b69      	ldr	r3, [pc, #420]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 800712e:	61fb      	str	r3, [r7, #28]
          break;
 8007130:	e001      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
          break;
 8007132:	bf00      	nop
 8007134:	e140      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007136:	bf00      	nop
        break;
 8007138:	e13e      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800713a:	4b65      	ldr	r3, [pc, #404]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800713c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007140:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007144:	613b      	str	r3, [r7, #16]
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800714c:	d013      	beq.n	8007176 <HAL_RCCEx_GetPeriphCLKFreq+0x91a>
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007154:	d819      	bhi.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d004      	beq.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x90a>
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007162:	d004      	beq.n	800716e <HAL_RCCEx_GetPeriphCLKFreq+0x912>
          break;
 8007164:	e011      	b.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007166:	f7fe fff1 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800716a:	61f8      	str	r0, [r7, #28]
          break;
 800716c:	e010      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          frequency = HAL_RCC_GetSysClockFreq();
 800716e:	f7fe ff55 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8007172:	61f8      	str	r0, [r7, #28]
          break;
 8007174:	e00c      	b.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x934>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007176:	4b56      	ldr	r3, [pc, #344]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800717e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007182:	d104      	bne.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
            frequency = HSI_VALUE;
 8007184:	4b53      	ldr	r3, [pc, #332]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8007186:	61fb      	str	r3, [r7, #28]
          break;
 8007188:	e001      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0x932>
          break;
 800718a:	bf00      	nop
 800718c:	e114      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 800718e:	bf00      	nop
        break;
 8007190:	e112      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007192:	4b4f      	ldr	r3, [pc, #316]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007198:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800719c:	613b      	str	r3, [r7, #16]
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071a4:	d013      	beq.n	80071ce <HAL_RCCEx_GetPeriphCLKFreq+0x972>
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ac:	d819      	bhi.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x962>
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071ba:	d004      	beq.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x96a>
          break;
 80071bc:	e011      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
          frequency = HAL_RCC_GetPCLK1Freq();
 80071be:	f7fe ffc5 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 80071c2:	61f8      	str	r0, [r7, #28]
          break;
 80071c4:	e010      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          frequency = HAL_RCC_GetSysClockFreq();
 80071c6:	f7fe ff29 	bl	800601c <HAL_RCC_GetSysClockFreq>
 80071ca:	61f8      	str	r0, [r7, #28]
          break;
 80071cc:	e00c      	b.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071ce:	4b40      	ldr	r3, [pc, #256]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071da:	d104      	bne.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
            frequency = HSI_VALUE;
 80071dc:	4b3d      	ldr	r3, [pc, #244]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80071de:	61fb      	str	r3, [r7, #28]
          break;
 80071e0:	e001      	b.n	80071e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
 80071e2:	bf00      	nop
 80071e4:	e0e8      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80071e6:	bf00      	nop
        break;
 80071e8:	e0e6      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80071ea:	4b39      	ldr	r3, [pc, #228]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80071ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071f0:	f003 0303 	and.w	r3, r3, #3
 80071f4:	613b      	str	r3, [r7, #16]
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d011      	beq.n	8007220 <HAL_RCCEx_GetPeriphCLKFreq+0x9c4>
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d818      	bhi.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d003      	beq.n	8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x9b4>
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d004      	beq.n	8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
          break;
 800720e:	e011      	b.n	8007234 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007210:	f7fe ff9c 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8007214:	61f8      	str	r0, [r7, #28]
          break;
 8007216:	e010      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          frequency = HAL_RCC_GetSysClockFreq();
 8007218:	f7fe ff00 	bl	800601c <HAL_RCC_GetSysClockFreq>
 800721c:	61f8      	str	r0, [r7, #28]
          break;
 800721e:	e00c      	b.n	800723a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007220:	4b2b      	ldr	r3, [pc, #172]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800722c:	d104      	bne.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = HSI_VALUE;
 800722e:	4b29      	ldr	r3, [pc, #164]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 8007230:	61fb      	str	r3, [r7, #28]
          break;
 8007232:	e001      	b.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8007234:	bf00      	nop
 8007236:	e0bf      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007238:	bf00      	nop
        break;
 800723a:	e0bd      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800723c:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007246:	613b      	str	r3, [r7, #16]
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800724e:	d02c      	beq.n	80072aa <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007256:	d833      	bhi.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800725e:	d01a      	beq.n	8007296 <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007266:	d82b      	bhi.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007274:	d004      	beq.n	8007280 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 8007276:	e023      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007278:	f7fe ff68 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800727c:	61f8      	str	r0, [r7, #28]
          break;
 800727e:	e026      	b.n	80072ce <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007280:	4b13      	ldr	r3, [pc, #76]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d11a      	bne.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 800728e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007292:	61fb      	str	r3, [r7, #28]
          break;
 8007294:	e016      	b.n	80072c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007296:	4b0e      	ldr	r3, [pc, #56]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a2:	d111      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa78>)
 80072a6:	61fb      	str	r3, [r7, #28]
          break;
 80072a8:	e00e      	b.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072aa:	4b09      	ldr	r3, [pc, #36]	; (80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>)
 80072ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d109      	bne.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 80072b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072bc:	61fb      	str	r3, [r7, #28]
          break;
 80072be:	e005      	b.n	80072cc <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 80072c0:	bf00      	nop
 80072c2:	e079      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80072c4:	bf00      	nop
 80072c6:	e077      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80072c8:	bf00      	nop
 80072ca:	e075      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 80072cc:	bf00      	nop
        break;
 80072ce:	e073      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
 80072d0:	40021000 	.word	0x40021000
 80072d4:	00f42400 	.word	0x00f42400
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80072d8:	4b3a      	ldr	r3, [pc, #232]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072de:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80072e2:	613b      	str	r3, [r7, #16]
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072ea:	d02c      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072f2:	d833      	bhi.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072fa:	d01a      	beq.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0xad6>
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007302:	d82b      	bhi.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0xab8>
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007310:	d004      	beq.n	800731c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8007312:	e023      	b.n	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007314:	f7fe ff1a 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8007318:	61f8      	str	r0, [r7, #28]
          break;
 800731a:	e026      	b.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0xb0e>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800731c:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800731e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b02      	cmp	r3, #2
 8007328:	d11a      	bne.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
              frequency = LSI_VALUE;
 800732a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800732e:	61fb      	str	r3, [r7, #28]
          break;
 8007330:	e016      	b.n	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007332:	4b24      	ldr	r3, [pc, #144]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800733a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800733e:	d111      	bne.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
            frequency = HSI_VALUE;
 8007340:	4b21      	ldr	r3, [pc, #132]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 8007342:	61fb      	str	r3, [r7, #28]
          break;
 8007344:	e00e      	b.n	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007346:	4b1f      	ldr	r3, [pc, #124]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734c:	f003 0302 	and.w	r3, r3, #2
 8007350:	2b02      	cmp	r3, #2
 8007352:	d109      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
            frequency = LSE_VALUE;
 8007354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007358:	61fb      	str	r3, [r7, #28]
          break;
 800735a:	e005      	b.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
          break;
 800735c:	bf00      	nop
 800735e:	e02b      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007360:	bf00      	nop
 8007362:	e029      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007364:	bf00      	nop
 8007366:	e027      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
          break;
 8007368:	bf00      	nop
        break;
 800736a:	e025      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800736c:	4b15      	ldr	r3, [pc, #84]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 800736e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007372:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007376:	613b      	str	r3, [r7, #16]
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d004      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xb2c>
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007384:	d004      	beq.n	8007390 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
          break;
 8007386:	e00d      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          frequency = HAL_RCC_GetPCLK1Freq();
 8007388:	f7fe fee0 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 800738c:	61f8      	str	r0, [r7, #28]
          break;
 800738e:	e009      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007390:	4b0c      	ldr	r3, [pc, #48]	; (80073c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800739c:	d101      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xb46>
            frequency = HSI_VALUE;
 800739e:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>)
 80073a0:	61fb      	str	r3, [r7, #28]
          break;
 80073a2:	bf00      	nop
        break;
 80073a4:	e008      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80073a6:	bf00      	nop
 80073a8:	e006      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80073aa:	bf00      	nop
 80073ac:	e004      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80073ae:	bf00      	nop
 80073b0:	e002      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80073b2:	bf00      	nop
 80073b4:	e000      	b.n	80073b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb5c>
      break;
 80073b6:	bf00      	nop
    }
  }

  return(frequency);
 80073b8:	69fb      	ldr	r3, [r7, #28]
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3720      	adds	r7, #32
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	bf00      	nop
 80073c4:	40021000 	.word	0x40021000
 80073c8:	00f42400 	.word	0x00f42400

080073cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a04      	ldr	r2, [pc, #16]	; (80073e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80073d6:	f043 0304 	orr.w	r3, r3, #4
 80073da:	6013      	str	r3, [r2, #0]
}
 80073dc:	bf00      	nop
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40021000 	.word	0x40021000

080073ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80073fa:	4b74      	ldr	r3, [pc, #464]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	f003 0303 	and.w	r3, r3, #3
 8007402:	2b00      	cmp	r3, #0
 8007404:	d018      	beq.n	8007438 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007406:	4b71      	ldr	r3, [pc, #452]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	f003 0203 	and.w	r2, r3, #3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	429a      	cmp	r2, r3
 8007414:	d10d      	bne.n	8007432 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
       ||
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800741e:	4b6b      	ldr	r3, [pc, #428]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	091b      	lsrs	r3, r3, #4
 8007424:	f003 0307 	and.w	r3, r3, #7
 8007428:	1c5a      	adds	r2, r3, #1
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
       ||
 800742e:	429a      	cmp	r2, r3
 8007430:	d047      	beq.n	80074c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	73fb      	strb	r3, [r7, #15]
 8007436:	e044      	b.n	80074c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b03      	cmp	r3, #3
 800743e:	d018      	beq.n	8007472 <RCCEx_PLLSAI1_Config+0x86>
 8007440:	2b03      	cmp	r3, #3
 8007442:	d825      	bhi.n	8007490 <RCCEx_PLLSAI1_Config+0xa4>
 8007444:	2b01      	cmp	r3, #1
 8007446:	d002      	beq.n	800744e <RCCEx_PLLSAI1_Config+0x62>
 8007448:	2b02      	cmp	r3, #2
 800744a:	d009      	beq.n	8007460 <RCCEx_PLLSAI1_Config+0x74>
 800744c:	e020      	b.n	8007490 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800744e:	4b5f      	ldr	r3, [pc, #380]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f003 0302 	and.w	r3, r3, #2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d11d      	bne.n	8007496 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800745e:	e01a      	b.n	8007496 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007460:	4b5a      	ldr	r3, [pc, #360]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007468:	2b00      	cmp	r3, #0
 800746a:	d116      	bne.n	800749a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007470:	e013      	b.n	800749a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007472:	4b56      	ldr	r3, [pc, #344]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10f      	bne.n	800749e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800747e:	4b53      	ldr	r3, [pc, #332]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d109      	bne.n	800749e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800748e:	e006      	b.n	800749e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007490:	2301      	movs	r3, #1
 8007492:	73fb      	strb	r3, [r7, #15]
      break;
 8007494:	e004      	b.n	80074a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007496:	bf00      	nop
 8007498:	e002      	b.n	80074a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800749a:	bf00      	nop
 800749c:	e000      	b.n	80074a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800749e:	bf00      	nop
    }

    if(status == HAL_OK)
 80074a0:	7bfb      	ldrb	r3, [r7, #15]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10d      	bne.n	80074c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80074a6:	4b49      	ldr	r3, [pc, #292]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6819      	ldr	r1, [r3, #0]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	3b01      	subs	r3, #1
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	430b      	orrs	r3, r1
 80074bc:	4943      	ldr	r1, [pc, #268]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80074c2:	7bfb      	ldrb	r3, [r7, #15]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d17c      	bne.n	80075c2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80074c8:	4b40      	ldr	r3, [pc, #256]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a3f      	ldr	r2, [pc, #252]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80074ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80074d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074d4:	f7fa ff58 	bl	8002388 <HAL_GetTick>
 80074d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074da:	e009      	b.n	80074f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80074dc:	f7fa ff54 	bl	8002388 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d902      	bls.n	80074f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	73fb      	strb	r3, [r7, #15]
        break;
 80074ee:	e005      	b.n	80074fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80074f0:	4b36      	ldr	r3, [pc, #216]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1ef      	bne.n	80074dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d15f      	bne.n	80075c2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d110      	bne.n	800752a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007508:	4b30      	ldr	r3, [pc, #192]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007510:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	6892      	ldr	r2, [r2, #8]
 8007518:	0211      	lsls	r1, r2, #8
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	68d2      	ldr	r2, [r2, #12]
 800751e:	06d2      	lsls	r2, r2, #27
 8007520:	430a      	orrs	r2, r1
 8007522:	492a      	ldr	r1, [pc, #168]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007524:	4313      	orrs	r3, r2
 8007526:	610b      	str	r3, [r1, #16]
 8007528:	e027      	b.n	800757a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d112      	bne.n	8007556 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007530:	4b26      	ldr	r3, [pc, #152]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007532:	691b      	ldr	r3, [r3, #16]
 8007534:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007538:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800753c:	687a      	ldr	r2, [r7, #4]
 800753e:	6892      	ldr	r2, [r2, #8]
 8007540:	0211      	lsls	r1, r2, #8
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	6912      	ldr	r2, [r2, #16]
 8007546:	0852      	lsrs	r2, r2, #1
 8007548:	3a01      	subs	r2, #1
 800754a:	0552      	lsls	r2, r2, #21
 800754c:	430a      	orrs	r2, r1
 800754e:	491f      	ldr	r1, [pc, #124]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007550:	4313      	orrs	r3, r2
 8007552:	610b      	str	r3, [r1, #16]
 8007554:	e011      	b.n	800757a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007556:	4b1d      	ldr	r3, [pc, #116]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800755e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6892      	ldr	r2, [r2, #8]
 8007566:	0211      	lsls	r1, r2, #8
 8007568:	687a      	ldr	r2, [r7, #4]
 800756a:	6952      	ldr	r2, [r2, #20]
 800756c:	0852      	lsrs	r2, r2, #1
 800756e:	3a01      	subs	r2, #1
 8007570:	0652      	lsls	r2, r2, #25
 8007572:	430a      	orrs	r2, r1
 8007574:	4915      	ldr	r1, [pc, #84]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007576:	4313      	orrs	r3, r2
 8007578:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800757a:	4b14      	ldr	r3, [pc, #80]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a13      	ldr	r2, [pc, #76]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 8007580:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007584:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007586:	f7fa feff 	bl	8002388 <HAL_GetTick>
 800758a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800758c:	e009      	b.n	80075a2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800758e:	f7fa fefb 	bl	8002388 <HAL_GetTick>
 8007592:	4602      	mov	r2, r0
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	1ad3      	subs	r3, r2, r3
 8007598:	2b02      	cmp	r3, #2
 800759a:	d902      	bls.n	80075a2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	73fb      	strb	r3, [r7, #15]
          break;
 80075a0:	e005      	b.n	80075ae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d0ef      	beq.n	800758e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80075ae:	7bfb      	ldrb	r3, [r7, #15]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d106      	bne.n	80075c2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80075b4:	4b05      	ldr	r3, [pc, #20]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	4903      	ldr	r1, [pc, #12]	; (80075cc <RCCEx_PLLSAI1_Config+0x1e0>)
 80075be:	4313      	orrs	r3, r2
 80075c0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	40021000 	.word	0x40021000

080075d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
 80075d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80075de:	4b69      	ldr	r3, [pc, #420]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80075ea:	4b66      	ldr	r3, [pc, #408]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	f003 0203 	and.w	r2, r3, #3
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d10d      	bne.n	8007616 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
       ||
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d009      	beq.n	8007616 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007602:	4b60      	ldr	r3, [pc, #384]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	091b      	lsrs	r3, r3, #4
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	1c5a      	adds	r2, r3, #1
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
       ||
 8007612:	429a      	cmp	r2, r3
 8007614:	d047      	beq.n	80076a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	73fb      	strb	r3, [r7, #15]
 800761a:	e044      	b.n	80076a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b03      	cmp	r3, #3
 8007622:	d018      	beq.n	8007656 <RCCEx_PLLSAI2_Config+0x86>
 8007624:	2b03      	cmp	r3, #3
 8007626:	d825      	bhi.n	8007674 <RCCEx_PLLSAI2_Config+0xa4>
 8007628:	2b01      	cmp	r3, #1
 800762a:	d002      	beq.n	8007632 <RCCEx_PLLSAI2_Config+0x62>
 800762c:	2b02      	cmp	r3, #2
 800762e:	d009      	beq.n	8007644 <RCCEx_PLLSAI2_Config+0x74>
 8007630:	e020      	b.n	8007674 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007632:	4b54      	ldr	r3, [pc, #336]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0302 	and.w	r3, r3, #2
 800763a:	2b00      	cmp	r3, #0
 800763c:	d11d      	bne.n	800767a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007642:	e01a      	b.n	800767a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007644:	4b4f      	ldr	r3, [pc, #316]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	2b00      	cmp	r3, #0
 800764e:	d116      	bne.n	800767e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007654:	e013      	b.n	800767e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007656:	4b4b      	ldr	r3, [pc, #300]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10f      	bne.n	8007682 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007662:	4b48      	ldr	r3, [pc, #288]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007672:	e006      	b.n	8007682 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007674:	2301      	movs	r3, #1
 8007676:	73fb      	strb	r3, [r7, #15]
      break;
 8007678:	e004      	b.n	8007684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800767a:	bf00      	nop
 800767c:	e002      	b.n	8007684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800767e:	bf00      	nop
 8007680:	e000      	b.n	8007684 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007682:	bf00      	nop
    }

    if(status == HAL_OK)
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10d      	bne.n	80076a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800768a:	4b3e      	ldr	r3, [pc, #248]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6819      	ldr	r1, [r3, #0]
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	3b01      	subs	r3, #1
 800769c:	011b      	lsls	r3, r3, #4
 800769e:	430b      	orrs	r3, r1
 80076a0:	4938      	ldr	r1, [pc, #224]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80076a2:	4313      	orrs	r3, r2
 80076a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d166      	bne.n	800777a <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80076ac:	4b35      	ldr	r3, [pc, #212]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	4a34      	ldr	r2, [pc, #208]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80076b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076b8:	f7fa fe66 	bl	8002388 <HAL_GetTick>
 80076bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076be:	e009      	b.n	80076d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80076c0:	f7fa fe62 	bl	8002388 <HAL_GetTick>
 80076c4:	4602      	mov	r2, r0
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d902      	bls.n	80076d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80076ce:	2303      	movs	r3, #3
 80076d0:	73fb      	strb	r3, [r7, #15]
        break;
 80076d2:	e005      	b.n	80076e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80076d4:	4b2b      	ldr	r3, [pc, #172]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1ef      	bne.n	80076c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d149      	bne.n	800777a <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d110      	bne.n	800770e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80076ec:	4b25      	ldr	r3, [pc, #148]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 80076ee:	695b      	ldr	r3, [r3, #20]
 80076f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80076f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6892      	ldr	r2, [r2, #8]
 80076fc:	0211      	lsls	r1, r2, #8
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	68d2      	ldr	r2, [r2, #12]
 8007702:	06d2      	lsls	r2, r2, #27
 8007704:	430a      	orrs	r2, r1
 8007706:	491f      	ldr	r1, [pc, #124]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007708:	4313      	orrs	r3, r2
 800770a:	614b      	str	r3, [r1, #20]
 800770c:	e011      	b.n	8007732 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800770e:	4b1d      	ldr	r3, [pc, #116]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007716:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6892      	ldr	r2, [r2, #8]
 800771e:	0211      	lsls	r1, r2, #8
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	6912      	ldr	r2, [r2, #16]
 8007724:	0852      	lsrs	r2, r2, #1
 8007726:	3a01      	subs	r2, #1
 8007728:	0652      	lsls	r2, r2, #25
 800772a:	430a      	orrs	r2, r1
 800772c:	4915      	ldr	r1, [pc, #84]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 800772e:	4313      	orrs	r3, r2
 8007730:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007732:	4b14      	ldr	r3, [pc, #80]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a13      	ldr	r2, [pc, #76]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800773c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800773e:	f7fa fe23 	bl	8002388 <HAL_GetTick>
 8007742:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007744:	e009      	b.n	800775a <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007746:	f7fa fe1f 	bl	8002388 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	2b02      	cmp	r3, #2
 8007752:	d902      	bls.n	800775a <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	73fb      	strb	r3, [r7, #15]
          break;
 8007758:	e005      	b.n	8007766 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800775a:	4b0a      	ldr	r3, [pc, #40]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007762:	2b00      	cmp	r3, #0
 8007764:	d0ef      	beq.n	8007746 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d106      	bne.n	800777a <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 800776e:	695a      	ldr	r2, [r3, #20]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	695b      	ldr	r3, [r3, #20]
 8007774:	4903      	ldr	r1, [pc, #12]	; (8007784 <RCCEx_PLLSAI2_Config+0x1b4>)
 8007776:	4313      	orrs	r3, r2
 8007778:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800777a:	7bfb      	ldrb	r3, [r7, #15]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40021000 	.word	0x40021000

08007788 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007788:	b480      	push	{r7}
 800778a:	b089      	sub	sp, #36	; 0x24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007792:	2300      	movs	r3, #0
 8007794:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8007796:	2300      	movs	r3, #0
 8007798:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077a4:	d10c      	bne.n	80077c0 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80077a6:	4b77      	ldr	r3, [pc, #476]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80077a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80077b0:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80077b8:	d112      	bne.n	80077e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80077ba:	4b73      	ldr	r3, [pc, #460]	; (8007988 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	e00f      	b.n	80077e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	d10b      	bne.n	80077e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80077c8:	4b6e      	ldr	r3, [pc, #440]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80077ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ce:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80077d2:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80077da:	d101      	bne.n	80077e0 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80077dc:	4b6a      	ldr	r3, [pc, #424]	; (8007988 <RCCEx_GetSAIxPeriphCLKFreq+0x200>)
 80077de:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	f040 80c6 	bne.w	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077f2:	d003      	beq.n	80077fc <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80077fa:	d13b      	bne.n	8007874 <RCCEx_GetSAIxPeriphCLKFreq+0xec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80077fc:	4b61      	ldr	r3, [pc, #388]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007808:	f040 80b3 	bne.w	8007972 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
 800780c:	4b5d      	ldr	r3, [pc, #372]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800780e:	68db      	ldr	r3, [r3, #12]
 8007810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80ac 	beq.w	8007972 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800781a:	4b5a      	ldr	r3, [pc, #360]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	091b      	lsrs	r3, r3, #4
 8007820:	f003 0307 	and.w	r3, r3, #7
 8007824:	3301      	adds	r3, #1
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	fbb2 f3f3 	udiv	r3, r2, r3
 800782c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800782e:	4b55      	ldr	r3, [pc, #340]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	0a1b      	lsrs	r3, r3, #8
 8007834:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007838:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 800783a:	4b52      	ldr	r3, [pc, #328]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800783c:	68db      	ldr	r3, [r3, #12]
 800783e:	0edb      	lsrs	r3, r3, #27
 8007840:	f003 031f 	and.w	r3, r3, #31
 8007844:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800784c:	4b4d      	ldr	r3, [pc, #308]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <RCCEx_GetSAIxPeriphCLKFreq+0xd6>
          {
            pllp = 17U;
 8007858:	2311      	movs	r3, #17
 800785a:	617b      	str	r3, [r7, #20]
 800785c:	e001      	b.n	8007862 <RCCEx_GetSAIxPeriphCLKFreq+0xda>
          }
          else
          {
            pllp = 7U;
 800785e:	2307      	movs	r3, #7
 8007860:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	fb03 f202 	mul.w	r2, r3, r2
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007870:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007872:	e07e      	b.n	8007972 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007874:	69bb      	ldr	r3, [r7, #24]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d139      	bne.n	80078ee <RCCEx_GetSAIxPeriphCLKFreq+0x166>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 800787a:	4b42      	ldr	r3, [pc, #264]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007882:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007886:	d175      	bne.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 8007888:	4b3e      	ldr	r3, [pc, #248]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800788a:	691b      	ldr	r3, [r3, #16]
 800788c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d06f      	beq.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007894:	4b3b      	ldr	r3, [pc, #236]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	091b      	lsrs	r3, r3, #4
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	3301      	adds	r3, #1
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80078a8:	4b36      	ldr	r3, [pc, #216]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80078aa:	691b      	ldr	r3, [r3, #16]
 80078ac:	0a1b      	lsrs	r3, r3, #8
 80078ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078b2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 80078b4:	4b33      	ldr	r3, [pc, #204]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80078b6:	691b      	ldr	r3, [r3, #16]
 80078b8:	0edb      	lsrs	r3, r3, #27
 80078ba:	f003 031f 	and.w	r3, r3, #31
 80078be:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <RCCEx_GetSAIxPeriphCLKFreq+0x154>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80078c6:	4b2f      	ldr	r3, [pc, #188]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <RCCEx_GetSAIxPeriphCLKFreq+0x150>
          {
            pllp = 17U;
 80078d2:	2311      	movs	r3, #17
 80078d4:	617b      	str	r3, [r7, #20]
 80078d6:	e001      	b.n	80078dc <RCCEx_GetSAIxPeriphCLKFreq+0x154>
          }
          else
          {
            pllp = 7U;
 80078d8:	2307      	movs	r3, #7
 80078da:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	68fa      	ldr	r2, [r7, #12]
 80078e0:	fb03 f202 	mul.w	r2, r3, r2
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80078ea:	61fb      	str	r3, [r7, #28]
 80078ec:	e042      	b.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078f4:	d003      	beq.n	80078fe <RCCEx_GetSAIxPeriphCLKFreq+0x176>
 80078f6:	69bb      	ldr	r3, [r7, #24]
 80078f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078fc:	d13a      	bne.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 80078fe:	4b21      	ldr	r3, [pc, #132]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800790a:	d133      	bne.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
 800790c:	4b1d      	ldr	r3, [pc, #116]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007914:	2b00      	cmp	r3, #0
 8007916:	d02d      	beq.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007918:	4b1a      	ldr	r3, [pc, #104]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	091b      	lsrs	r3, r3, #4
 800791e:	f003 0307 	and.w	r3, r3, #7
 8007922:	3301      	adds	r3, #1
 8007924:	693a      	ldr	r2, [r7, #16]
 8007926:	fbb2 f3f3 	udiv	r3, r2, r3
 800792a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800792c:	4b15      	ldr	r3, [pc, #84]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800792e:	695b      	ldr	r3, [r3, #20]
 8007930:	0a1b      	lsrs	r3, r3, #8
 8007932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007936:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	0edb      	lsrs	r3, r3, #27
 800793e:	f003 031f 	and.w	r3, r3, #31
 8007942:	617b      	str	r3, [r7, #20]
#endif
        if(pllp == 0U)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800794a:	4b0e      	ldr	r3, [pc, #56]	; (8007984 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800794c:	695b      	ldr	r3, [r3, #20]
 800794e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8007956:	2311      	movs	r3, #17
 8007958:	617b      	str	r3, [r7, #20]
 800795a:	e001      	b.n	8007960 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 800795c:	2307      	movs	r3, #7
 800795e:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	fb03 f202 	mul.w	r2, r3, r2
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	fbb2 f3f3 	udiv	r3, r2, r3
 800796e:	61fb      	str	r3, [r7, #28]
 8007970:	e000      	b.n	8007974 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8007972:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8007974:	69fb      	ldr	r3, [r7, #28]
}
 8007976:	4618      	mov	r0, r3
 8007978:	3724      	adds	r7, #36	; 0x24
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	40021000 	.word	0x40021000
 8007988:	001fff68 	.word	0x001fff68

0800798c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d101      	bne.n	800799e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e155      	b.n	8007c4a <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d106      	bne.n	80079b8 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f7fa fb76 	bl	80020a4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f959 	bl	8007c70 <SAI_Disable>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d001      	beq.n	80079c8 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e140      	b.n	8007c4a <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2202      	movs	r2, #2
 80079cc:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	d00c      	beq.n	80079f2 <HAL_SAI_Init+0x66>
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d80d      	bhi.n	80079f8 <HAL_SAI_Init+0x6c>
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <HAL_SAI_Init+0x5a>
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d003      	beq.n	80079ec <HAL_SAI_Init+0x60>
 80079e4:	e008      	b.n	80079f8 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
      break;
 80079ea:	e008      	b.n	80079fe <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80079ec:	2310      	movs	r3, #16
 80079ee:	61fb      	str	r3, [r7, #28]
      break;
 80079f0:	e005      	b.n	80079fe <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80079f2:	2320      	movs	r3, #32
 80079f4:	61fb      	str	r3, [r7, #28]
      break;
 80079f6:	e002      	b.n	80079fe <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 80079f8:	2300      	movs	r3, #0
 80079fa:	61fb      	str	r3, [r7, #28]
      break;
 80079fc:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d81d      	bhi.n	8007a42 <HAL_SAI_Init+0xb6>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <HAL_SAI_Init+0x80>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a23 	.word	0x08007a23
 8007a14:	08007a2b 	.word	0x08007a2b
 8007a18:	08007a33 	.word	0x08007a33
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
      break;
 8007a20:	e012      	b.n	8007a48 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007a22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a26:	617b      	str	r3, [r7, #20]
      break;
 8007a28:	e00e      	b.n	8007a48 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a2e:	617b      	str	r3, [r7, #20]
      break;
 8007a30:	e00a      	b.n	8007a48 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a36:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	f043 0301 	orr.w	r3, r3, #1
 8007a3e:	61fb      	str	r3, [r7, #28]
      break;
 8007a40:	e002      	b.n	8007a48 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8007a42:	2300      	movs	r3, #0
 8007a44:	617b      	str	r3, [r7, #20]
      break;
 8007a46:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a81      	ldr	r2, [pc, #516]	; (8007c54 <HAL_SAI_Init+0x2c8>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d004      	beq.n	8007a5c <HAL_SAI_Init+0xd0>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a80      	ldr	r2, [pc, #512]	; (8007c58 <HAL_SAI_Init+0x2cc>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d103      	bne.n	8007a64 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8007a5c:	4a7f      	ldr	r2, [pc, #508]	; (8007c5c <HAL_SAI_Init+0x2d0>)
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e002      	b.n	8007a6a <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007a64:	4a7e      	ldr	r2, [pc, #504]	; (8007c60 <HAL_SAI_Init+0x2d4>)
 8007a66:	69fb      	ldr	r3, [r7, #28]
 8007a68:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d041      	beq.n	8007af6 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a77      	ldr	r2, [pc, #476]	; (8007c54 <HAL_SAI_Init+0x2c8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d004      	beq.n	8007a86 <HAL_SAI_Init+0xfa>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a75      	ldr	r2, [pc, #468]	; (8007c58 <HAL_SAI_Init+0x2cc>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d105      	bne.n	8007a92 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007a86:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007a8a:	f7fe fee7 	bl	800685c <HAL_RCCEx_GetPeriphCLKFreq>
 8007a8e:	6138      	str	r0, [r7, #16]
 8007a90:	e004      	b.n	8007a9c <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007a92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007a96:	f7fe fee1 	bl	800685c <HAL_RCCEx_GetPeriphCLKFreq>
 8007a9a:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	009b      	lsls	r3, r3, #2
 8007aa2:	4413      	add	r3, r2
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	69db      	ldr	r3, [r3, #28]
 8007aac:	025b      	lsls	r3, r3, #9
 8007aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ab2:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4a6b      	ldr	r2, [pc, #428]	; (8007c64 <HAL_SAI_Init+0x2d8>)
 8007ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8007abc:	08da      	lsrs	r2, r3, #3
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007ac2:	68f9      	ldr	r1, [r7, #12]
 8007ac4:	4b67      	ldr	r3, [pc, #412]	; (8007c64 <HAL_SAI_Init+0x2d8>)
 8007ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8007aca:	08da      	lsrs	r2, r3, #3
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	1aca      	subs	r2, r1, r3
 8007ad6:	2a08      	cmp	r2, #8
 8007ad8:	d904      	bls.n	8007ae4 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	1c5a      	adds	r2, r3, #1
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d104      	bne.n	8007af6 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	085a      	lsrs	r2, r3, #1
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d003      	beq.n	8007b06 <HAL_SAI_Init+0x17a>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d109      	bne.n	8007b1a <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d101      	bne.n	8007b12 <HAL_SAI_Init+0x186>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	e001      	b.n	8007b16 <HAL_SAI_Init+0x18a>
 8007b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	e008      	b.n	8007b2c <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d102      	bne.n	8007b28 <HAL_SAI_Init+0x19c>
 8007b22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007b26:	e000      	b.n	8007b2a <HAL_SAI_Init+0x19e>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6819      	ldr	r1, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	4b4c      	ldr	r3, [pc, #304]	; (8007c68 <HAL_SAI_Init+0x2dc>)
 8007b38:	400b      	ands	r3, r1
 8007b3a:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6819      	ldr	r1, [r3, #0]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	685a      	ldr	r2, [r3, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4a:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b50:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	431a      	orrs	r2, r3
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8007b64:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007b70:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	051b      	lsls	r3, r3, #20
 8007b78:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	6812      	ldr	r2, [r2, #0]
 8007b8c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007b90:	f023 030f 	bic.w	r3, r3, #15
 8007b94:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba4:	431a      	orrs	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007baa:	431a      	orrs	r2, r3
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b2b      	ldr	r3, [pc, #172]	; (8007c6c <HAL_SAI_Init+0x2e0>)
 8007bc0:	400b      	ands	r3, r1
 8007bc2:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	6899      	ldr	r1, [r3, #8]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bce:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007bd4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8007bda:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8007be0:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	3b01      	subs	r3, #1
 8007be8:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007bea:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	68d9      	ldr	r1, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007c02:	400b      	ands	r3, r1
 8007c04:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68d9      	ldr	r1, [r3, #12]
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007c1c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c22:	3b01      	subs	r3, #1
 8007c24:	021b      	lsls	r3, r3, #8
 8007c26:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	430a      	orrs	r2, r1
 8007c2e:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	40015404 	.word	0x40015404
 8007c58:	40015424 	.word	0x40015424
 8007c5c:	40015400 	.word	0x40015400
 8007c60:	40015800 	.word	0x40015800
 8007c64:	cccccccd 	.word	0xcccccccd
 8007c68:	ff05c010 	.word	0xff05c010
 8007c6c:	fff88000 	.word	0xfff88000

08007c70 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b085      	sub	sp, #20
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007c78:	4b18      	ldr	r3, [pc, #96]	; (8007cdc <SAI_Disable+0x6c>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a18      	ldr	r2, [pc, #96]	; (8007ce0 <SAI_Disable+0x70>)
 8007c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c82:	0b1b      	lsrs	r3, r3, #12
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007c9a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10a      	bne.n	8007cb8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ca8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007cb2:	2303      	movs	r3, #3
 8007cb4:	72fb      	strb	r3, [r7, #11]
      break;
 8007cb6:	e009      	b.n	8007ccc <SAI_Disable+0x5c>
    }
    count--;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1e7      	bne.n	8007c9c <SAI_Disable+0x2c>

  return status;
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20000000 	.word	0x20000000
 8007ce0:	95cbec1b 	.word	0x95cbec1b

08007ce4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;
#endif

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e022      	b.n	8007d3c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d105      	bne.n	8007d0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7fa f841 	bl	8001d90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2203      	movs	r2, #3
 8007d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f814 	bl	8007d44 <HAL_SD_InitCard>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d001      	beq.n	8007d26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e00a      	b.n	8007d3c <HAL_SD_Init+0x58>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d44:	b5b0      	push	{r4, r5, r7, lr}
 8007d46:	b08e      	sub	sp, #56	; 0x38
 8007d48:	af04      	add	r7, sp, #16
 8007d4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60bb      	str	r3, [r7, #8]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	60fb      	str	r3, [r7, #12]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007d54:	2300      	movs	r3, #0
 8007d56:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8007d60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007d64:	f7fe fd7a 	bl	800685c <HAL_RCCEx_GetPeriphCLKFreq>
 8007d68:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d109      	bne.n	8007d84 <HAL_SD_InitCard+0x40>
  {
      hsd->State = HAL_SD_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e07b      	b.n	8007e7c <HAL_SD_InitCard+0x138>
  }
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  Init.ClockDiv = ((sdmmc_clk / SD_INIT_FREQ) - 2U);
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	09db      	lsrs	r3, r3, #7
 8007d88:	4a3e      	ldr	r2, [pc, #248]	; (8007e84 <HAL_SD_InitCard+0x140>)
 8007d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8e:	091b      	lsrs	r3, r3, #4
 8007d90:	3b02      	subs	r3, #2
 8007d92:	61fb      	str	r3, [r7, #28]
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681d      	ldr	r5, [r3, #0]
 8007d98:	466c      	mov	r4, sp
 8007d9a:	f107 0314 	add.w	r3, r7, #20
 8007d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007da6:	f107 0308 	add.w	r3, r7, #8
 8007daa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007dac:	4628      	mov	r0, r5
 8007dae:	f002 fa81 	bl	800a2b4 <SDMMC_Init>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	685a      	ldr	r2, [r3, #4]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007dc0:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 faae 	bl	800a328 <SDMMC_PowerState_ON>

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685a      	ldr	r2, [r3, #4]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dda:	605a      	str	r2, [r3, #4]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  sdmmc_clk = sdmmc_clk/(Init.ClockDiv + 2U);
 8007ddc:	69fb      	ldr	r3, [r7, #28]
 8007dde:	3302      	adds	r3, #2
 8007de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007de6:	627b      	str	r3, [r7, #36]	; 0x24
#else
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
#endif
  HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007de8:	4a27      	ldr	r2, [pc, #156]	; (8007e88 <HAL_SD_InitCard+0x144>)
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df0:	3301      	adds	r3, #1
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fa fad4 	bl	80023a0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 fb77 	bl	80084ec <SD_PowerON>
 8007dfe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d00b      	beq.n	8007e1e <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	431a      	orrs	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e02e      	b.n	8007e7c <HAL_SD_InitCard+0x138>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 fa96 	bl	8008350 <SD_InitCard>
 8007e24:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e26:	6a3b      	ldr	r3, [r7, #32]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00b      	beq.n	8007e44 <HAL_SD_InitCard+0x100>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	431a      	orrs	r2, r3
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	e01b      	b.n	8007e7c <HAL_SD_InitCard+0x138>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f002 fafe 	bl	800a44e <SDMMC_CmdBlockLength>
 8007e52:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e54:	6a3b      	ldr	r3, [r7, #32]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d00f      	beq.n	8007e7a <HAL_SD_InitCard+0x136>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a0b      	ldr	r2, [pc, #44]	; (8007e8c <HAL_SD_InitCard+0x148>)
 8007e60:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e76:	2301      	movs	r3, #1
 8007e78:	e000      	b.n	8007e7c <HAL_SD_InitCard+0x138>
  }

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3728      	adds	r7, #40	; 0x28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bdb0      	pop	{r4, r5, r7, pc}
 8007e84:	014f8b59 	.word	0x014f8b59
 8007e88:	00012110 	.word	0x00012110
 8007e8c:	004005ff 	.word	0x004005ff

08007e90 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e90:	b480      	push	{r7}
 8007e92:	b083      	sub	sp, #12
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e9e:	0f9b      	lsrs	r3, r3, #30
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eaa:	0e9b      	lsrs	r3, r3, #26
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	b2da      	uxtb	r2, r3
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ebc:	0e1b      	lsrs	r3, r3, #24
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	f003 0303 	and.w	r3, r3, #3
 8007ec4:	b2da      	uxtb	r2, r3
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	b2da      	uxtb	r2, r3
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eda:	0a1b      	lsrs	r3, r3, #8
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee6:	b2da      	uxtb	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef0:	0d1b      	lsrs	r3, r3, #20
 8007ef2:	b29a      	uxth	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	f003 030f 	and.w	r3, r3, #15
 8007f04:	b2da      	uxtb	r2, r3
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0e:	0bdb      	lsrs	r3, r3, #15
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f20:	0b9b      	lsrs	r3, r3, #14
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	f003 0301 	and.w	r3, r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f32:	0b5b      	lsrs	r3, r3, #13
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f44:	0b1b      	lsrs	r3, r3, #12
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	f003 0301 	and.w	r3, r3, #1
 8007f4c:	b2da      	uxtb	r2, r3
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2200      	movs	r2, #0
 8007f56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d163      	bne.n	8008028 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f64:	009a      	lsls	r2, r3, #2
 8007f66:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f70:	0f92      	lsrs	r2, r2, #30
 8007f72:	431a      	orrs	r2, r3
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f7c:	0edb      	lsrs	r3, r3, #27
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	f003 0307 	and.w	r3, r3, #7
 8007f84:	b2da      	uxtb	r2, r3
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8e:	0e1b      	lsrs	r3, r3, #24
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	b2da      	uxtb	r2, r3
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fa0:	0d5b      	lsrs	r3, r3, #21
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	f003 0307 	and.w	r3, r3, #7
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fb2:	0c9b      	lsrs	r3, r3, #18
 8007fb4:	b2db      	uxtb	r3, r3
 8007fb6:	f003 0307 	and.w	r3, r3, #7
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fc4:	0bdb      	lsrs	r3, r3, #15
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0307 	and.w	r3, r3, #7
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	1c5a      	adds	r2, r3, #1
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	7e1b      	ldrb	r3, [r3, #24]
 8007fe0:	b2db      	uxtb	r3, r3
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	3302      	adds	r3, #2
 8007fe8:	2201      	movs	r2, #1
 8007fea:	fa02 f303 	lsl.w	r3, r2, r3
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007ff2:	fb03 f202 	mul.w	r2, r3, r2
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	7a1b      	ldrb	r3, [r3, #8]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	2201      	movs	r2, #1
 8008006:	409a      	lsls	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008014:	0a52      	lsrs	r2, r2, #9
 8008016:	fb03 f202 	mul.w	r2, r3, r2
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008024:	661a      	str	r2, [r3, #96]	; 0x60
 8008026:	e031      	b.n	800808c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800802c:	2b01      	cmp	r3, #1
 800802e:	d11d      	bne.n	800806c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008034:	041b      	lsls	r3, r3, #16
 8008036:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800803e:	0c1b      	lsrs	r3, r3, #16
 8008040:	431a      	orrs	r2, r3
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	3301      	adds	r3, #1
 800804c:	029a      	lsls	r2, r3, #10
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008060:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	661a      	str	r2, [r3, #96]	; 0x60
 800806a:	e00f      	b.n	800808c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a58      	ldr	r2, [pc, #352]	; (80081d4 <HAL_SD_GetCardCSD+0x344>)
 8008072:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008088:	2301      	movs	r3, #1
 800808a:	e09d      	b.n	80081c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008090:	0b9b      	lsrs	r3, r3, #14
 8008092:	b2db      	uxtb	r3, r3
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	b2da      	uxtb	r2, r3
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a2:	09db      	lsrs	r3, r3, #7
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080aa:	b2da      	uxtb	r2, r3
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ba:	b2da      	uxtb	r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080c4:	0fdb      	lsrs	r3, r3, #31
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d0:	0f5b      	lsrs	r3, r3, #29
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	f003 0303 	and.w	r3, r3, #3
 80080d8:	b2da      	uxtb	r2, r3
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e2:	0e9b      	lsrs	r3, r3, #26
 80080e4:	b2db      	uxtb	r3, r3
 80080e6:	f003 0307 	and.w	r3, r3, #7
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f4:	0d9b      	lsrs	r3, r3, #22
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008106:	0d5b      	lsrs	r3, r3, #21
 8008108:	b2db      	uxtb	r3, r3
 800810a:	f003 0301 	and.w	r3, r3, #1
 800810e:	b2da      	uxtb	r2, r3
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008122:	0c1b      	lsrs	r3, r3, #16
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	0bdb      	lsrs	r3, r3, #15
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	0b9b      	lsrs	r3, r3, #14
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	b2da      	uxtb	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	0b5b      	lsrs	r3, r3, #13
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008172:	0b1b      	lsrs	r3, r3, #12
 8008174:	b2db      	uxtb	r3, r3
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	b2da      	uxtb	r2, r3
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008186:	0a9b      	lsrs	r3, r3, #10
 8008188:	b2db      	uxtb	r3, r3
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	b2da      	uxtb	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800819a:	0a1b      	lsrs	r3, r3, #8
 800819c:	b2db      	uxtb	r3, r3
 800819e:	f003 0303 	and.w	r3, r3, #3
 80081a2:	b2da      	uxtb	r2, r3
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	085b      	lsrs	r3, r3, #1
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80081c6:	2300      	movs	r3, #0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	004005ff 	.word	0x004005ff

080081d8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80081d8:	b5b0      	push	{r4, r5, r7, lr}
 80081da:	b090      	sub	sp, #64	; 0x40
 80081dc:	af04      	add	r7, sp, #16
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2203      	movs	r2, #3
 80081ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f4:	2b03      	cmp	r3, #3
 80081f6:	d02e      	beq.n	8008256 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081fe:	d106      	bne.n	800820e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	639a      	str	r2, [r3, #56]	; 0x38
 800820c:	e029      	b.n	8008262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008214:	d10a      	bne.n	800822c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f9f6 	bl	8008608 <SD_WideBus_Enable>
 800821c:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008224:	431a      	orrs	r2, r3
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	639a      	str	r2, [r3, #56]	; 0x38
 800822a:	e01a      	b.n	8008262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d10a      	bne.n	8008248 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 fa33 	bl	800869e <SD_WideBus_Disable>
 8008238:	62b8      	str	r0, [r7, #40]	; 0x28

      hsd->ErrorCode |= errorstate;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800823e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008240:	431a      	orrs	r2, r3
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	639a      	str	r2, [r3, #56]	; 0x38
 8008246:	e00c      	b.n	8008262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	639a      	str	r2, [r3, #56]	; 0x38
 8008254:	e005      	b.n	8008262 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008266:	2b00      	cmp	r3, #0
 8008268:	d007      	beq.n	800827a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a35      	ldr	r2, [pc, #212]	; (8008344 <HAL_SD_ConfigWideBusOperation+0x16c>)
 8008270:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008278:	e042      	b.n	8008300 <HAL_SD_ConfigWideBusOperation+0x128>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800827a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800827e:	f7fe faed 	bl	800685c <HAL_RCCEx_GetPeriphCLKFreq>
 8008282:	6278      	str	r0, [r7, #36]	; 0x24
    if (sdmmc_clk != 0U)
 8008284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008286:	2b00      	cmp	r3, #0
 8008288:	d031      	beq.n	80082ee <HAL_SD_ConfigWideBusOperation+0x116>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	60fb      	str	r3, [r7, #12]
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
      Init.ClockBypass         = hsd->Init.ClockBypass;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	613b      	str	r3, [r7, #16]
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	617b      	str	r3, [r7, #20]
      Init.BusWide             = WideMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	61bb      	str	r3, [r7, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	695b      	ldr	r3, [r3, #20]
 80082a4:	61fb      	str	r3, [r7, #28]
        }
      }

      Init.Transceiver = hsd->Init.Transceiver;
#else
      if ((sdmmc_clk / (hsd->Init.ClockDiv + 2U)) > SD_NORMAL_SPEED_FREQ)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	3302      	adds	r3, #2
 80082ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b2:	4a25      	ldr	r2, [pc, #148]	; (8008348 <HAL_SD_ConfigWideBusOperation+0x170>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d907      	bls.n	80082c8 <HAL_SD_ConfigWideBusOperation+0xf0>
      {
        Init.ClockDiv = ((sdmmc_clk / SD_NORMAL_SPEED_FREQ) - 2U);
 80082b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ba:	4a24      	ldr	r2, [pc, #144]	; (800834c <HAL_SD_ConfigWideBusOperation+0x174>)
 80082bc:	fba2 2303 	umull	r2, r3, r2, r3
 80082c0:	0ddb      	lsrs	r3, r3, #23
 80082c2:	3b02      	subs	r3, #2
 80082c4:	623b      	str	r3, [r7, #32]
 80082c6:	e002      	b.n	80082ce <HAL_SD_ConfigWideBusOperation+0xf6>
      }
      else
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	623b      	str	r3, [r7, #32]
      }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

      (void)SDMMC_Init(hsd->Instance, Init);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681d      	ldr	r5, [r3, #0]
 80082d2:	466c      	mov	r4, sp
 80082d4:	f107 0318 	add.w	r3, r7, #24
 80082d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80082dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80082e0:	f107 030c 	add.w	r3, r7, #12
 80082e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80082e6:	4628      	mov	r0, r5
 80082e8:	f001 ffe4 	bl	800a2b4 <SDMMC_Init>
 80082ec:	e008      	b.n	8008300 <HAL_SD_ConfigWideBusOperation+0x128>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38
      status = HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008308:	4618      	mov	r0, r3
 800830a:	f002 f8a0 	bl	800a44e <SDMMC_CmdBlockLength>
 800830e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00c      	beq.n	8008330 <HAL_SD_ConfigWideBusOperation+0x158>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a0a      	ldr	r2, [pc, #40]	; (8008344 <HAL_SD_ConfigWideBusOperation+0x16c>)
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008338:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800833c:	4618      	mov	r0, r3
 800833e:	3730      	adds	r7, #48	; 0x30
 8008340:	46bd      	mov	sp, r7
 8008342:	bdb0      	pop	{r4, r5, r7, pc}
 8008344:	004005ff 	.word	0x004005ff
 8008348:	017d7840 	.word	0x017d7840
 800834c:	55e63b89 	.word	0x55e63b89

08008350 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008350:	b5b0      	push	{r4, r5, r7, lr}
 8008352:	b094      	sub	sp, #80	; 0x50
 8008354:	af04      	add	r7, sp, #16
 8008356:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008358:	2301      	movs	r3, #1
 800835a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f001 fff0 	bl	800a346 <SDMMC_GetPowerState>
 8008366:	4603      	mov	r3, r0
 8008368:	2b00      	cmp	r3, #0
 800836a:	d102      	bne.n	8008372 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800836c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008370:	e0b8      	b.n	80084e4 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008376:	2b03      	cmp	r3, #3
 8008378:	d02f      	beq.n	80083da <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	4618      	mov	r0, r3
 8008380:	f002 f96f 	bl	800a662 <SDMMC_CmdSendCID>
 8008384:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008388:	2b00      	cmp	r3, #0
 800838a:	d001      	beq.n	8008390 <SD_InitCard+0x40>
    {
      return errorstate;
 800838c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800838e:	e0a9      	b.n	80084e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f002 f81a 	bl	800a3d0 <SDMMC_GetResponse>
 800839c:	4602      	mov	r2, r0
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	2104      	movs	r1, #4
 80083a8:	4618      	mov	r0, r3
 80083aa:	f002 f811 	bl	800a3d0 <SDMMC_GetResponse>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2108      	movs	r1, #8
 80083ba:	4618      	mov	r0, r3
 80083bc:	f002 f808 	bl	800a3d0 <SDMMC_GetResponse>
 80083c0:	4602      	mov	r2, r0
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	210c      	movs	r1, #12
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 ffff 	bl	800a3d0 <SDMMC_GetResponse>
 80083d2:	4602      	mov	r2, r0
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d00d      	beq.n	80083fe <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f107 020e 	add.w	r2, r7, #14
 80083ea:	4611      	mov	r1, r2
 80083ec:	4618      	mov	r0, r3
 80083ee:	f002 f975 	bl	800a6dc <SDMMC_CmdSetRelAdd>
 80083f2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <SD_InitCard+0xae>
    {
      return errorstate;
 80083fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083fc:	e072      	b.n	80084e4 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008402:	2b03      	cmp	r3, #3
 8008404:	d036      	beq.n	8008474 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008406:	89fb      	ldrh	r3, [r7, #14]
 8008408:	461a      	mov	r2, r3
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	4619      	mov	r1, r3
 800841a:	4610      	mov	r0, r2
 800841c:	f002 f93f 	bl	800a69e <SDMMC_CmdSendCSD>
 8008420:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008422:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008424:	2b00      	cmp	r3, #0
 8008426:	d001      	beq.n	800842c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842a:	e05b      	b.n	80084e4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f001 ffcc 	bl	800a3d0 <SDMMC_GetResponse>
 8008438:	4602      	mov	r2, r0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2104      	movs	r1, #4
 8008444:	4618      	mov	r0, r3
 8008446:	f001 ffc3 	bl	800a3d0 <SDMMC_GetResponse>
 800844a:	4602      	mov	r2, r0
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2108      	movs	r1, #8
 8008456:	4618      	mov	r0, r3
 8008458:	f001 ffba 	bl	800a3d0 <SDMMC_GetResponse>
 800845c:	4602      	mov	r2, r0
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	210c      	movs	r1, #12
 8008468:	4618      	mov	r0, r3
 800846a:	f001 ffb1 	bl	800a3d0 <SDMMC_GetResponse>
 800846e:	4602      	mov	r2, r0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2104      	movs	r1, #4
 800847a:	4618      	mov	r0, r3
 800847c:	f001 ffa8 	bl	800a3d0 <SDMMC_GetResponse>
 8008480:	4603      	mov	r3, r0
 8008482:	0d1a      	lsrs	r2, r3, #20
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008488:	f107 0310 	add.w	r3, r7, #16
 800848c:	4619      	mov	r1, r3
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7ff fcfe 	bl	8007e90 <HAL_SD_GetCardCSD>
 8008494:	4603      	mov	r3, r0
 8008496:	2b00      	cmp	r3, #0
 8008498:	d002      	beq.n	80084a0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800849a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800849e:	e021      	b.n	80084e4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6819      	ldr	r1, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084a8:	041b      	lsls	r3, r3, #16
 80084aa:	2200      	movs	r2, #0
 80084ac:	461c      	mov	r4, r3
 80084ae:	4615      	mov	r5, r2
 80084b0:	4622      	mov	r2, r4
 80084b2:	462b      	mov	r3, r5
 80084b4:	4608      	mov	r0, r1
 80084b6:	f001 ffec 	bl	800a492 <SDMMC_CmdSelDesel>
 80084ba:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80084bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d001      	beq.n	80084c6 <SD_InitCard+0x176>
  {
    return errorstate;
 80084c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084c4:	e00e      	b.n	80084e4 <SD_InitCard+0x194>
  }

#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681d      	ldr	r5, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	466c      	mov	r4, sp
 80084ce:	f103 0210 	add.w	r2, r3, #16
 80084d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80084d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80084d8:	3304      	adds	r3, #4
 80084da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80084dc:	4628      	mov	r0, r5
 80084de:	f001 fee9 	bl	800a2b4 <SDMMC_Init>
#endif /* !STM32L4P5xx && !STM32L4Q5xx && !STM32L4R5xx && !STM32L4R7xx && !STM32L4R9xx && !STM32L4S5xx && !STM32L4S7xx && !STM32L4S9xx */

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80084e2:	2300      	movs	r3, #0
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3740      	adds	r7, #64	; 0x40
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bdb0      	pop	{r4, r5, r7, pc}

080084ec <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80084f8:	2300      	movs	r3, #0
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	2300      	movs	r3, #0
 80084fe:	613b      	str	r3, [r7, #16]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t tickstart = HAL_GetTick();
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4618      	mov	r0, r3
 8008506:	f001 ffe7 	bl	800a4d8 <SDMMC_CmdGoIdleState>
 800850a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d001      	beq.n	8008516 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	e072      	b.n	80085fc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f001 fffa 	bl	800a514 <SDMMC_CmdOperCond>
 8008520:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d00d      	beq.n	8008544 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4618      	mov	r0, r3
 8008534:	f001 ffd0 	bl	800a4d8 <SDMMC_CmdGoIdleState>
 8008538:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d004      	beq.n	800854a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	e05b      	b.n	80085fc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854e:	2b01      	cmp	r3, #1
 8008550:	d137      	bne.n	80085c2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2100      	movs	r1, #0
 8008558:	4618      	mov	r0, r3
 800855a:	f001 fffa 	bl	800a552 <SDMMC_CmdAppCommand>
 800855e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02d      	beq.n	80085c2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008566:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800856a:	e047      	b.n	80085fc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2100      	movs	r1, #0
 8008572:	4618      	mov	r0, r3
 8008574:	f001 ffed 	bl	800a552 <SDMMC_CmdAppCommand>
 8008578:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <SD_PowerON+0x98>
    {
      return errorstate;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	e03b      	b.n	80085fc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	491e      	ldr	r1, [pc, #120]	; (8008604 <SD_PowerON+0x118>)
 800858a:	4618      	mov	r0, r3
 800858c:	f002 f803 	bl	800a596 <SDMMC_CmdAppOperCommand>
 8008590:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d002      	beq.n	800859e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800859c:	e02e      	b.n	80085fc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2100      	movs	r1, #0
 80085a4:	4618      	mov	r0, r3
 80085a6:	f001 ff13 	bl	800a3d0 <SDMMC_GetResponse>
 80085aa:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	0fdb      	lsrs	r3, r3, #31
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d101      	bne.n	80085b8 <SD_PowerON+0xcc>
 80085b4:	2301      	movs	r3, #1
 80085b6:	e000      	b.n	80085ba <SD_PowerON+0xce>
 80085b8:	2300      	movs	r3, #0
 80085ba:	613b      	str	r3, [r7, #16]

    count++;
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	3301      	adds	r3, #1
 80085c0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d802      	bhi.n	80085d2 <SD_PowerON+0xe6>
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d0cc      	beq.n	800856c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085d8:	4293      	cmp	r3, r2
 80085da:	d902      	bls.n	80085e2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80085dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80085e0:	e00c      	b.n	80085fc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	645a      	str	r2, [r3, #68]	; 0x44
 80085f2:	e002      	b.n	80085fa <SD_PowerON+0x10e>
    }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3718      	adds	r7, #24
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	c1100000 	.word	0xc1100000

08008608 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
 8008614:	2300      	movs	r3, #0
 8008616:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2100      	movs	r1, #0
 800861e:	4618      	mov	r0, r3
 8008620:	f001 fed6 	bl	800a3d0 <SDMMC_GetResponse>
 8008624:	4603      	mov	r3, r0
 8008626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800862a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800862e:	d102      	bne.n	8008636 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008634:	e02f      	b.n	8008696 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	4619      	mov	r1, r3
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f000 f879 	bl	8008734 <SD_FindSCR>
 8008642:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	e023      	b.n	8008696 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008654:	2b00      	cmp	r3, #0
 8008656:	d01c      	beq.n	8008692 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681a      	ldr	r2, [r3, #0]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008660:	041b      	lsls	r3, r3, #16
 8008662:	4619      	mov	r1, r3
 8008664:	4610      	mov	r0, r2
 8008666:	f001 ff74 	bl	800a552 <SDMMC_CmdAppCommand>
 800866a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d001      	beq.n	8008676 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	e00f      	b.n	8008696 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2102      	movs	r1, #2
 800867c:	4618      	mov	r0, r3
 800867e:	f001 ffad 	bl	800a5dc <SDMMC_CmdBusWidth>
 8008682:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	e003      	b.n	8008696 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800868e:	2300      	movs	r3, #0
 8008690:	e001      	b.n	8008696 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008692:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008696:	4618      	mov	r0, r3
 8008698:	3718      	adds	r7, #24
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b086      	sub	sp, #24
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80086a6:	2300      	movs	r3, #0
 80086a8:	60fb      	str	r3, [r7, #12]
 80086aa:	2300      	movs	r3, #0
 80086ac:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2100      	movs	r1, #0
 80086b4:	4618      	mov	r0, r3
 80086b6:	f001 fe8b 	bl	800a3d0 <SDMMC_GetResponse>
 80086ba:	4603      	mov	r3, r0
 80086bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086c4:	d102      	bne.n	80086cc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80086c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086ca:	e02f      	b.n	800872c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80086cc:	f107 030c 	add.w	r3, r7, #12
 80086d0:	4619      	mov	r1, r3
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 f82e 	bl	8008734 <SD_FindSCR>
 80086d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80086e0:	697b      	ldr	r3, [r7, #20]
 80086e2:	e023      	b.n	800872c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d01c      	beq.n	8008728 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	4619      	mov	r1, r3
 80086fa:	4610      	mov	r0, r2
 80086fc:	f001 ff29 	bl	800a552 <SDMMC_CmdAppCommand>
 8008700:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d001      	beq.n	800870c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	e00f      	b.n	800872c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2100      	movs	r1, #0
 8008712:	4618      	mov	r0, r3
 8008714:	f001 ff62 	bl	800a5dc <SDMMC_CmdBusWidth>
 8008718:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d001      	beq.n	8008724 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	e003      	b.n	800872c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008724:	2300      	movs	r3, #0
 8008726:	e001      	b.n	800872c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008728:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b08f      	sub	sp, #60	; 0x3c
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
 800873c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800873e:	f7f9 fe23 	bl	8002388 <HAL_GetTick>
 8008742:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008744:	2300      	movs	r3, #0
 8008746:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008748:	2300      	movs	r3, #0
 800874a:	60bb      	str	r3, [r7, #8]
 800874c:	2300      	movs	r3, #0
 800874e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2108      	movs	r1, #8
 800875a:	4618      	mov	r0, r3
 800875c:	f001 fe77 	bl	800a44e <SDMMC_CmdBlockLength>
 8008760:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008764:	2b00      	cmp	r3, #0
 8008766:	d001      	beq.n	800876c <SD_FindSCR+0x38>
  {
    return errorstate;
 8008768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800876a:	e0a9      	b.n	80088c0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008774:	041b      	lsls	r3, r3, #16
 8008776:	4619      	mov	r1, r3
 8008778:	4610      	mov	r0, r2
 800877a:	f001 feea 	bl	800a552 <SDMMC_CmdAppCommand>
 800877e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008782:	2b00      	cmp	r3, #0
 8008784:	d001      	beq.n	800878a <SD_FindSCR+0x56>
  {
    return errorstate;
 8008786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008788:	e09a      	b.n	80088c0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800878a:	f04f 33ff 	mov.w	r3, #4294967295
 800878e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008790:	2308      	movs	r3, #8
 8008792:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008794:	2330      	movs	r3, #48	; 0x30
 8008796:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008798:	2302      	movs	r3, #2
 800879a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800879c:	2300      	movs	r3, #0
 800879e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80087a0:	2301      	movs	r3, #1
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	f107 0210 	add.w	r2, r7, #16
 80087ac:	4611      	mov	r1, r2
 80087ae:	4618      	mov	r0, r3
 80087b0:	f001 fe21 	bl	800a3f6 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f001 ff31 	bl	800a620 <SDMMC_CmdSendSCR>
 80087be:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80087c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d022      	beq.n	800880c <SD_FindSCR+0xd8>
  {
    return errorstate;
 80087c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087c8:	e07a      	b.n	80088c0 <SD_FindSCR+0x18c>
    }
  }
#else
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00e      	beq.n	80087f6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6819      	ldr	r1, [r3, #0]
 80087dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	f107 0208 	add.w	r2, r7, #8
 80087e4:	18d4      	adds	r4, r2, r3
 80087e6:	4608      	mov	r0, r1
 80087e8:	f001 fd91 	bl	800a30e <SDMMC_ReadFIFO>
 80087ec:	4603      	mov	r3, r0
 80087ee:	6023      	str	r3, [r4, #0]
      index++;
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	3301      	adds	r3, #1
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80087f6:	f7f9 fdc7 	bl	8002388 <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008804:	d102      	bne.n	800880c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008806:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800880a:	e059      	b.n	80088c0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008812:	f240 432a 	movw	r3, #1066	; 0x42a
 8008816:	4013      	ands	r3, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	d0d6      	beq.n	80087ca <SD_FindSCR+0x96>
    }
  }
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008822:	f003 0308 	and.w	r3, r3, #8
 8008826:	2b00      	cmp	r3, #0
 8008828:	d005      	beq.n	8008836 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2208      	movs	r2, #8
 8008830:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008832:	2308      	movs	r3, #8
 8008834:	e044      	b.n	80088c0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883c:	f003 0302 	and.w	r3, r3, #2
 8008840:	2b00      	cmp	r3, #0
 8008842:	d005      	beq.n	8008850 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2202      	movs	r2, #2
 800884a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800884c:	2302      	movs	r3, #2
 800884e:	e037      	b.n	80088c0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2220      	movs	r2, #32
 8008864:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008866:	2320      	movs	r3, #32
 8008868:	e02a      	b.n	80088c0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	061a      	lsls	r2, r3, #24
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	021b      	lsls	r3, r3, #8
 800887c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008880:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	0a1b      	lsrs	r3, r3, #8
 8008886:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800888a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	0e1b      	lsrs	r3, r3, #24
 8008890:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008894:	601a      	str	r2, [r3, #0]
    scr++;
 8008896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008898:	3304      	adds	r3, #4
 800889a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	061a      	lsls	r2, r3, #24
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80088a8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	0a1b      	lsrs	r3, r3, #8
 80088ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088b2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	0e1b      	lsrs	r3, r3, #24
 80088b8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80088ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088bc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	373c      	adds	r7, #60	; 0x3c
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd90      	pop	{r4, r7, pc}

080088c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e095      	b.n	8008a06 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d108      	bne.n	80088f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80088ea:	d009      	beq.n	8008900 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	61da      	str	r2, [r3, #28]
 80088f2:	e005      	b.n	8008900 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800890c:	b2db      	uxtb	r3, r3
 800890e:	2b00      	cmp	r3, #0
 8008910:	d106      	bne.n	8008920 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2200      	movs	r2, #0
 8008916:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7f9 fa9a 	bl	8001e54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2202      	movs	r2, #2
 8008924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008936:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008940:	d902      	bls.n	8008948 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008942:	2300      	movs	r3, #0
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e002      	b.n	800894e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800894c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008956:	d007      	beq.n	8008968 <HAL_SPI_Init+0xa0>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	68db      	ldr	r3, [r3, #12]
 800895c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008960:	d002      	beq.n	8008968 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008978:	431a      	orrs	r2, r3
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	f003 0302 	and.w	r3, r3, #2
 8008982:	431a      	orrs	r2, r3
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	695b      	ldr	r3, [r3, #20]
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	431a      	orrs	r2, r3
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008996:	431a      	orrs	r2, r3
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a1b      	ldr	r3, [r3, #32]
 80089a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089aa:	ea42 0103 	orr.w	r1, r2, r3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	699b      	ldr	r3, [r3, #24]
 80089c2:	0c1b      	lsrs	r3, r3, #16
 80089c4:	f003 0204 	and.w	r2, r3, #4
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f003 0308 	and.w	r3, r3, #8
 80089da:	431a      	orrs	r2, r3
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80089e4:	ea42 0103 	orr.w	r1, r2, r3
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	430a      	orrs	r2, r1
 80089f4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b088      	sub	sp, #32
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	099b      	lsrs	r3, r3, #6
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d10f      	bne.n	8008a54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a34:	69bb      	ldr	r3, [r7, #24]
 8008a36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	099b      	lsrs	r3, r3, #6
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d004      	beq.n	8008a54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
    return;
 8008a52:	e0d7      	b.n	8008c04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	085b      	lsrs	r3, r3, #1
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00a      	beq.n	8008a76 <HAL_SPI_IRQHandler+0x66>
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	09db      	lsrs	r3, r3, #7
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d004      	beq.n	8008a76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	4798      	blx	r3
    return;
 8008a74:	e0c6      	b.n	8008c04 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008a76:	69bb      	ldr	r3, [r7, #24]
 8008a78:	095b      	lsrs	r3, r3, #5
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10c      	bne.n	8008a9c <HAL_SPI_IRQHandler+0x8c>
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	099b      	lsrs	r3, r3, #6
 8008a86:	f003 0301 	and.w	r3, r3, #1
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d106      	bne.n	8008a9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	0a1b      	lsrs	r3, r3, #8
 8008a92:	f003 0301 	and.w	r3, r3, #1
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 80b4 	beq.w	8008c04 <HAL_SPI_IRQHandler+0x1f4>
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	095b      	lsrs	r3, r3, #5
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 80ad 	beq.w	8008c04 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	099b      	lsrs	r3, r3, #6
 8008aae:	f003 0301 	and.w	r3, r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d023      	beq.n	8008afe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d011      	beq.n	8008ae6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ac6:	f043 0204 	orr.w	r2, r3, #4
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ace:	2300      	movs	r3, #0
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	617b      	str	r3, [r7, #20]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	689b      	ldr	r3, [r3, #8]
 8008ae0:	617b      	str	r3, [r7, #20]
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	e00b      	b.n	8008afe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	613b      	str	r3, [r7, #16]
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	613b      	str	r3, [r7, #16]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	613b      	str	r3, [r7, #16]
 8008afa:	693b      	ldr	r3, [r7, #16]
        return;
 8008afc:	e082      	b.n	8008c04 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	095b      	lsrs	r3, r3, #5
 8008b02:	f003 0301 	and.w	r3, r3, #1
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d014      	beq.n	8008b34 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b0e:	f043 0201 	orr.w	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008b16:	2300      	movs	r3, #0
 8008b18:	60fb      	str	r3, [r7, #12]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	60fb      	str	r3, [r7, #12]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681a      	ldr	r2, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	0a1b      	lsrs	r3, r3, #8
 8008b38:	f003 0301 	and.w	r3, r3, #1
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d00c      	beq.n	8008b5a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b44:	f043 0208 	orr.w	r2, r3, #8
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60bb      	str	r3, [r7, #8]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	60bb      	str	r3, [r7, #8]
 8008b58:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d04f      	beq.n	8008c02 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	685a      	ldr	r2, [r3, #4]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008b70:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d104      	bne.n	8008b8e <HAL_SPI_IRQHandler+0x17e>
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	f003 0301 	and.w	r3, r3, #1
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d034      	beq.n	8008bf8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0203 	bic.w	r2, r2, #3
 8008b9c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d011      	beq.n	8008bca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008baa:	4a18      	ldr	r2, [pc, #96]	; (8008c0c <HAL_SPI_IRQHandler+0x1fc>)
 8008bac:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f7fa fed6 	bl	8003964 <HAL_DMA_Abort_IT>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d005      	beq.n	8008bca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d016      	beq.n	8008c00 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bd6:	4a0d      	ldr	r2, [pc, #52]	; (8008c0c <HAL_SPI_IRQHandler+0x1fc>)
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fa fec0 	bl	8003964 <HAL_DMA_Abort_IT>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8008bf6:	e003      	b.n	8008c00 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f809 	bl	8008c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8008bfe:	e000      	b.n	8008c02 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8008c00:	bf00      	nop
    return;
 8008c02:	bf00      	nop
  }
}
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	08008c25 	.word	0x08008c25

08008c10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f7ff ffe5 	bl	8008c10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	b084      	sub	sp, #16
 8008c52:	af00      	add	r7, sp, #0
 8008c54:	60f8      	str	r0, [r7, #12]
 8008c56:	60b9      	str	r1, [r7, #8]
 8008c58:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e038      	b.n	8008cd6 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d106      	bne.n	8008c7e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2200      	movs	r2, #0
 8008c74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7f9 fa09 	bl	8002090 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3308      	adds	r3, #8
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f001 f9fb 	bl	800a084 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	461a      	mov	r2, r3
 8008c98:	68b9      	ldr	r1, [r7, #8]
 8008c9a:	f001 fa83 	bl	800a1a4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6858      	ldr	r0, [r3, #4]
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	689a      	ldr	r2, [r3, #8]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	f001 faca 	bl	800a244 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68fa      	ldr	r2, [r7, #12]
 8008cb6:	6892      	ldr	r2, [r2, #8]
 8008cb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	6892      	ldr	r2, [r2, #8]
 8008cc4:	f041 0101 	orr.w	r1, r1, #1
 8008cc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2201      	movs	r2, #1
 8008cd0:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b082      	sub	sp, #8
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d101      	bne.n	8008cf0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e040      	b.n	8008d72 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d106      	bne.n	8008d06 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7f8 feb3 	bl	8001a6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2224      	movs	r2, #36	; 0x24
 8008d0a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	681a      	ldr	r2, [r3, #0]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f022 0201 	bic.w	r2, r2, #1
 8008d1a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc9d 	bl	800965c <UART_SetConfig>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	d101      	bne.n	8008d2c <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e022      	b.n	8008d72 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d002      	beq.n	8008d3a <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 ff49 	bl	8009bcc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	681a      	ldr	r2, [r3, #0]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f042 0201 	orr.w	r2, r2, #1
 8008d68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 ffd0 	bl	8009d10 <UART_CheckIdleState>
 8008d70:	4603      	mov	r3, r0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}

08008d7a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b08a      	sub	sp, #40	; 0x28
 8008d7e:	af02      	add	r7, sp, #8
 8008d80:	60f8      	str	r0, [r7, #12]
 8008d82:	60b9      	str	r1, [r7, #8]
 8008d84:	603b      	str	r3, [r7, #0]
 8008d86:	4613      	mov	r3, r2
 8008d88:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d8e:	2b20      	cmp	r3, #32
 8008d90:	f040 8082 	bne.w	8008e98 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d002      	beq.n	8008da0 <HAL_UART_Transmit+0x26>
 8008d9a:	88fb      	ldrh	r3, [r7, #6]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008da0:	2301      	movs	r3, #1
 8008da2:	e07a      	b.n	8008e9a <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d101      	bne.n	8008db2 <HAL_UART_Transmit+0x38>
 8008dae:	2302      	movs	r3, #2
 8008db0:	e073      	b.n	8008e9a <HAL_UART_Transmit+0x120>
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2221      	movs	r2, #33	; 0x21
 8008dc6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008dc8:	f7f9 fade 	bl	8002388 <HAL_GetTick>
 8008dcc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	88fa      	ldrh	r2, [r7, #6]
 8008dd2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	88fa      	ldrh	r2, [r7, #6]
 8008dda:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008de6:	d108      	bne.n	8008dfa <HAL_UART_Transmit+0x80>
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d104      	bne.n	8008dfa <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	61bb      	str	r3, [r7, #24]
 8008df8:	e003      	b.n	8008e02 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dfe:	2300      	movs	r3, #0
 8008e00:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	2200      	movs	r2, #0
 8008e06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008e0a:	e02d      	b.n	8008e68 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	2200      	movs	r2, #0
 8008e14:	2180      	movs	r1, #128	; 0x80
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 ffc3 	bl	8009da2 <UART_WaitOnFlagUntilTimeout>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008e22:	2303      	movs	r3, #3
 8008e24:	e039      	b.n	8008e9a <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10b      	bne.n	8008e44 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	881a      	ldrh	r2, [r3, #0]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e38:	b292      	uxth	r2, r2
 8008e3a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	3302      	adds	r3, #2
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	e008      	b.n	8008e56 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	781a      	ldrb	r2, [r3, #0]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	b292      	uxth	r2, r2
 8008e4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	3301      	adds	r3, #1
 8008e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	3b01      	subs	r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d1cb      	bne.n	8008e0c <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2140      	movs	r1, #64	; 0x40
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 ff8f 	bl	8009da2 <UART_WaitOnFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e005      	b.n	8008e9a <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2220      	movs	r2, #32
 8008e92:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008e94:	2300      	movs	r3, #0
 8008e96:	e000      	b.n	8008e9a <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8008e98:	2302      	movs	r3, #2
  }
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3720      	adds	r7, #32
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}

08008ea2 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b08a      	sub	sp, #40	; 0x28
 8008ea6:	af02      	add	r7, sp, #8
 8008ea8:	60f8      	str	r0, [r7, #12]
 8008eaa:	60b9      	str	r1, [r7, #8]
 8008eac:	603b      	str	r3, [r7, #0]
 8008eae:	4613      	mov	r3, r2
 8008eb0:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eb6:	2b20      	cmp	r3, #32
 8008eb8:	f040 80bf 	bne.w	800903a <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d002      	beq.n	8008ec8 <HAL_UART_Receive+0x26>
 8008ec2:	88fb      	ldrh	r3, [r7, #6]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d101      	bne.n	8008ecc <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	e0b7      	b.n	800903c <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Receive+0x38>
 8008ed6:	2302      	movs	r3, #2
 8008ed8:	e0b0      	b.n	800903c <HAL_UART_Receive+0x19a>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2201      	movs	r2, #1
 8008ede:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2222      	movs	r2, #34	; 0x22
 8008eee:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ef6:	f7f9 fa47 	bl	8002388 <HAL_GetTick>
 8008efa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f14:	d10e      	bne.n	8008f34 <HAL_UART_Receive+0x92>
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d105      	bne.n	8008f2a <HAL_UART_Receive+0x88>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f28:	e02d      	b.n	8008f86 <HAL_UART_Receive+0xe4>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	22ff      	movs	r2, #255	; 0xff
 8008f2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f32:	e028      	b.n	8008f86 <HAL_UART_Receive+0xe4>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	689b      	ldr	r3, [r3, #8]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10d      	bne.n	8008f58 <HAL_UART_Receive+0xb6>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d104      	bne.n	8008f4e <HAL_UART_Receive+0xac>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	22ff      	movs	r2, #255	; 0xff
 8008f48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f4c:	e01b      	b.n	8008f86 <HAL_UART_Receive+0xe4>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	227f      	movs	r2, #127	; 0x7f
 8008f52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f56:	e016      	b.n	8008f86 <HAL_UART_Receive+0xe4>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f60:	d10d      	bne.n	8008f7e <HAL_UART_Receive+0xdc>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <HAL_UART_Receive+0xd2>
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	227f      	movs	r2, #127	; 0x7f
 8008f6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f72:	e008      	b.n	8008f86 <HAL_UART_Receive+0xe4>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	223f      	movs	r2, #63	; 0x3f
 8008f78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008f7c:	e003      	b.n	8008f86 <HAL_UART_Receive+0xe4>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f8c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f96:	d108      	bne.n	8008faa <HAL_UART_Receive+0x108>
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	691b      	ldr	r3, [r3, #16]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d104      	bne.n	8008faa <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	61bb      	str	r3, [r7, #24]
 8008fa8:	e003      	b.n	8008fb2 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8008fba:	e033      	b.n	8009024 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	9300      	str	r3, [sp, #0]
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	2120      	movs	r1, #32
 8008fc6:	68f8      	ldr	r0, [r7, #12]
 8008fc8:	f000 feeb 	bl	8009da2 <UART_WaitOnFlagUntilTimeout>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d001      	beq.n	8008fd6 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8008fd2:	2303      	movs	r3, #3
 8008fd4:	e032      	b.n	800903c <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10c      	bne.n	8008ff6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	8a7b      	ldrh	r3, [r7, #18]
 8008fe6:	4013      	ands	r3, r2
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	69bb      	ldr	r3, [r7, #24]
 8008fec:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008fee:	69bb      	ldr	r3, [r7, #24]
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	e00d      	b.n	8009012 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	8a7b      	ldrh	r3, [r7, #18]
 8009002:	b2db      	uxtb	r3, r3
 8009004:	4013      	ands	r3, r2
 8009006:	b2da      	uxtb	r2, r3
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800900c:	69fb      	ldr	r3, [r7, #28]
 800900e:	3301      	adds	r3, #1
 8009010:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009018:	b29b      	uxth	r3, r3
 800901a:	3b01      	subs	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800902a:	b29b      	uxth	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1c5      	bne.n	8008fbc <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2220      	movs	r2, #32
 8009034:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	e000      	b.n	800903c <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800903a:	2302      	movs	r3, #2
  }
}
 800903c:	4618      	mov	r0, r3
 800903e:	3720      	adds	r7, #32
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b0ba      	sub	sp, #232	; 0xe8
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	69db      	ldr	r3, [r3, #28]
 8009052:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800906a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800906e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009072:	4013      	ands	r3, r2
 8009074:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009078:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800907c:	2b00      	cmp	r3, #0
 800907e:	d115      	bne.n	80090ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009084:	f003 0320 	and.w	r3, r3, #32
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00f      	beq.n	80090ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800908c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b00      	cmp	r3, #0
 8009096:	d009      	beq.n	80090ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 82a6 	beq.w	80095ee <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	4798      	blx	r3
      }
      return;
 80090aa:	e2a0      	b.n	80095ee <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80090ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	f000 8117 	beq.w	80092e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80090b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ba:	f003 0301 	and.w	r3, r3, #1
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d106      	bne.n	80090d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80090c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80090c6:	4b85      	ldr	r3, [pc, #532]	; (80092dc <HAL_UART_IRQHandler+0x298>)
 80090c8:	4013      	ands	r3, r2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 810a 	beq.w	80092e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80090d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090d4:	f003 0301 	and.w	r3, r3, #1
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d011      	beq.n	8009100 <HAL_UART_IRQHandler+0xbc>
 80090dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d00b      	beq.n	8009100 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2201      	movs	r2, #1
 80090ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090f6:	f043 0201 	orr.w	r2, r3, #1
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d011      	beq.n	8009130 <HAL_UART_IRQHandler+0xec>
 800910c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009110:	f003 0301 	and.w	r3, r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00b      	beq.n	8009130 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2202      	movs	r2, #2
 800911e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009126:	f043 0204 	orr.w	r2, r3, #4
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b00      	cmp	r3, #0
 800913a:	d011      	beq.n	8009160 <HAL_UART_IRQHandler+0x11c>
 800913c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009140:	f003 0301 	and.w	r3, r3, #1
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	2204      	movs	r2, #4
 800914e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009156:	f043 0202 	orr.w	r2, r3, #2
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009164:	f003 0308 	and.w	r3, r3, #8
 8009168:	2b00      	cmp	r3, #0
 800916a:	d017      	beq.n	800919c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800916c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009170:	f003 0320 	and.w	r3, r3, #32
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009178:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800917c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00b      	beq.n	800919c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2208      	movs	r2, #8
 800918a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009192:	f043 0208 	orr.w	r2, r3, #8
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d012      	beq.n	80091ce <HAL_UART_IRQHandler+0x18a>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d00c      	beq.n	80091ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80091bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091c4:	f043 0220 	orr.w	r2, r3, #32
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	f000 820c 	beq.w	80095f2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80091da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091de:	f003 0320 	and.w	r3, r3, #32
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d00d      	beq.n	8009202 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80091e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d007      	beq.n	8009202 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d003      	beq.n	8009202 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009208:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009216:	2b40      	cmp	r3, #64	; 0x40
 8009218:	d005      	beq.n	8009226 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800921a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800921e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009222:	2b00      	cmp	r3, #0
 8009224:	d04f      	beq.n	80092c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fe7f 	bl	8009f2a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009236:	2b40      	cmp	r3, #64	; 0x40
 8009238:	d141      	bne.n	80092be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	3308      	adds	r3, #8
 8009240:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009248:	e853 3f00 	ldrex	r3, [r3]
 800924c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009250:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009258:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	3308      	adds	r3, #8
 8009262:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009266:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800926a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800926e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009272:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009276:	e841 2300 	strex	r3, r2, [r1]
 800927a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800927e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1d9      	bne.n	800923a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928a:	2b00      	cmp	r3, #0
 800928c:	d013      	beq.n	80092b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009292:	4a13      	ldr	r2, [pc, #76]	; (80092e0 <HAL_UART_IRQHandler+0x29c>)
 8009294:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800929a:	4618      	mov	r0, r3
 800929c:	f7fa fb62 	bl	8003964 <HAL_DMA_Abort_IT>
 80092a0:	4603      	mov	r3, r0
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d017      	beq.n	80092d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80092b0:	4610      	mov	r0, r2
 80092b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092b4:	e00f      	b.n	80092d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f9ba 	bl	8009630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092bc:	e00b      	b.n	80092d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f000 f9b6 	bl	8009630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c4:	e007      	b.n	80092d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 f9b2 	bl	8009630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80092d4:	e18d      	b.n	80095f2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d6:	bf00      	nop
    return;
 80092d8:	e18b      	b.n	80095f2 <HAL_UART_IRQHandler+0x5ae>
 80092da:	bf00      	nop
 80092dc:	04000120 	.word	0x04000120
 80092e0:	08009ff1 	.word	0x08009ff1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	f040 8146 	bne.w	800957a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80092ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	f000 813f 	beq.w	800957a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80092fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009300:	f003 0310 	and.w	r3, r3, #16
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8138 	beq.w	800957a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	2210      	movs	r2, #16
 8009310:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800931c:	2b40      	cmp	r3, #64	; 0x40
 800931e:	f040 80b4 	bne.w	800948a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800932e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009332:	2b00      	cmp	r3, #0
 8009334:	f000 815f 	beq.w	80095f6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800933e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009342:	429a      	cmp	r2, r3
 8009344:	f080 8157 	bcs.w	80095f6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800934e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 0320 	and.w	r3, r3, #32
 800935e:	2b00      	cmp	r3, #0
 8009360:	f040 8085 	bne.w	800946e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800936c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009370:	e853 3f00 	ldrex	r3, [r3]
 8009374:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009378:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800937c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009380:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	461a      	mov	r2, r3
 800938a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800938e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009392:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009396:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800939a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800939e:	e841 2300 	strex	r3, r2, [r1]
 80093a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80093a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d1da      	bne.n	8009364 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80093b8:	e853 3f00 	ldrex	r3, [r3]
 80093bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80093be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093c0:	f023 0301 	bic.w	r3, r3, #1
 80093c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	3308      	adds	r3, #8
 80093ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80093d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80093d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80093da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80093de:	e841 2300 	strex	r3, r2, [r1]
 80093e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d1e1      	bne.n	80093ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093f4:	e853 3f00 	ldrex	r3, [r3]
 80093f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009400:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	3308      	adds	r3, #8
 800940a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800940e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009410:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009412:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009414:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009416:	e841 2300 	strex	r3, r2, [r1]
 800941a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800941c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800941e:	2b00      	cmp	r3, #0
 8009420:	d1e3      	bne.n	80093ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2220      	movs	r2, #32
 8009426:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009436:	e853 3f00 	ldrex	r3, [r3]
 800943a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800943e:	f023 0310 	bic.w	r3, r3, #16
 8009442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009450:	65bb      	str	r3, [r7, #88]	; 0x58
 8009452:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009454:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009456:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009458:	e841 2300 	strex	r3, r2, [r1]
 800945c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800945e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009460:	2b00      	cmp	r3, #0
 8009462:	d1e4      	bne.n	800942e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009468:	4618      	mov	r0, r3
 800946a:	f7fa fa3d 	bl	80038e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800947a:	b29b      	uxth	r3, r3
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	b29b      	uxth	r3, r3
 8009480:	4619      	mov	r1, r3
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 f8de 	bl	8009644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009488:	e0b5      	b.n	80095f6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009496:	b29b      	uxth	r3, r3
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 80a7 	beq.w	80095fa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80094ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f000 80a2 	beq.w	80095fa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80094ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80094d8:	647b      	str	r3, [r7, #68]	; 0x44
 80094da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094e0:	e841 2300 	strex	r3, r2, [r1]
 80094e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1e4      	bne.n	80094b6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	3308      	adds	r3, #8
 80094f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	e853 3f00 	ldrex	r3, [r3]
 80094fa:	623b      	str	r3, [r7, #32]
   return(result);
 80094fc:	6a3b      	ldr	r3, [r7, #32]
 80094fe:	f023 0301 	bic.w	r3, r3, #1
 8009502:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3308      	adds	r3, #8
 800950c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009510:	633a      	str	r2, [r7, #48]	; 0x30
 8009512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009518:	e841 2300 	strex	r3, r2, [r1]
 800951c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800951e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009520:	2b00      	cmp	r3, #0
 8009522:	d1e3      	bne.n	80094ec <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2220      	movs	r2, #32
 8009528:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	60fb      	str	r3, [r7, #12]
   return(result);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	f023 0310 	bic.w	r3, r3, #16
 800954a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009558:	61fb      	str	r3, [r7, #28]
 800955a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	69b9      	ldr	r1, [r7, #24]
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	617b      	str	r3, [r7, #20]
   return(result);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e4      	bne.n	8009536 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800956c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f866 	bl	8009644 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009578:	e03f      	b.n	80095fa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800957a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009582:	2b00      	cmp	r3, #0
 8009584:	d00e      	beq.n	80095a4 <HAL_UART_IRQHandler+0x560>
 8009586:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800958a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800958e:	2b00      	cmp	r3, #0
 8009590:	d008      	beq.n	80095a4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800959a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800959c:	6878      	ldr	r0, [r7, #4]
 800959e:	f000 fd67 	bl	800a070 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80095a2:	e02d      	b.n	8009600 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80095a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00e      	beq.n	80095ce <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80095b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d008      	beq.n	80095ce <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d01c      	beq.n	80095fe <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	4798      	blx	r3
    }
    return;
 80095cc:	e017      	b.n	80095fe <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80095ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d012      	beq.n	8009600 <HAL_UART_IRQHandler+0x5bc>
 80095da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00c      	beq.n	8009600 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f000 fd18 	bl	800a01c <UART_EndTransmit_IT>
    return;
 80095ec:	e008      	b.n	8009600 <HAL_UART_IRQHandler+0x5bc>
      return;
 80095ee:	bf00      	nop
 80095f0:	e006      	b.n	8009600 <HAL_UART_IRQHandler+0x5bc>
    return;
 80095f2:	bf00      	nop
 80095f4:	e004      	b.n	8009600 <HAL_UART_IRQHandler+0x5bc>
      return;
 80095f6:	bf00      	nop
 80095f8:	e002      	b.n	8009600 <HAL_UART_IRQHandler+0x5bc>
      return;
 80095fa:	bf00      	nop
 80095fc:	e000      	b.n	8009600 <HAL_UART_IRQHandler+0x5bc>
    return;
 80095fe:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009600:	37e8      	adds	r7, #232	; 0xe8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop

08009608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009610:	bf00      	nop
 8009612:	370c      	adds	r7, #12
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
  void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800961c:	b480      	push	{r7}
 800961e:	b083      	sub	sp, #12
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]


  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009624:	bf00      	nop
 8009626:	370c      	adds	r7, #12
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr

08009630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009630:	b480      	push	{r7}
 8009632:	b083      	sub	sp, #12
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009650:	bf00      	nop
 8009652:	370c      	adds	r7, #12
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800965c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009660:	b08a      	sub	sp, #40	; 0x28
 8009662:	af00      	add	r7, sp, #0
 8009664:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	689a      	ldr	r2, [r3, #8]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	431a      	orrs	r2, r3
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	695b      	ldr	r3, [r3, #20]
 800967a:	431a      	orrs	r2, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	4313      	orrs	r3, r2
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4ba4      	ldr	r3, [pc, #656]	; (800991c <UART_SetConfig+0x2c0>)
 800968c:	4013      	ands	r3, r2
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	6812      	ldr	r2, [r2, #0]
 8009692:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009694:	430b      	orrs	r3, r1
 8009696:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	68da      	ldr	r2, [r3, #12]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	430a      	orrs	r2, r1
 80096ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a99      	ldr	r2, [pc, #612]	; (8009920 <UART_SetConfig+0x2c4>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d004      	beq.n	80096c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6a1b      	ldr	r3, [r3, #32]
 80096c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c4:	4313      	orrs	r3, r2
 80096c6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096d8:	430a      	orrs	r2, r1
 80096da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a90      	ldr	r2, [pc, #576]	; (8009924 <UART_SetConfig+0x2c8>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d126      	bne.n	8009734 <UART_SetConfig+0xd8>
 80096e6:	4b90      	ldr	r3, [pc, #576]	; (8009928 <UART_SetConfig+0x2cc>)
 80096e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ec:	f003 0303 	and.w	r3, r3, #3
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d81b      	bhi.n	800972c <UART_SetConfig+0xd0>
 80096f4:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <UART_SetConfig+0xa0>)
 80096f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fa:	bf00      	nop
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	0800971d 	.word	0x0800971d
 8009704:	08009715 	.word	0x08009715
 8009708:	08009725 	.word	0x08009725
 800970c:	2301      	movs	r3, #1
 800970e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009712:	e116      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009714:	2302      	movs	r3, #2
 8009716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800971a:	e112      	b.n	8009942 <UART_SetConfig+0x2e6>
 800971c:	2304      	movs	r3, #4
 800971e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009722:	e10e      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009724:	2308      	movs	r3, #8
 8009726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800972a:	e10a      	b.n	8009942 <UART_SetConfig+0x2e6>
 800972c:	2310      	movs	r3, #16
 800972e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009732:	e106      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a7c      	ldr	r2, [pc, #496]	; (800992c <UART_SetConfig+0x2d0>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d138      	bne.n	80097b0 <UART_SetConfig+0x154>
 800973e:	4b7a      	ldr	r3, [pc, #488]	; (8009928 <UART_SetConfig+0x2cc>)
 8009740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009744:	f003 030c 	and.w	r3, r3, #12
 8009748:	2b0c      	cmp	r3, #12
 800974a:	d82d      	bhi.n	80097a8 <UART_SetConfig+0x14c>
 800974c:	a201      	add	r2, pc, #4	; (adr r2, 8009754 <UART_SetConfig+0xf8>)
 800974e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009752:	bf00      	nop
 8009754:	08009789 	.word	0x08009789
 8009758:	080097a9 	.word	0x080097a9
 800975c:	080097a9 	.word	0x080097a9
 8009760:	080097a9 	.word	0x080097a9
 8009764:	08009799 	.word	0x08009799
 8009768:	080097a9 	.word	0x080097a9
 800976c:	080097a9 	.word	0x080097a9
 8009770:	080097a9 	.word	0x080097a9
 8009774:	08009791 	.word	0x08009791
 8009778:	080097a9 	.word	0x080097a9
 800977c:	080097a9 	.word	0x080097a9
 8009780:	080097a9 	.word	0x080097a9
 8009784:	080097a1 	.word	0x080097a1
 8009788:	2300      	movs	r3, #0
 800978a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800978e:	e0d8      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009790:	2302      	movs	r3, #2
 8009792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009796:	e0d4      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009798:	2304      	movs	r3, #4
 800979a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800979e:	e0d0      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097a0:	2308      	movs	r3, #8
 80097a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097a6:	e0cc      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097a8:	2310      	movs	r3, #16
 80097aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ae:	e0c8      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a5e      	ldr	r2, [pc, #376]	; (8009930 <UART_SetConfig+0x2d4>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d125      	bne.n	8009806 <UART_SetConfig+0x1aa>
 80097ba:	4b5b      	ldr	r3, [pc, #364]	; (8009928 <UART_SetConfig+0x2cc>)
 80097bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097c0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80097c4:	2b30      	cmp	r3, #48	; 0x30
 80097c6:	d016      	beq.n	80097f6 <UART_SetConfig+0x19a>
 80097c8:	2b30      	cmp	r3, #48	; 0x30
 80097ca:	d818      	bhi.n	80097fe <UART_SetConfig+0x1a2>
 80097cc:	2b20      	cmp	r3, #32
 80097ce:	d00a      	beq.n	80097e6 <UART_SetConfig+0x18a>
 80097d0:	2b20      	cmp	r3, #32
 80097d2:	d814      	bhi.n	80097fe <UART_SetConfig+0x1a2>
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d002      	beq.n	80097de <UART_SetConfig+0x182>
 80097d8:	2b10      	cmp	r3, #16
 80097da:	d008      	beq.n	80097ee <UART_SetConfig+0x192>
 80097dc:	e00f      	b.n	80097fe <UART_SetConfig+0x1a2>
 80097de:	2300      	movs	r3, #0
 80097e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097e4:	e0ad      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097e6:	2302      	movs	r3, #2
 80097e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ec:	e0a9      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097ee:	2304      	movs	r3, #4
 80097f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097f4:	e0a5      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097f6:	2308      	movs	r3, #8
 80097f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097fc:	e0a1      	b.n	8009942 <UART_SetConfig+0x2e6>
 80097fe:	2310      	movs	r3, #16
 8009800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009804:	e09d      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a4a      	ldr	r2, [pc, #296]	; (8009934 <UART_SetConfig+0x2d8>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d125      	bne.n	800985c <UART_SetConfig+0x200>
 8009810:	4b45      	ldr	r3, [pc, #276]	; (8009928 <UART_SetConfig+0x2cc>)
 8009812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009816:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800981a:	2bc0      	cmp	r3, #192	; 0xc0
 800981c:	d016      	beq.n	800984c <UART_SetConfig+0x1f0>
 800981e:	2bc0      	cmp	r3, #192	; 0xc0
 8009820:	d818      	bhi.n	8009854 <UART_SetConfig+0x1f8>
 8009822:	2b80      	cmp	r3, #128	; 0x80
 8009824:	d00a      	beq.n	800983c <UART_SetConfig+0x1e0>
 8009826:	2b80      	cmp	r3, #128	; 0x80
 8009828:	d814      	bhi.n	8009854 <UART_SetConfig+0x1f8>
 800982a:	2b00      	cmp	r3, #0
 800982c:	d002      	beq.n	8009834 <UART_SetConfig+0x1d8>
 800982e:	2b40      	cmp	r3, #64	; 0x40
 8009830:	d008      	beq.n	8009844 <UART_SetConfig+0x1e8>
 8009832:	e00f      	b.n	8009854 <UART_SetConfig+0x1f8>
 8009834:	2300      	movs	r3, #0
 8009836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800983a:	e082      	b.n	8009942 <UART_SetConfig+0x2e6>
 800983c:	2302      	movs	r3, #2
 800983e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009842:	e07e      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009844:	2304      	movs	r3, #4
 8009846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800984a:	e07a      	b.n	8009942 <UART_SetConfig+0x2e6>
 800984c:	2308      	movs	r3, #8
 800984e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009852:	e076      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009854:	2310      	movs	r3, #16
 8009856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800985a:	e072      	b.n	8009942 <UART_SetConfig+0x2e6>
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a35      	ldr	r2, [pc, #212]	; (8009938 <UART_SetConfig+0x2dc>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d12a      	bne.n	80098bc <UART_SetConfig+0x260>
 8009866:	4b30      	ldr	r3, [pc, #192]	; (8009928 <UART_SetConfig+0x2cc>)
 8009868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800986c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009870:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009874:	d01a      	beq.n	80098ac <UART_SetConfig+0x250>
 8009876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800987a:	d81b      	bhi.n	80098b4 <UART_SetConfig+0x258>
 800987c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009880:	d00c      	beq.n	800989c <UART_SetConfig+0x240>
 8009882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009886:	d815      	bhi.n	80098b4 <UART_SetConfig+0x258>
 8009888:	2b00      	cmp	r3, #0
 800988a:	d003      	beq.n	8009894 <UART_SetConfig+0x238>
 800988c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009890:	d008      	beq.n	80098a4 <UART_SetConfig+0x248>
 8009892:	e00f      	b.n	80098b4 <UART_SetConfig+0x258>
 8009894:	2300      	movs	r3, #0
 8009896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800989a:	e052      	b.n	8009942 <UART_SetConfig+0x2e6>
 800989c:	2302      	movs	r3, #2
 800989e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098a2:	e04e      	b.n	8009942 <UART_SetConfig+0x2e6>
 80098a4:	2304      	movs	r3, #4
 80098a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098aa:	e04a      	b.n	8009942 <UART_SetConfig+0x2e6>
 80098ac:	2308      	movs	r3, #8
 80098ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098b2:	e046      	b.n	8009942 <UART_SetConfig+0x2e6>
 80098b4:	2310      	movs	r3, #16
 80098b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098ba:	e042      	b.n	8009942 <UART_SetConfig+0x2e6>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a17      	ldr	r2, [pc, #92]	; (8009920 <UART_SetConfig+0x2c4>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d13a      	bne.n	800993c <UART_SetConfig+0x2e0>
 80098c6:	4b18      	ldr	r3, [pc, #96]	; (8009928 <UART_SetConfig+0x2cc>)
 80098c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80098d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098d4:	d01a      	beq.n	800990c <UART_SetConfig+0x2b0>
 80098d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80098da:	d81b      	bhi.n	8009914 <UART_SetConfig+0x2b8>
 80098dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e0:	d00c      	beq.n	80098fc <UART_SetConfig+0x2a0>
 80098e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098e6:	d815      	bhi.n	8009914 <UART_SetConfig+0x2b8>
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <UART_SetConfig+0x298>
 80098ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098f0:	d008      	beq.n	8009904 <UART_SetConfig+0x2a8>
 80098f2:	e00f      	b.n	8009914 <UART_SetConfig+0x2b8>
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80098fa:	e022      	b.n	8009942 <UART_SetConfig+0x2e6>
 80098fc:	2302      	movs	r3, #2
 80098fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009902:	e01e      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009904:	2304      	movs	r3, #4
 8009906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800990a:	e01a      	b.n	8009942 <UART_SetConfig+0x2e6>
 800990c:	2308      	movs	r3, #8
 800990e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009912:	e016      	b.n	8009942 <UART_SetConfig+0x2e6>
 8009914:	2310      	movs	r3, #16
 8009916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800991a:	e012      	b.n	8009942 <UART_SetConfig+0x2e6>
 800991c:	efff69f3 	.word	0xefff69f3
 8009920:	40008000 	.word	0x40008000
 8009924:	40013800 	.word	0x40013800
 8009928:	40021000 	.word	0x40021000
 800992c:	40004400 	.word	0x40004400
 8009930:	40004800 	.word	0x40004800
 8009934:	40004c00 	.word	0x40004c00
 8009938:	40005000 	.word	0x40005000
 800993c:	2310      	movs	r3, #16
 800993e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a9f      	ldr	r2, [pc, #636]	; (8009bc4 <UART_SetConfig+0x568>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d17a      	bne.n	8009a42 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800994c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009950:	2b08      	cmp	r3, #8
 8009952:	d824      	bhi.n	800999e <UART_SetConfig+0x342>
 8009954:	a201      	add	r2, pc, #4	; (adr r2, 800995c <UART_SetConfig+0x300>)
 8009956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800995a:	bf00      	nop
 800995c:	08009981 	.word	0x08009981
 8009960:	0800999f 	.word	0x0800999f
 8009964:	08009989 	.word	0x08009989
 8009968:	0800999f 	.word	0x0800999f
 800996c:	0800998f 	.word	0x0800998f
 8009970:	0800999f 	.word	0x0800999f
 8009974:	0800999f 	.word	0x0800999f
 8009978:	0800999f 	.word	0x0800999f
 800997c:	08009997 	.word	0x08009997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009980:	f7fc fbe4 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8009984:	61f8      	str	r0, [r7, #28]
        break;
 8009986:	e010      	b.n	80099aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009988:	4b8f      	ldr	r3, [pc, #572]	; (8009bc8 <UART_SetConfig+0x56c>)
 800998a:	61fb      	str	r3, [r7, #28]
        break;
 800998c:	e00d      	b.n	80099aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800998e:	f7fc fb45 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8009992:	61f8      	str	r0, [r7, #28]
        break;
 8009994:	e009      	b.n	80099aa <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800999a:	61fb      	str	r3, [r7, #28]
        break;
 800999c:	e005      	b.n	80099aa <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800999e:	2300      	movs	r3, #0
 80099a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80099a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 80fb 	beq.w	8009ba8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	4613      	mov	r3, r2
 80099b8:	005b      	lsls	r3, r3, #1
 80099ba:	4413      	add	r3, r2
 80099bc:	69fa      	ldr	r2, [r7, #28]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d305      	bcc.n	80099ce <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80099c8:	69fa      	ldr	r2, [r7, #28]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d903      	bls.n	80099d6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80099ce:	2301      	movs	r3, #1
 80099d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80099d4:	e0e8      	b.n	8009ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	2200      	movs	r2, #0
 80099da:	461c      	mov	r4, r3
 80099dc:	4615      	mov	r5, r2
 80099de:	f04f 0200 	mov.w	r2, #0
 80099e2:	f04f 0300 	mov.w	r3, #0
 80099e6:	022b      	lsls	r3, r5, #8
 80099e8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80099ec:	0222      	lsls	r2, r4, #8
 80099ee:	68f9      	ldr	r1, [r7, #12]
 80099f0:	6849      	ldr	r1, [r1, #4]
 80099f2:	0849      	lsrs	r1, r1, #1
 80099f4:	2000      	movs	r0, #0
 80099f6:	4688      	mov	r8, r1
 80099f8:	4681      	mov	r9, r0
 80099fa:	eb12 0a08 	adds.w	sl, r2, r8
 80099fe:	eb43 0b09 	adc.w	fp, r3, r9
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	603b      	str	r3, [r7, #0]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a10:	4650      	mov	r0, sl
 8009a12:	4659      	mov	r1, fp
 8009a14:	f7f6 fbf2 	bl	80001fc <__aeabi_uldivmod>
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4613      	mov	r3, r2
 8009a1e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a26:	d308      	bcc.n	8009a3a <UART_SetConfig+0x3de>
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a2e:	d204      	bcs.n	8009a3a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	60da      	str	r2, [r3, #12]
 8009a38:	e0b6      	b.n	8009ba8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009a40:	e0b2      	b.n	8009ba8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	69db      	ldr	r3, [r3, #28]
 8009a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a4a:	d15e      	bne.n	8009b0a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009a4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a50:	2b08      	cmp	r3, #8
 8009a52:	d828      	bhi.n	8009aa6 <UART_SetConfig+0x44a>
 8009a54:	a201      	add	r2, pc, #4	; (adr r2, 8009a5c <UART_SetConfig+0x400>)
 8009a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a5a:	bf00      	nop
 8009a5c:	08009a81 	.word	0x08009a81
 8009a60:	08009a89 	.word	0x08009a89
 8009a64:	08009a91 	.word	0x08009a91
 8009a68:	08009aa7 	.word	0x08009aa7
 8009a6c:	08009a97 	.word	0x08009a97
 8009a70:	08009aa7 	.word	0x08009aa7
 8009a74:	08009aa7 	.word	0x08009aa7
 8009a78:	08009aa7 	.word	0x08009aa7
 8009a7c:	08009a9f 	.word	0x08009a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a80:	f7fc fb64 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8009a84:	61f8      	str	r0, [r7, #28]
        break;
 8009a86:	e014      	b.n	8009ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a88:	f7fc fb76 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 8009a8c:	61f8      	str	r0, [r7, #28]
        break;
 8009a8e:	e010      	b.n	8009ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a90:	4b4d      	ldr	r3, [pc, #308]	; (8009bc8 <UART_SetConfig+0x56c>)
 8009a92:	61fb      	str	r3, [r7, #28]
        break;
 8009a94:	e00d      	b.n	8009ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a96:	f7fc fac1 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8009a9a:	61f8      	str	r0, [r7, #28]
        break;
 8009a9c:	e009      	b.n	8009ab2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009aa2:	61fb      	str	r3, [r7, #28]
        break;
 8009aa4:	e005      	b.n	8009ab2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009ab0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d077      	beq.n	8009ba8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009ab8:	69fb      	ldr	r3, [r7, #28]
 8009aba:	005a      	lsls	r2, r3, #1
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	085b      	lsrs	r3, r3, #1
 8009ac2:	441a      	add	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8009acc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ace:	69bb      	ldr	r3, [r7, #24]
 8009ad0:	2b0f      	cmp	r3, #15
 8009ad2:	d916      	bls.n	8009b02 <UART_SetConfig+0x4a6>
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ada:	d212      	bcs.n	8009b02 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	f023 030f 	bic.w	r3, r3, #15
 8009ae4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ae6:	69bb      	ldr	r3, [r7, #24]
 8009ae8:	085b      	lsrs	r3, r3, #1
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	8afb      	ldrh	r3, [r7, #22]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	8afa      	ldrh	r2, [r7, #22]
 8009afe:	60da      	str	r2, [r3, #12]
 8009b00:	e052      	b.n	8009ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009b08:	e04e      	b.n	8009ba8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009b0e:	2b08      	cmp	r3, #8
 8009b10:	d827      	bhi.n	8009b62 <UART_SetConfig+0x506>
 8009b12:	a201      	add	r2, pc, #4	; (adr r2, 8009b18 <UART_SetConfig+0x4bc>)
 8009b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b18:	08009b3d 	.word	0x08009b3d
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b4d 	.word	0x08009b4d
 8009b24:	08009b63 	.word	0x08009b63
 8009b28:	08009b53 	.word	0x08009b53
 8009b2c:	08009b63 	.word	0x08009b63
 8009b30:	08009b63 	.word	0x08009b63
 8009b34:	08009b63 	.word	0x08009b63
 8009b38:	08009b5b 	.word	0x08009b5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b3c:	f7fc fb06 	bl	800614c <HAL_RCC_GetPCLK1Freq>
 8009b40:	61f8      	str	r0, [r7, #28]
        break;
 8009b42:	e014      	b.n	8009b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b44:	f7fc fb18 	bl	8006178 <HAL_RCC_GetPCLK2Freq>
 8009b48:	61f8      	str	r0, [r7, #28]
        break;
 8009b4a:	e010      	b.n	8009b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009b4c:	4b1e      	ldr	r3, [pc, #120]	; (8009bc8 <UART_SetConfig+0x56c>)
 8009b4e:	61fb      	str	r3, [r7, #28]
        break;
 8009b50:	e00d      	b.n	8009b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009b52:	f7fc fa63 	bl	800601c <HAL_RCC_GetSysClockFreq>
 8009b56:	61f8      	str	r0, [r7, #28]
        break;
 8009b58:	e009      	b.n	8009b6e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b5e:	61fb      	str	r3, [r7, #28]
        break;
 8009b60:	e005      	b.n	8009b6e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009b6c:	bf00      	nop
    }

    if (pclk != 0U)
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d019      	beq.n	8009ba8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	085a      	lsrs	r2, r3, #1
 8009b7a:	69fb      	ldr	r3, [r7, #28]
 8009b7c:	441a      	add	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	2b0f      	cmp	r3, #15
 8009b8c:	d909      	bls.n	8009ba2 <UART_SetConfig+0x546>
 8009b8e:	69bb      	ldr	r3, [r7, #24]
 8009b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b94:	d205      	bcs.n	8009ba2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b96:	69bb      	ldr	r3, [r7, #24]
 8009b98:	b29a      	uxth	r2, r3
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	60da      	str	r2, [r3, #12]
 8009ba0:	e002      	b.n	8009ba8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2200      	movs	r2, #0
 8009bac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009bb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3728      	adds	r7, #40	; 0x28
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40008000 	.word	0x40008000
 8009bc8:	00f42400 	.word	0x00f42400

08009bcc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d00a      	beq.n	8009bf6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bfa:	f003 0302 	and.w	r3, r3, #2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00a      	beq.n	8009c18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	430a      	orrs	r2, r1
 8009c16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d00a      	beq.n	8009c3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	430a      	orrs	r2, r1
 8009c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	f003 0308 	and.w	r3, r3, #8
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d00a      	beq.n	8009c5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	685b      	ldr	r3, [r3, #4]
 8009c4c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	430a      	orrs	r2, r1
 8009c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d00a      	beq.n	8009c7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	430a      	orrs	r2, r1
 8009c7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c82:	f003 0320 	and.w	r3, r3, #32
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00a      	beq.n	8009ca0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d01a      	beq.n	8009ce2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	430a      	orrs	r2, r1
 8009cc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cca:	d10a      	bne.n	8009ce2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	430a      	orrs	r2, r1
 8009ce0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685b      	ldr	r3, [r3, #4]
 8009cf4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	430a      	orrs	r2, r1
 8009d02:	605a      	str	r2, [r3, #4]
  }
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b086      	sub	sp, #24
 8009d14:	af02      	add	r7, sp, #8
 8009d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009d20:	f7f8 fb32 	bl	8002388 <HAL_GetTick>
 8009d24:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0308 	and.w	r3, r3, #8
 8009d30:	2b08      	cmp	r3, #8
 8009d32:	d10e      	bne.n	8009d52 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 f82d 	bl	8009da2 <UART_WaitOnFlagUntilTimeout>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d001      	beq.n	8009d52 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	e023      	b.n	8009d9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b04      	cmp	r3, #4
 8009d5e:	d10e      	bne.n	8009d7e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009d64:	9300      	str	r3, [sp, #0]
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f817 	bl	8009da2 <UART_WaitOnFlagUntilTimeout>
 8009d74:	4603      	mov	r3, r0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e00d      	b.n	8009d9a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2220      	movs	r2, #32
 8009d88:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b09c      	sub	sp, #112	; 0x70
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	60b9      	str	r1, [r7, #8]
 8009dac:	603b      	str	r3, [r7, #0]
 8009dae:	4613      	mov	r3, r2
 8009db0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009db2:	e0a5      	b.n	8009f00 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009dba:	f000 80a1 	beq.w	8009f00 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dbe:	f7f8 fae3 	bl	8002388 <HAL_GetTick>
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	1ad3      	subs	r3, r2, r3
 8009dc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009dca:	429a      	cmp	r2, r3
 8009dcc:	d302      	bcc.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009dce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d13e      	bne.n	8009e52 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009ddc:	e853 3f00 	ldrex	r3, [r3]
 8009de0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009de2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009de8:	667b      	str	r3, [r7, #100]	; 0x64
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	461a      	mov	r2, r3
 8009df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009df2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009df4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009df8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009dfa:	e841 2300 	strex	r3, r2, [r1]
 8009dfe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1e6      	bne.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3308      	adds	r3, #8
 8009e0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e10:	e853 3f00 	ldrex	r3, [r3]
 8009e14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e18:	f023 0301 	bic.w	r3, r3, #1
 8009e1c:	663b      	str	r3, [r7, #96]	; 0x60
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	3308      	adds	r3, #8
 8009e24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009e26:	64ba      	str	r2, [r7, #72]	; 0x48
 8009e28:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e2e:	e841 2300 	strex	r3, r2, [r1]
 8009e32:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d1e5      	bne.n	8009e06 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2220      	movs	r2, #32
 8009e3e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2220      	movs	r2, #32
 8009e44:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	2200      	movs	r2, #0
 8009e4a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009e4e:	2303      	movs	r3, #3
 8009e50:	e067      	b.n	8009f22 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 0304 	and.w	r3, r3, #4
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d04f      	beq.n	8009f00 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	69db      	ldr	r3, [r3, #28]
 8009e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e6e:	d147      	bne.n	8009f00 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e78:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e82:	e853 3f00 	ldrex	r3, [r3]
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	461a      	mov	r2, r3
 8009e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e98:	637b      	str	r3, [r7, #52]	; 0x34
 8009e9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ea0:	e841 2300 	strex	r3, r2, [r1]
 8009ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d1e6      	bne.n	8009e7a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	3308      	adds	r3, #8
 8009eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	e853 3f00 	ldrex	r3, [r3]
 8009eba:	613b      	str	r3, [r7, #16]
   return(result);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f023 0301 	bic.w	r3, r3, #1
 8009ec2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3308      	adds	r3, #8
 8009eca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009ecc:	623a      	str	r2, [r7, #32]
 8009ece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ed0:	69f9      	ldr	r1, [r7, #28]
 8009ed2:	6a3a      	ldr	r2, [r7, #32]
 8009ed4:	e841 2300 	strex	r3, r2, [r1]
 8009ed8:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d1e5      	bne.n	8009eac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2220      	movs	r2, #32
 8009ee4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2220      	movs	r2, #32
 8009eea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2220      	movs	r2, #32
 8009ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009efc:	2303      	movs	r3, #3
 8009efe:	e010      	b.n	8009f22 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69da      	ldr	r2, [r3, #28]
 8009f06:	68bb      	ldr	r3, [r7, #8]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	68ba      	ldr	r2, [r7, #8]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	bf0c      	ite	eq
 8009f10:	2301      	moveq	r3, #1
 8009f12:	2300      	movne	r3, #0
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	461a      	mov	r2, r3
 8009f18:	79fb      	ldrb	r3, [r7, #7]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	f43f af4a 	beq.w	8009db4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009f20:	2300      	movs	r3, #0
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3770      	adds	r7, #112	; 0x70
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}

08009f2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b095      	sub	sp, #84	; 0x54
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f3a:	e853 3f00 	ldrex	r3, [r3]
 8009f3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f50:	643b      	str	r3, [r7, #64]	; 0x40
 8009f52:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f58:	e841 2300 	strex	r3, r2, [r1]
 8009f5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1e6      	bne.n	8009f32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3308      	adds	r3, #8
 8009f6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f6c:	6a3b      	ldr	r3, [r7, #32]
 8009f6e:	e853 3f00 	ldrex	r3, [r3]
 8009f72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	f023 0301 	bic.w	r3, r3, #1
 8009f7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	3308      	adds	r3, #8
 8009f82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f8c:	e841 2300 	strex	r3, r2, [r1]
 8009f90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d1e5      	bne.n	8009f64 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d118      	bne.n	8009fd2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	e853 3f00 	ldrex	r3, [r3]
 8009fac:	60bb      	str	r3, [r7, #8]
   return(result);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	f023 0310 	bic.w	r3, r3, #16
 8009fb4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	461a      	mov	r2, r3
 8009fbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fbe:	61bb      	str	r3, [r7, #24]
 8009fc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fc2:	6979      	ldr	r1, [r7, #20]
 8009fc4:	69ba      	ldr	r2, [r7, #24]
 8009fc6:	e841 2300 	strex	r3, r2, [r1]
 8009fca:	613b      	str	r3, [r7, #16]
   return(result);
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1e6      	bne.n	8009fa0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2220      	movs	r2, #32
 8009fd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009fe4:	bf00      	nop
 8009fe6:	3754      	adds	r7, #84	; 0x54
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b084      	sub	sp, #16
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ffc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2200      	movs	r2, #0
 800a00a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7ff fb0e 	bl	8009630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b088      	sub	sp, #32
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	60bb      	str	r3, [r7, #8]
   return(result);
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	69fb      	ldr	r3, [r7, #28]
 800a042:	61bb      	str	r3, [r7, #24]
 800a044:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6979      	ldr	r1, [r7, #20]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	613b      	str	r3, [r7, #16]
   return(result);
 800a050:	693b      	ldr	r3, [r7, #16]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2220      	movs	r2, #32
 800a05a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f7ff fad0 	bl	8009608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a068:	bf00      	nop
 800a06a:	3720      	adds	r7, #32
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a084:	b480      	push	{r7}
 800a086:	b087      	sub	sp, #28
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
#if defined(FMC_PCSCNTR_CSCOUNT)
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));
#endif /* FMC_PCSCNTR_CSCOUNT */

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	681a      	ldr	r2, [r3, #0]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a098:	683a      	ldr	r2, [r7, #0]
 800a09a:	6812      	ldr	r2, [r2, #0]
 800a09c:	f023 0101 	bic.w	r1, r3, #1
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	2b08      	cmp	r3, #8
 800a0ac:	d102      	bne.n	800a0b4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a0ae:	2340      	movs	r3, #64	; 0x40
 800a0b0:	617b      	str	r3, [r7, #20]
 800a0b2:	e001      	b.n	800a0b8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a0c4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a0ca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a0d0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a0d6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a0dc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a0e2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a0e8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a0ee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a0f4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a102:	693a      	ldr	r2, [r7, #16]
 800a104:	4313      	orrs	r3, r2
 800a106:	613b      	str	r3, [r7, #16]
#if defined(FMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a10c:	693a      	ldr	r2, [r7, #16]
 800a10e:	4313      	orrs	r3, r2
 800a110:	613b      	str	r3, [r7, #16]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  btcr_reg |= Init->NBLSetupTime;
#endif /* FMC_BCRx_NBLSET */
  btcr_reg |= Init->PageSize;
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	4313      	orrs	r3, r2
 800a11a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a11c:	4b20      	ldr	r3, [pc, #128]	; (800a1a0 <FMC_NORSRAM_Init+0x11c>)
 800a11e:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a126:	60fb      	str	r3, [r7, #12]
#if defined(FMC_BCR1_WFDIS)
  mask |= FMC_BCR1_WFDIS;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a12e:	60fb      	str	r3, [r7, #12]
#endif /* FMC_BCR1_WFDIS */
#if defined(FMC_BCRx_NBLSET)
  mask |= FMC_BCRx_NBLSET;
#endif /* FMC_BCRx_NBLSET */
  mask |= FMC_BCRx_CPSIZE;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a136:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681a      	ldr	r2, [r3, #0]
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	43db      	mvns	r3, r3
 800a146:	ea02 0103 	and.w	r1, r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	681a      	ldr	r2, [r3, #0]
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	4319      	orrs	r1, r3
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a15c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a160:	d10c      	bne.n	800a17c <FMC_NORSRAM_Init+0xf8>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d008      	beq.n	800a17c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a176:	431a      	orrs	r2, r3
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	601a      	str	r2, [r3, #0]
  }
#if defined(FMC_BCR1_WFDIS)

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d006      	beq.n	800a192 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681a      	ldr	r2, [r3, #0]
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a18c:	431a      	orrs	r2, r3
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	601a      	str	r2, [r3, #0]
        break;
    }
  }
#endif /* FMC_PCSCNTR_CSCOUNT */

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	371c      	adds	r7, #28
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr
 800a1a0:	0008fb7f 	.word	0x0008fb7f

0800a1a4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b087      	sub	sp, #28
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
                                                       ((Timing->BusTurnAroundDuration)  << FMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#else /* FMC_BTRx_DATAHLD */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	1c5a      	adds	r2, r3, #1
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1ba:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	011b      	lsls	r3, r3, #4
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	021b      	lsls	r3, r3, #8
 800a1d0:	431a      	orrs	r2, r3
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	041b      	lsls	r3, r3, #16
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	3b01      	subs	r3, #1
 800a1e0:	051b      	lsls	r3, r3, #20
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	3b02      	subs	r3, #2
 800a1ea:	061b      	lsls	r3, r3, #24
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	69db      	ldr	r3, [r3, #28]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	4319      	orrs	r1, r3
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));
#endif /* FMC_BTRx_DATAHLD */

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a208:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a20c:	d113      	bne.n	800a236 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a216:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	695b      	ldr	r3, [r3, #20]
 800a21c:	3b01      	subs	r3, #1
 800a21e:	051b      	lsls	r3, r3, #20
 800a220:	697a      	ldr	r2, [r7, #20]
 800a222:	4313      	orrs	r3, r2
 800a224:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a22e:	697b      	ldr	r3, [r7, #20]
 800a230:	431a      	orrs	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	371c      	adds	r7, #28
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr

0800a244 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a244:	b480      	push	{r7}
 800a246:	b085      	sub	sp, #20
 800a248:	af00      	add	r7, sp, #0
 800a24a:	60f8      	str	r0, [r7, #12]
 800a24c:	60b9      	str	r1, [r7, #8]
 800a24e:	607a      	str	r2, [r7, #4]
 800a250:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a258:	d11d      	bne.n	800a296 <FMC_NORSRAM_Extended_Timing_Init+0x52>
                                                     ((Timing->DataSetupTime)          << FMC_BWTRx_DATAST_Pos)  |
                                                     ((Timing->DataHoldTime)           << FMC_BWTRx_DATAHLD_Pos) |
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#else /* FMC_BTRx_DATAHLD */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	687a      	ldr	r2, [r7, #4]
 800a25e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a262:	4b13      	ldr	r3, [pc, #76]	; (800a2b0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a264:	4013      	ands	r3, r2
 800a266:	68ba      	ldr	r2, [r7, #8]
 800a268:	6811      	ldr	r1, [r2, #0]
 800a26a:	68ba      	ldr	r2, [r7, #8]
 800a26c:	6852      	ldr	r2, [r2, #4]
 800a26e:	0112      	lsls	r2, r2, #4
 800a270:	4311      	orrs	r1, r2
 800a272:	68ba      	ldr	r2, [r7, #8]
 800a274:	6892      	ldr	r2, [r2, #8]
 800a276:	0212      	lsls	r2, r2, #8
 800a278:	4311      	orrs	r1, r2
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	69d2      	ldr	r2, [r2, #28]
 800a27e:	4311      	orrs	r1, r2
 800a280:	68ba      	ldr	r2, [r7, #8]
 800a282:	6912      	ldr	r2, [r2, #16]
 800a284:	0412      	lsls	r2, r2, #16
 800a286:	430a      	orrs	r2, r1
 800a288:	ea43 0102 	orr.w	r1, r3, r2
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a294:	e005      	b.n	800a2a2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
#endif /* FMC_BTRx_DATAHLD */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a29e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a2a2:	2300      	movs	r3, #0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3714      	adds	r7, #20
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr
 800a2b0:	cff00000 	.word	0xcff00000

0800a2b4 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	b480      	push	{r7}
 800a2b8:	b085      	sub	sp, #20
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	6078      	str	r0, [r7, #4]
 800a2be:	f107 001c 	add.w	r0, r7, #28
 800a2c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
#if !defined(STM32L4P5xx) && !defined(STM32L4Q5xx) && !defined(STM32L4R5xx) && !defined(STM32L4R7xx) && !defined(STM32L4R9xx) && !defined(STM32L4S5xx) && !defined(STM32L4S7xx) && !defined(STM32L4S9xx)
  tmpreg |= Init.ClockBypass;
 800a2ca:	6a3b      	ldr	r3, [r7, #32]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	60fb      	str	r3, [r7, #12]
#endif
  tmpreg |= (Init.ClockEdge           |\
 800a2d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  tmpreg |= (Init.ClockEdge           |\
 800a2d6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a2d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a2da:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a2de:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a2e2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a2e4:	68fa      	ldr	r2, [r7, #12]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	685b      	ldr	r3, [r3, #4]
 800a2ee:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800a2f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	431a      	orrs	r2, r3
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a2fe:	2300      	movs	r3, #0
}
 800a300:	4618      	mov	r0, r3
 800a302:	3714      	adds	r7, #20
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	b004      	add	sp, #16
 800a30c:	4770      	bx	lr

0800a30e <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a30e:	b480      	push	{r7}
 800a310:	b083      	sub	sp, #12
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
#else
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2203      	movs	r2, #3
 800a334:	601a      	str	r2, [r3, #0]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800a336:	2002      	movs	r0, #2
 800a338:	f7f8 f832 	bl	80023a0 <HAL_Delay>

  return HAL_OK;
 800a33c:	2300      	movs	r3, #0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}

0800a346 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a346:	b480      	push	{r7}
 800a348:	b083      	sub	sp, #12
 800a34a:	af00      	add	r7, sp, #0
 800a34c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 0303 	and.w	r3, r3, #3
}
 800a356:	4618      	mov	r0, r3
 800a358:	370c      	adds	r7, #12
 800a35a:	46bd      	mov	sp, r7
 800a35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a360:	4770      	bx	lr

0800a362 <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a362:	b480      	push	{r7}
 800a364:	b085      	sub	sp, #20
 800a366:	af00      	add	r7, sp, #0
 800a368:	6078      	str	r0, [r7, #4]
 800a36a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a380:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a386:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a38c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	4313      	orrs	r3, r2
 800a392:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	68db      	ldr	r3, [r3, #12]
 800a398:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a39c:	f023 030f 	bic.w	r3, r3, #15
 800a3a0:	68fa      	ldr	r2, [r7, #12]
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	b2db      	uxtb	r3, r3
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	3314      	adds	r3, #20
 800a3de:	461a      	mov	r2, r3
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
}
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	3714      	adds	r7, #20
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f4:	4770      	bx	lr

0800a3f6 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a3f6:	b480      	push	{r7}
 800a3f8:	b085      	sub	sp, #20
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	685a      	ldr	r2, [r3, #4]
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a414:	683b      	ldr	r3, [r7, #0]
 800a416:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a41c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a422:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a428:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a42a:	68fa      	ldr	r2, [r7, #12]
 800a42c:	4313      	orrs	r3, r2
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	431a      	orrs	r2, r3
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a440:	2300      	movs	r3, #0

}
 800a442:	4618      	mov	r0, r3
 800a444:	3714      	adds	r7, #20
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr

0800a44e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a44e:	b580      	push	{r7, lr}
 800a450:	b088      	sub	sp, #32
 800a452:	af00      	add	r7, sp, #0
 800a454:	6078      	str	r0, [r7, #4]
 800a456:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a45c:	2310      	movs	r3, #16
 800a45e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a460:	2340      	movs	r3, #64	; 0x40
 800a462:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a464:	2300      	movs	r3, #0
 800a466:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a468:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a46c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a46e:	f107 0308 	add.w	r3, r7, #8
 800a472:	4619      	mov	r1, r3
 800a474:	6878      	ldr	r0, [r7, #4]
 800a476:	f7ff ff74 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a47a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a47e:	2110      	movs	r1, #16
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 f94d 	bl	800a720 <SDMMC_GetCmdResp1>
 800a486:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a488:	69fb      	ldr	r3, [r7, #28]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	3720      	adds	r7, #32
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  addr Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a492:	b580      	push	{r7, lr}
 800a494:	b08a      	sub	sp, #40	; 0x28
 800a496:	af00      	add	r7, sp, #0
 800a498:	60f8      	str	r0, [r7, #12]
 800a49a:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a4a2:	2307      	movs	r3, #7
 800a4a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4b2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4b4:	f107 0310 	add.w	r3, r7, #16
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	68f8      	ldr	r0, [r7, #12]
 800a4bc:	f7ff ff51 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c4:	2107      	movs	r1, #7
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f92a 	bl	800a720 <SDMMC_GetCmdResp1>
 800a4cc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3728      	adds	r7, #40	; 0x28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b088      	sub	sp, #32
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4f6:	f107 0308 	add.w	r3, r7, #8
 800a4fa:	4619      	mov	r1, r3
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff ff30 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 fb44 	bl	800ab90 <SDMMC_GetCmdError>
 800a508:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a50a:	69fb      	ldr	r3, [r7, #28]
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	3720      	adds	r7, #32
 800a510:	46bd      	mov	sp, r7
 800a512:	bd80      	pop	{r7, pc}

0800a514 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b088      	sub	sp, #32
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a51c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a522:	2308      	movs	r3, #8
 800a524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a526:	2340      	movs	r3, #64	; 0x40
 800a528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a52a:	2300      	movs	r3, #0
 800a52c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a52e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a532:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a534:	f107 0308 	add.w	r3, r7, #8
 800a538:	4619      	mov	r1, r3
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f7ff ff11 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f000 fad7 	bl	800aaf4 <SDMMC_GetCmdResp7>
 800a546:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a548:	69fb      	ldr	r3, [r7, #28]
}
 800a54a:	4618      	mov	r0, r3
 800a54c:	3720      	adds	r7, #32
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a552:	b580      	push	{r7, lr}
 800a554:	b088      	sub	sp, #32
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
 800a55a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a560:	2337      	movs	r3, #55	; 0x37
 800a562:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a568:	2300      	movs	r3, #0
 800a56a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a56c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a570:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a572:	f107 0308 	add.w	r3, r7, #8
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fef2 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a57e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a582:	2137      	movs	r1, #55	; 0x37
 800a584:	6878      	ldr	r0, [r7, #4]
 800a586:	f000 f8cb 	bl	800a720 <SDMMC_GetCmdResp1>
 800a58a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a58c:	69fb      	ldr	r3, [r7, #28]
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3720      	adds	r7, #32
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b088      	sub	sp, #32
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  sdmmc_cmdinit.Argument         = Argument;
#else
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5aa:	60bb      	str	r3, [r7, #8]
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a5ac:	2329      	movs	r3, #41	; 0x29
 800a5ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5b0:	2340      	movs	r3, #64	; 0x40
 800a5b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5be:	f107 0308 	add.w	r3, r7, #8
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff fecc 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 f9de 	bl	800a98c <SDMMC_GetCmdResp3>
 800a5d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a5d2:	69fb      	ldr	r3, [r7, #28]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3720      	adds	r7, #32
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  BusWidth BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b088      	sub	sp, #32
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a5ea:	2306      	movs	r3, #6
 800a5ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a5f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a5fc:	f107 0308 	add.w	r3, r7, #8
 800a600:	4619      	mov	r1, r3
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f7ff fead 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800a608:	f241 3288 	movw	r2, #5000	; 0x1388
 800a60c:	2106      	movs	r1, #6
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 f886 	bl	800a720 <SDMMC_GetCmdResp1>
 800a614:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a616:	69fb      	ldr	r3, [r7, #28]
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3720      	adds	r7, #32
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b088      	sub	sp, #32
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a628:	2300      	movs	r3, #0
 800a62a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a62c:	2333      	movs	r3, #51	; 0x33
 800a62e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a630:	2340      	movs	r3, #64	; 0x40
 800a632:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a634:	2300      	movs	r3, #0
 800a636:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a63c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a63e:	f107 0308 	add.w	r3, r7, #8
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f7ff fe8c 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800a64a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a64e:	2133      	movs	r1, #51	; 0x33
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 f865 	bl	800a720 <SDMMC_GetCmdResp1>
 800a656:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a658:	69fb      	ldr	r3, [r7, #28]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3720      	adds	r7, #32
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b088      	sub	sp, #32
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a66a:	2300      	movs	r3, #0
 800a66c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a66e:	2302      	movs	r3, #2
 800a670:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a672:	23c0      	movs	r3, #192	; 0xc0
 800a674:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a67a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a67e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a680:	f107 0308 	add.w	r3, r7, #8
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f7ff fe6b 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f935 	bl	800a8fc <SDMMC_GetCmdResp2>
 800a692:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a694:	69fb      	ldr	r3, [r7, #28]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3720      	adds	r7, #32
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <SDMMC_CmdSendCSD>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a69e:	b580      	push	{r7, lr}
 800a6a0:	b088      	sub	sp, #32
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a6a8:	683b      	ldr	r3, [r7, #0]
 800a6aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a6ac:	2309      	movs	r3, #9
 800a6ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a6b0:	23c0      	movs	r3, #192	; 0xc0
 800a6b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6be:	f107 0308 	add.w	r3, r7, #8
 800a6c2:	4619      	mov	r1, r3
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f7ff fe4c 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f916 	bl	800a8fc <SDMMC_GetCmdResp2>
 800a6d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3720      	adds	r7, #32
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  pRCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b088      	sub	sp, #32
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a6f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a6fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f7ff fe2d 	bl	800a362 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a708:	683a      	ldr	r2, [r7, #0]
 800a70a:	2103      	movs	r1, #3
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f97b 	bl	800aa08 <SDMMC_GetCmdResp6>
 800a712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a714:	69fb      	ldr	r3, [r7, #28]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	460b      	mov	r3, r1
 800a72a:	607a      	str	r2, [r7, #4]
 800a72c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a72e:	4b70      	ldr	r3, [pc, #448]	; (800a8f0 <SDMMC_GetCmdResp1+0x1d0>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	4a70      	ldr	r2, [pc, #448]	; (800a8f4 <SDMMC_GetCmdResp1+0x1d4>)
 800a734:	fba2 2303 	umull	r2, r3, r2, r3
 800a738:	0a5a      	lsrs	r2, r3, #9
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	fb02 f303 	mul.w	r3, r2, r3
 800a740:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a742:	69fb      	ldr	r3, [r7, #28]
 800a744:	1e5a      	subs	r2, r3, #1
 800a746:	61fa      	str	r2, [r7, #28]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d102      	bne.n	800a752 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a74c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a750:	e0c9      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a756:	61bb      	str	r3, [r7, #24]
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
#else
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a758:	69bb      	ldr	r3, [r7, #24]
 800a75a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d0ef      	beq.n	800a742 <SDMMC_GetCmdResp1+0x22>
 800a762:	69bb      	ldr	r3, [r7, #24]
 800a764:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1ea      	bne.n	800a742 <SDMMC_GetCmdResp1+0x22>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a770:	f003 0304 	and.w	r3, r3, #4
 800a774:	2b00      	cmp	r3, #0
 800a776:	d004      	beq.n	800a782 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2204      	movs	r2, #4
 800a77c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a77e:	2304      	movs	r3, #4
 800a780:	e0b1      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a786:	f003 0301 	and.w	r3, r3, #1
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d004      	beq.n	800a798 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2201      	movs	r2, #1
 800a792:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a794:	2301      	movs	r3, #1
 800a796:	e0a6      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	22c5      	movs	r2, #197	; 0xc5
 800a79c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7ff fe09 	bl	800a3b6 <SDMMC_GetCommandResponse>
 800a7a4:	4603      	mov	r3, r0
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d001      	beq.n	800a7b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	e099      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a7b2:	2100      	movs	r1, #0
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7ff fe0b 	bl	800a3d0 <SDMMC_GetResponse>
 800a7ba:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a7bc:	697a      	ldr	r2, [r7, #20]
 800a7be:	4b4e      	ldr	r3, [pc, #312]	; (800a8f8 <SDMMC_GetCmdResp1+0x1d8>)
 800a7c0:	4013      	ands	r3, r2
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e08d      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da02      	bge.n	800a7d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a7d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a7d4:	e087      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d001      	beq.n	800a7e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a7e0:	2340      	movs	r3, #64	; 0x40
 800a7e2:	e080      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a7ee:	2380      	movs	r3, #128	; 0x80
 800a7f0:	e079      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a7f2:	697b      	ldr	r3, [r7, #20]
 800a7f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d002      	beq.n	800a802 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a7fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a800:	e071      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d002      	beq.n	800a812 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a80c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a810:	e069      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d002      	beq.n	800a822 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a81c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a820:	e061      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a82c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a830:	e059      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d002      	beq.n	800a842 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a83c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a840:	e051      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a84c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a850:	e049      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d002      	beq.n	800a862 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a85c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a860:	e041      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a86c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a870:	e039      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a87c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a880:	e031      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a88c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a890:	e029      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a89c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a8a0:	e021      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a8ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a8b0:	e019      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d002      	beq.n	800a8c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a8bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a8c0:	e011      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d002      	beq.n	800a8d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a8cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a8d0:	e009      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f003 0308 	and.w	r3, r3, #8
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d002      	beq.n	800a8e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a8dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a8e0:	e001      	b.n	800a8e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3720      	adds	r7, #32
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000000 	.word	0x20000000
 800a8f4:	10624dd3 	.word	0x10624dd3
 800a8f8:	fdffe008 	.word	0xfdffe008

0800a8fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a904:	4b1f      	ldr	r3, [pc, #124]	; (800a984 <SDMMC_GetCmdResp2+0x88>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	4a1f      	ldr	r2, [pc, #124]	; (800a988 <SDMMC_GetCmdResp2+0x8c>)
 800a90a:	fba2 2303 	umull	r2, r3, r2, r3
 800a90e:	0a5b      	lsrs	r3, r3, #9
 800a910:	f241 3288 	movw	r2, #5000	; 0x1388
 800a914:	fb02 f303 	mul.w	r3, r2, r3
 800a918:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	1e5a      	subs	r2, r3, #1
 800a91e:	60fa      	str	r2, [r7, #12]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d102      	bne.n	800a92a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a924:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a928:	e026      	b.n	800a978 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0ef      	beq.n	800a91a <SDMMC_GetCmdResp2+0x1e>
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a940:	2b00      	cmp	r3, #0
 800a942:	d1ea      	bne.n	800a91a <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a948:	f003 0304 	and.w	r3, r3, #4
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d004      	beq.n	800a95a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2204      	movs	r2, #4
 800a954:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a956:	2304      	movs	r3, #4
 800a958:	e00e      	b.n	800a978 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d004      	beq.n	800a970 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2201      	movs	r2, #1
 800a96a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a96c:	2301      	movs	r3, #1
 800a96e:	e003      	b.n	800a978 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	22c5      	movs	r2, #197	; 0xc5
 800a974:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a976:	2300      	movs	r3, #0
}
 800a978:	4618      	mov	r0, r3
 800a97a:	3714      	adds	r7, #20
 800a97c:	46bd      	mov	sp, r7
 800a97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a982:	4770      	bx	lr
 800a984:	20000000 	.word	0x20000000
 800a988:	10624dd3 	.word	0x10624dd3

0800a98c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a994:	4b1a      	ldr	r3, [pc, #104]	; (800aa00 <SDMMC_GetCmdResp3+0x74>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a1a      	ldr	r2, [pc, #104]	; (800aa04 <SDMMC_GetCmdResp3+0x78>)
 800a99a:	fba2 2303 	umull	r2, r3, r2, r3
 800a99e:	0a5b      	lsrs	r3, r3, #9
 800a9a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a4:	fb02 f303 	mul.w	r3, r2, r3
 800a9a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	1e5a      	subs	r2, r3, #1
 800a9ae:	60fa      	str	r2, [r7, #12]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d102      	bne.n	800a9ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a9b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a9b8:	e01b      	b.n	800a9f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0ef      	beq.n	800a9aa <SDMMC_GetCmdResp3+0x1e>
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d1ea      	bne.n	800a9aa <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d8:	f003 0304 	and.w	r3, r3, #4
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2204      	movs	r2, #4
 800a9e4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a9e6:	2304      	movs	r3, #4
 800a9e8:	e003      	b.n	800a9f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	22c5      	movs	r2, #197	; 0xc5
 800a9ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3714      	adds	r7, #20
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	20000000 	.word	0x20000000
 800aa04:	10624dd3 	.word	0x10624dd3

0800aa08 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	460b      	mov	r3, r1
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aa16:	4b35      	ldr	r3, [pc, #212]	; (800aaec <SDMMC_GetCmdResp6+0xe4>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a35      	ldr	r2, [pc, #212]	; (800aaf0 <SDMMC_GetCmdResp6+0xe8>)
 800aa1c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa20:	0a5b      	lsrs	r3, r3, #9
 800aa22:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa26:	fb02 f303 	mul.w	r3, r2, r3
 800aa2a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800aa2c:	69fb      	ldr	r3, [r7, #28]
 800aa2e:	1e5a      	subs	r2, r3, #1
 800aa30:	61fa      	str	r2, [r7, #28]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d102      	bne.n	800aa3c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aa36:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aa3a:	e052      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa40:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d0ef      	beq.n	800aa2c <SDMMC_GetCmdResp6+0x24>
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d1ea      	bne.n	800aa2c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa5a:	f003 0304 	and.w	r3, r3, #4
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d004      	beq.n	800aa6c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	2204      	movs	r2, #4
 800aa66:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aa68:	2304      	movs	r3, #4
 800aa6a:	e03a      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d004      	beq.n	800aa82 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	e02f      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fc97 	bl	800a3b6 <SDMMC_GetCommandResponse>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	461a      	mov	r2, r3
 800aa8c:	7afb      	ldrb	r3, [r7, #11]
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d001      	beq.n	800aa96 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800aa92:	2301      	movs	r3, #1
 800aa94:	e025      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	22c5      	movs	r2, #197	; 0xc5
 800aa9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	68f8      	ldr	r0, [r7, #12]
 800aaa0:	f7ff fc96 	bl	800a3d0 <SDMMC_GetResponse>
 800aaa4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d106      	bne.n	800aabe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	0c1b      	lsrs	r3, r3, #16
 800aab4:	b29a      	uxth	r2, r3
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800aaba:	2300      	movs	r3, #0
 800aabc:	e011      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d002      	beq.n	800aace <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800aac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aacc:	e009      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d002      	beq.n	800aade <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800aad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aadc:	e001      	b.n	800aae2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800aade:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800aae2:	4618      	mov	r0, r3
 800aae4:	3720      	adds	r7, #32
 800aae6:	46bd      	mov	sp, r7
 800aae8:	bd80      	pop	{r7, pc}
 800aaea:	bf00      	nop
 800aaec:	20000000 	.word	0x20000000
 800aaf0:	10624dd3 	.word	0x10624dd3

0800aaf4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b085      	sub	sp, #20
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aafc:	4b22      	ldr	r3, [pc, #136]	; (800ab88 <SDMMC_GetCmdResp7+0x94>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a22      	ldr	r2, [pc, #136]	; (800ab8c <SDMMC_GetCmdResp7+0x98>)
 800ab02:	fba2 2303 	umull	r2, r3, r2, r3
 800ab06:	0a5b      	lsrs	r3, r3, #9
 800ab08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab0c:	fb02 f303 	mul.w	r3, r2, r3
 800ab10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	1e5a      	subs	r2, r3, #1
 800ab16:	60fa      	str	r2, [r7, #12]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ab1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ab20:	e02c      	b.n	800ab7c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0ef      	beq.n	800ab12 <SDMMC_GetCmdResp7+0x1e>
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1ea      	bne.n	800ab12 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d004      	beq.n	800ab52 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2204      	movs	r2, #4
 800ab4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ab4e:	2304      	movs	r3, #4
 800ab50:	e014      	b.n	800ab7c <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab56:	f003 0301 	and.w	r3, r3, #1
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d004      	beq.n	800ab68 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ab64:	2301      	movs	r3, #1
 800ab66:	e009      	b.n	800ab7c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d002      	beq.n	800ab7a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	2240      	movs	r2, #64	; 0x40
 800ab78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ab7a:	2300      	movs	r3, #0

}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr
 800ab88:	20000000 	.word	0x20000000
 800ab8c:	10624dd3 	.word	0x10624dd3

0800ab90 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ab98:	4b11      	ldr	r3, [pc, #68]	; (800abe0 <SDMMC_GetCmdError+0x50>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	4a11      	ldr	r2, [pc, #68]	; (800abe4 <SDMMC_GetCmdError+0x54>)
 800ab9e:	fba2 2303 	umull	r2, r3, r2, r3
 800aba2:	0a5b      	lsrs	r3, r3, #9
 800aba4:	f241 3288 	movw	r2, #5000	; 0x1388
 800aba8:	fb02 f303 	mul.w	r3, r2, r3
 800abac:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1e5a      	subs	r2, r3, #1
 800abb2:	60fa      	str	r2, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d102      	bne.n	800abbe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800abb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800abbc:	e009      	b.n	800abd2 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d0f1      	beq.n	800abae <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	22c5      	movs	r2, #197	; 0xc5
 800abce:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3714      	adds	r7, #20
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr
 800abde:	bf00      	nop
 800abe0:	20000000 	.word	0x20000000
 800abe4:	10624dd3 	.word	0x10624dd3

0800abe8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abe8:	b084      	sub	sp, #16
 800abea:	b580      	push	{r7, lr}
 800abec:	b084      	sub	sp, #16
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	f107 001c 	add.w	r0, r7, #28
 800abf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f001 faf6 	bl	800c1f8 <USB_CoreReset>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800ac10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d106      	bne.n	800ac24 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	639a      	str	r2, [r3, #56]	; 0x38
 800ac22:	e005      	b.n	800ac30 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac3c:	b004      	add	sp, #16
 800ac3e:	4770      	bx	lr

0800ac40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b087      	sub	sp, #28
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d165      	bne.n	800ad20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	4a3e      	ldr	r2, [pc, #248]	; (800ad50 <USB_SetTurnaroundTime+0x110>)
 800ac58:	4293      	cmp	r3, r2
 800ac5a:	d906      	bls.n	800ac6a <USB_SetTurnaroundTime+0x2a>
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	4a3d      	ldr	r2, [pc, #244]	; (800ad54 <USB_SetTurnaroundTime+0x114>)
 800ac60:	4293      	cmp	r3, r2
 800ac62:	d202      	bcs.n	800ac6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ac64:	230f      	movs	r3, #15
 800ac66:	617b      	str	r3, [r7, #20]
 800ac68:	e05c      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	4a39      	ldr	r2, [pc, #228]	; (800ad54 <USB_SetTurnaroundTime+0x114>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d306      	bcc.n	800ac80 <USB_SetTurnaroundTime+0x40>
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	4a38      	ldr	r2, [pc, #224]	; (800ad58 <USB_SetTurnaroundTime+0x118>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d202      	bcs.n	800ac80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ac7a:	230e      	movs	r3, #14
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	e051      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	4a35      	ldr	r2, [pc, #212]	; (800ad58 <USB_SetTurnaroundTime+0x118>)
 800ac84:	4293      	cmp	r3, r2
 800ac86:	d306      	bcc.n	800ac96 <USB_SetTurnaroundTime+0x56>
 800ac88:	68bb      	ldr	r3, [r7, #8]
 800ac8a:	4a34      	ldr	r2, [pc, #208]	; (800ad5c <USB_SetTurnaroundTime+0x11c>)
 800ac8c:	4293      	cmp	r3, r2
 800ac8e:	d202      	bcs.n	800ac96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ac90:	230d      	movs	r3, #13
 800ac92:	617b      	str	r3, [r7, #20]
 800ac94:	e046      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	4a30      	ldr	r2, [pc, #192]	; (800ad5c <USB_SetTurnaroundTime+0x11c>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d306      	bcc.n	800acac <USB_SetTurnaroundTime+0x6c>
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a2f      	ldr	r2, [pc, #188]	; (800ad60 <USB_SetTurnaroundTime+0x120>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d802      	bhi.n	800acac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aca6:	230c      	movs	r3, #12
 800aca8:	617b      	str	r3, [r7, #20]
 800acaa:	e03b      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	4a2c      	ldr	r2, [pc, #176]	; (800ad60 <USB_SetTurnaroundTime+0x120>)
 800acb0:	4293      	cmp	r3, r2
 800acb2:	d906      	bls.n	800acc2 <USB_SetTurnaroundTime+0x82>
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4a2b      	ldr	r2, [pc, #172]	; (800ad64 <USB_SetTurnaroundTime+0x124>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d802      	bhi.n	800acc2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800acbc:	230b      	movs	r3, #11
 800acbe:	617b      	str	r3, [r7, #20]
 800acc0:	e030      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	4a27      	ldr	r2, [pc, #156]	; (800ad64 <USB_SetTurnaroundTime+0x124>)
 800acc6:	4293      	cmp	r3, r2
 800acc8:	d906      	bls.n	800acd8 <USB_SetTurnaroundTime+0x98>
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	4a26      	ldr	r2, [pc, #152]	; (800ad68 <USB_SetTurnaroundTime+0x128>)
 800acce:	4293      	cmp	r3, r2
 800acd0:	d802      	bhi.n	800acd8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800acd2:	230a      	movs	r3, #10
 800acd4:	617b      	str	r3, [r7, #20]
 800acd6:	e025      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	4a23      	ldr	r2, [pc, #140]	; (800ad68 <USB_SetTurnaroundTime+0x128>)
 800acdc:	4293      	cmp	r3, r2
 800acde:	d906      	bls.n	800acee <USB_SetTurnaroundTime+0xae>
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4a22      	ldr	r2, [pc, #136]	; (800ad6c <USB_SetTurnaroundTime+0x12c>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d202      	bcs.n	800acee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ace8:	2309      	movs	r3, #9
 800acea:	617b      	str	r3, [r7, #20]
 800acec:	e01a      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	4a1e      	ldr	r2, [pc, #120]	; (800ad6c <USB_SetTurnaroundTime+0x12c>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d306      	bcc.n	800ad04 <USB_SetTurnaroundTime+0xc4>
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	4a1d      	ldr	r2, [pc, #116]	; (800ad70 <USB_SetTurnaroundTime+0x130>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d802      	bhi.n	800ad04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800acfe:	2308      	movs	r3, #8
 800ad00:	617b      	str	r3, [r7, #20]
 800ad02:	e00f      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ad04:	68bb      	ldr	r3, [r7, #8]
 800ad06:	4a1a      	ldr	r2, [pc, #104]	; (800ad70 <USB_SetTurnaroundTime+0x130>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d906      	bls.n	800ad1a <USB_SetTurnaroundTime+0xda>
 800ad0c:	68bb      	ldr	r3, [r7, #8]
 800ad0e:	4a19      	ldr	r2, [pc, #100]	; (800ad74 <USB_SetTurnaroundTime+0x134>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d202      	bcs.n	800ad1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ad14:	2307      	movs	r3, #7
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	e004      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ad1a:	2306      	movs	r3, #6
 800ad1c:	617b      	str	r3, [r7, #20]
 800ad1e:	e001      	b.n	800ad24 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ad20:	2309      	movs	r3, #9
 800ad22:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68da      	ldr	r2, [r3, #12]
 800ad34:	697b      	ldr	r3, [r7, #20]
 800ad36:	029b      	lsls	r3, r3, #10
 800ad38:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ad3c:	431a      	orrs	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	371c      	adds	r7, #28
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr
 800ad50:	00d8acbf 	.word	0x00d8acbf
 800ad54:	00e4e1c0 	.word	0x00e4e1c0
 800ad58:	00f42400 	.word	0x00f42400
 800ad5c:	01067380 	.word	0x01067380
 800ad60:	011a499f 	.word	0x011a499f
 800ad64:	01312cff 	.word	0x01312cff
 800ad68:	014ca43f 	.word	0x014ca43f
 800ad6c:	016e3600 	.word	0x016e3600
 800ad70:	01a6ab1f 	.word	0x01a6ab1f
 800ad74:	01e84800 	.word	0x01e84800

0800ad78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	f043 0201 	orr.w	r2, r3, #1
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ad8c:	2300      	movs	r3, #0
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	370c      	adds	r7, #12
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr

0800ad9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad9a:	b480      	push	{r7}
 800ad9c:	b083      	sub	sp, #12
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	689b      	ldr	r3, [r3, #8]
 800ada6:	f023 0201 	bic.w	r2, r3, #1
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800adae:	2300      	movs	r3, #0
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	370c      	adds	r7, #12
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr

0800adbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	460b      	mov	r3, r1
 800adc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800add8:	78fb      	ldrb	r3, [r7, #3]
 800adda:	2b01      	cmp	r3, #1
 800addc:	d115      	bne.n	800ae0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800adea:	2001      	movs	r0, #1
 800adec:	f7f7 fad8 	bl	80023a0 <HAL_Delay>
      ms++;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	3301      	adds	r3, #1
 800adf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f001 f985 	bl	800c106 <USB_GetMode>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d01e      	beq.n	800ae40 <USB_SetCurrentMode+0x84>
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b31      	cmp	r3, #49	; 0x31
 800ae06:	d9f0      	bls.n	800adea <USB_SetCurrentMode+0x2e>
 800ae08:	e01a      	b.n	800ae40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ae0a:	78fb      	ldrb	r3, [r7, #3]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d115      	bne.n	800ae3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ae1c:	2001      	movs	r0, #1
 800ae1e:	f7f7 fabf 	bl	80023a0 <HAL_Delay>
      ms++;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	3301      	adds	r3, #1
 800ae26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f001 f96c 	bl	800c106 <USB_GetMode>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d005      	beq.n	800ae40 <USB_SetCurrentMode+0x84>
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2b31      	cmp	r3, #49	; 0x31
 800ae38:	d9f0      	bls.n	800ae1c <USB_SetCurrentMode+0x60>
 800ae3a:	e001      	b.n	800ae40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e005      	b.n	800ae4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	2b32      	cmp	r3, #50	; 0x32
 800ae44:	d101      	bne.n	800ae4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ae46:	2301      	movs	r3, #1
 800ae48:	e000      	b.n	800ae4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ae4a:	2300      	movs	r3, #0
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3710      	adds	r7, #16
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae54:	b084      	sub	sp, #16
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b086      	sub	sp, #24
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
 800ae5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ae62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ae6e:	2300      	movs	r3, #0
 800ae70:	613b      	str	r3, [r7, #16]
 800ae72:	e009      	b.n	800ae88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ae74:	687a      	ldr	r2, [r7, #4]
 800ae76:	693b      	ldr	r3, [r7, #16]
 800ae78:	3340      	adds	r3, #64	; 0x40
 800ae7a:	009b      	lsls	r3, r3, #2
 800ae7c:	4413      	add	r3, r2
 800ae7e:	2200      	movs	r2, #0
 800ae80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	3301      	adds	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	2b0e      	cmp	r3, #14
 800ae8c:	d9f2      	bls.n	800ae74 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ae8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d11c      	bne.n	800aece <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	68fa      	ldr	r2, [r7, #12]
 800ae9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aea2:	f043 0302 	orr.w	r3, r3, #2
 800aea6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	e005      	b.n	800aeda <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aee0:	461a      	mov	r2, r3
 800aee2:	2300      	movs	r3, #0
 800aee4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeec:	4619      	mov	r1, r3
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef4:	461a      	mov	r2, r3
 800aef6:	680b      	ldr	r3, [r1, #0]
 800aef8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aefa:	2103      	movs	r1, #3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f959 	bl	800b1b4 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800af02:	2110      	movs	r1, #16
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f8f1 	bl	800b0ec <USB_FlushTxFifo>
 800af0a:	4603      	mov	r3, r0
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d001      	beq.n	800af14 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800af10:	2301      	movs	r3, #1
 800af12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 f91d 	bl	800b154 <USB_FlushRxFifo>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d001      	beq.n	800af24 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af2a:	461a      	mov	r2, r3
 800af2c:	2300      	movs	r3, #0
 800af2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af36:	461a      	mov	r2, r3
 800af38:	2300      	movs	r3, #0
 800af3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af42:	461a      	mov	r2, r3
 800af44:	2300      	movs	r3, #0
 800af46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af48:	2300      	movs	r3, #0
 800af4a:	613b      	str	r3, [r7, #16]
 800af4c:	e043      	b.n	800afd6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af64:	d118      	bne.n	800af98 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10a      	bne.n	800af82 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800af6c:	693b      	ldr	r3, [r7, #16]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af78:	461a      	mov	r2, r3
 800af7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	e013      	b.n	800afaa <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	015a      	lsls	r2, r3, #5
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af8e:	461a      	mov	r2, r3
 800af90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	e008      	b.n	800afaa <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa4:	461a      	mov	r2, r3
 800afa6:	2300      	movs	r3, #0
 800afa8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	015a      	lsls	r2, r3, #5
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4413      	add	r3, r2
 800afb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb6:	461a      	mov	r2, r3
 800afb8:	2300      	movs	r3, #0
 800afba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	015a      	lsls	r2, r3, #5
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	4413      	add	r3, r2
 800afc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc8:	461a      	mov	r2, r3
 800afca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800afce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	3301      	adds	r3, #1
 800afd4:	613b      	str	r3, [r7, #16]
 800afd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd8:	693a      	ldr	r2, [r7, #16]
 800afda:	429a      	cmp	r2, r3
 800afdc:	d3b7      	bcc.n	800af4e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800afde:	2300      	movs	r3, #0
 800afe0:	613b      	str	r3, [r7, #16]
 800afe2:	e043      	b.n	800b06c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800affa:	d118      	bne.n	800b02e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10a      	bne.n	800b018 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b002:	693b      	ldr	r3, [r7, #16]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b00e:	461a      	mov	r2, r3
 800b010:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b014:	6013      	str	r3, [r2, #0]
 800b016:	e013      	b.n	800b040 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b018:	693b      	ldr	r3, [r7, #16]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b024:	461a      	mov	r2, r3
 800b026:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b02a:	6013      	str	r3, [r2, #0]
 800b02c:	e008      	b.n	800b040 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	015a      	lsls	r2, r3, #5
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	4413      	add	r3, r2
 800b036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03a:	461a      	mov	r2, r3
 800b03c:	2300      	movs	r3, #0
 800b03e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	015a      	lsls	r2, r3, #5
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	4413      	add	r3, r2
 800b048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b04c:	461a      	mov	r2, r3
 800b04e:	2300      	movs	r3, #0
 800b050:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	015a      	lsls	r2, r3, #5
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	4413      	add	r3, r2
 800b05a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05e:	461a      	mov	r2, r3
 800b060:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b064:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	3301      	adds	r3, #1
 800b06a:	613b      	str	r3, [r7, #16]
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	693a      	ldr	r2, [r7, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	d3b7      	bcc.n	800afe4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b082:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b086:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2200      	movs	r2, #0
 800b08c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b094:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f043 0210 	orr.w	r2, r3, #16
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	699a      	ldr	r2, [r3, #24]
 800b0a6:	4b10      	ldr	r3, [pc, #64]	; (800b0e8 <USB_DevInit+0x294>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	687a      	ldr	r2, [r7, #4]
 800b0ac:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b0ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d005      	beq.n	800b0c0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	699b      	ldr	r3, [r3, #24]
 800b0b8:	f043 0208 	orr.w	r2, r3, #8
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b0c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0c2:	2b01      	cmp	r3, #1
 800b0c4:	d107      	bne.n	800b0d6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	699b      	ldr	r3, [r3, #24]
 800b0ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0ce:	f043 0304 	orr.w	r3, r3, #4
 800b0d2:	687a      	ldr	r2, [r7, #4]
 800b0d4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b0d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	3718      	adds	r7, #24
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0e2:	b004      	add	sp, #16
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	803c3800 	.word	0x803c3800

0800b0ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b085      	sub	sp, #20
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
 800b0f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	4a13      	ldr	r2, [pc, #76]	; (800b150 <USB_FlushTxFifo+0x64>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d901      	bls.n	800b10c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e01b      	b.n	800b144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	daf2      	bge.n	800b0fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	019b      	lsls	r3, r3, #6
 800b11c:	f043 0220 	orr.w	r2, r3, #32
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	3301      	adds	r3, #1
 800b128:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	4a08      	ldr	r2, [pc, #32]	; (800b150 <USB_FlushTxFifo+0x64>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d901      	bls.n	800b136 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e006      	b.n	800b144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	f003 0320 	and.w	r3, r3, #32
 800b13e:	2b20      	cmp	r3, #32
 800b140:	d0f0      	beq.n	800b124 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	00030d40 	.word	0x00030d40

0800b154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	3301      	adds	r3, #1
 800b164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	4a11      	ldr	r2, [pc, #68]	; (800b1b0 <USB_FlushRxFifo+0x5c>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	d901      	bls.n	800b172 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	e018      	b.n	800b1a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	691b      	ldr	r3, [r3, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	daf2      	bge.n	800b160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b17a:	2300      	movs	r3, #0
 800b17c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2210      	movs	r2, #16
 800b182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3301      	adds	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	4a08      	ldr	r2, [pc, #32]	; (800b1b0 <USB_FlushRxFifo+0x5c>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d901      	bls.n	800b196 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b192:	2303      	movs	r3, #3
 800b194:	e006      	b.n	800b1a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	691b      	ldr	r3, [r3, #16]
 800b19a:	f003 0310 	and.w	r3, r3, #16
 800b19e:	2b10      	cmp	r3, #16
 800b1a0:	d0f0      	beq.n	800b184 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr
 800b1b0:	00030d40 	.word	0x00030d40

0800b1b4 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1ca:	681a      	ldr	r2, [r3, #0]
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	68f9      	ldr	r1, [r7, #12]
 800b1d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b1d8:	2300      	movs	r3, #0
}
 800b1da:	4618      	mov	r0, r3
 800b1dc:	3714      	adds	r7, #20
 800b1de:	46bd      	mov	sp, r7
 800b1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e4:	4770      	bx	lr

0800b1e6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b1e6:	b480      	push	{r7}
 800b1e8:	b087      	sub	sp, #28
 800b1ea:	af00      	add	r7, sp, #0
 800b1ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f8:	689b      	ldr	r3, [r3, #8]
 800b1fa:	f003 0306 	and.w	r3, r3, #6
 800b1fe:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d002      	beq.n	800b20c <USB_GetDevSpeed+0x26>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2b06      	cmp	r3, #6
 800b20a:	d102      	bne.n	800b212 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b20c:	2302      	movs	r3, #2
 800b20e:	75fb      	strb	r3, [r7, #23]
 800b210:	e001      	b.n	800b216 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800b212:	230f      	movs	r3, #15
 800b214:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b216:	7dfb      	ldrb	r3, [r7, #23]
}
 800b218:	4618      	mov	r0, r3
 800b21a:	371c      	adds	r7, #28
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d13a      	bne.n	800b2b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b246:	69da      	ldr	r2, [r3, #28]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	2101      	movs	r1, #1
 800b252:	fa01 f303 	lsl.w	r3, r1, r3
 800b256:	b29b      	uxth	r3, r3
 800b258:	68f9      	ldr	r1, [r7, #12]
 800b25a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b25e:	4313      	orrs	r3, r2
 800b260:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d155      	bne.n	800b324 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	791b      	ldrb	r3, [r3, #4]
 800b292:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b294:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	059b      	lsls	r3, r3, #22
 800b29a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b29c:	4313      	orrs	r3, r2
 800b29e:	68ba      	ldr	r2, [r7, #8]
 800b2a0:	0151      	lsls	r1, r2, #5
 800b2a2:	68fa      	ldr	r2, [r7, #12]
 800b2a4:	440a      	add	r2, r1
 800b2a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	e036      	b.n	800b324 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2bc:	69da      	ldr	r2, [r3, #28]
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	f003 030f 	and.w	r3, r3, #15
 800b2c6:	2101      	movs	r1, #1
 800b2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800b2cc:	041b      	lsls	r3, r3, #16
 800b2ce:	68f9      	ldr	r1, [r7, #12]
 800b2d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d11a      	bne.n	800b324 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	015a      	lsls	r2, r3, #5
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2fa:	681a      	ldr	r2, [r3, #0]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	68db      	ldr	r3, [r3, #12]
 800b300:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	791b      	ldrb	r3, [r3, #4]
 800b308:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b30a:	430b      	orrs	r3, r1
 800b30c:	4313      	orrs	r3, r2
 800b30e:	68ba      	ldr	r2, [r7, #8]
 800b310:	0151      	lsls	r1, r2, #5
 800b312:	68fa      	ldr	r2, [r7, #12]
 800b314:	440a      	add	r2, r1
 800b316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b31e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b322:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3714      	adds	r7, #20
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
	...

0800b334 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	785b      	ldrb	r3, [r3, #1]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d161      	bne.n	800b414 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b366:	d11f      	bne.n	800b3a8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	68ba      	ldr	r2, [r7, #8]
 800b378:	0151      	lsls	r1, r2, #5
 800b37a:	68fa      	ldr	r2, [r7, #12]
 800b37c:	440a      	add	r2, r1
 800b37e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b382:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b386:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	68ba      	ldr	r2, [r7, #8]
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f003 030f 	and.w	r3, r3, #15
 800b3b8:	2101      	movs	r1, #1
 800b3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b3be:	b29b      	uxth	r3, r3
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	68f9      	ldr	r1, [r7, #12]
 800b3c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3c8:	4013      	ands	r3, r2
 800b3ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3d2:	69da      	ldr	r2, [r3, #28]
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	f003 030f 	and.w	r3, r3, #15
 800b3dc:	2101      	movs	r1, #1
 800b3de:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e2:	b29b      	uxth	r3, r3
 800b3e4:	43db      	mvns	r3, r3
 800b3e6:	68f9      	ldr	r1, [r7, #12]
 800b3e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3ec:	4013      	ands	r3, r2
 800b3ee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	681a      	ldr	r2, [r3, #0]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	0159      	lsls	r1, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	440b      	add	r3, r1
 800b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40a:	4619      	mov	r1, r3
 800b40c:	4b35      	ldr	r3, [pc, #212]	; (800b4e4 <USB_DeactivateEndpoint+0x1b0>)
 800b40e:	4013      	ands	r3, r2
 800b410:	600b      	str	r3, [r1, #0]
 800b412:	e060      	b.n	800b4d6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b42a:	d11f      	bne.n	800b46c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	0151      	lsls	r1, r2, #5
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	440a      	add	r2, r1
 800b442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b446:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b44a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	015a      	lsls	r2, r3, #5
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4413      	add	r3, r2
 800b454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68ba      	ldr	r2, [r7, #8]
 800b45c:	0151      	lsls	r1, r2, #5
 800b45e:	68fa      	ldr	r2, [r7, #12]
 800b460:	440a      	add	r2, r1
 800b462:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b46a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b472:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	f003 030f 	and.w	r3, r3, #15
 800b47c:	2101      	movs	r1, #1
 800b47e:	fa01 f303 	lsl.w	r3, r1, r3
 800b482:	041b      	lsls	r3, r3, #16
 800b484:	43db      	mvns	r3, r3
 800b486:	68f9      	ldr	r1, [r7, #12]
 800b488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b48c:	4013      	ands	r3, r2
 800b48e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b496:	69da      	ldr	r2, [r3, #28]
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	f003 030f 	and.w	r3, r3, #15
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a6:	041b      	lsls	r3, r3, #16
 800b4a8:	43db      	mvns	r3, r3
 800b4aa:	68f9      	ldr	r1, [r7, #12]
 800b4ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	0159      	lsls	r1, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	440b      	add	r3, r1
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <USB_DeactivateEndpoint+0x1b4>)
 800b4d2:	4013      	ands	r3, r2
 800b4d4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b4d6:	2300      	movs	r3, #0
}
 800b4d8:	4618      	mov	r0, r3
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr
 800b4e4:	ec337800 	.word	0xec337800
 800b4e8:	eff37800 	.word	0xeff37800

0800b4ec <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	781b      	ldrb	r3, [r3, #0]
 800b4fe:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	785b      	ldrb	r3, [r3, #1]
 800b504:	2b01      	cmp	r3, #1
 800b506:	f040 810a 	bne.w	800b71e <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	699b      	ldr	r3, [r3, #24]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d132      	bne.n	800b578 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	015a      	lsls	r2, r3, #5
 800b516:	697b      	ldr	r3, [r7, #20]
 800b518:	4413      	add	r3, r2
 800b51a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51e:	691b      	ldr	r3, [r3, #16]
 800b520:	693a      	ldr	r2, [r7, #16]
 800b522:	0151      	lsls	r1, r2, #5
 800b524:	697a      	ldr	r2, [r7, #20]
 800b526:	440a      	add	r2, r1
 800b528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b530:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b534:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	697b      	ldr	r3, [r7, #20]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	0151      	lsls	r1, r2, #5
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	440a      	add	r2, r1
 800b54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b554:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	0151      	lsls	r1, r2, #5
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	440a      	add	r2, r1
 800b56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b570:	0cdb      	lsrs	r3, r3, #19
 800b572:	04db      	lsls	r3, r3, #19
 800b574:	6113      	str	r3, [r2, #16]
 800b576:	e074      	b.n	800b662 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	693a      	ldr	r2, [r7, #16]
 800b588:	0151      	lsls	r1, r2, #5
 800b58a:	697a      	ldr	r2, [r7, #20]
 800b58c:	440a      	add	r2, r1
 800b58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b592:	0cdb      	lsrs	r3, r3, #19
 800b594:	04db      	lsls	r3, r3, #19
 800b596:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b598:	693b      	ldr	r3, [r7, #16]
 800b59a:	015a      	lsls	r2, r3, #5
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	4413      	add	r3, r2
 800b5a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	693a      	ldr	r2, [r7, #16]
 800b5a8:	0151      	lsls	r1, r2, #5
 800b5aa:	697a      	ldr	r2, [r7, #20]
 800b5ac:	440a      	add	r2, r1
 800b5ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5b2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b5b6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b5ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	6999      	ldr	r1, [r3, #24]
 800b5ce:	683b      	ldr	r3, [r7, #0]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	440b      	add	r3, r1
 800b5d4:	1e59      	subs	r1, r3, #1
 800b5d6:	683b      	ldr	r3, [r7, #0]
 800b5d8:	68db      	ldr	r3, [r3, #12]
 800b5da:	fbb1 f3f3 	udiv	r3, r1, r3
 800b5de:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b5e0:	4b9e      	ldr	r3, [pc, #632]	; (800b85c <USB_EPStartXfer+0x370>)
 800b5e2:	400b      	ands	r3, r1
 800b5e4:	6939      	ldr	r1, [r7, #16]
 800b5e6:	0148      	lsls	r0, r1, #5
 800b5e8:	6979      	ldr	r1, [r7, #20]
 800b5ea:	4401      	add	r1, r0
 800b5ec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b5f0:	4313      	orrs	r3, r2
 800b5f2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	015a      	lsls	r2, r3, #5
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	4413      	add	r3, r2
 800b5fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b600:	691a      	ldr	r2, [r3, #16]
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	699b      	ldr	r3, [r3, #24]
 800b606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b60a:	6939      	ldr	r1, [r7, #16]
 800b60c:	0148      	lsls	r0, r1, #5
 800b60e:	6979      	ldr	r1, [r7, #20]
 800b610:	4401      	add	r1, r0
 800b612:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b616:	4313      	orrs	r3, r2
 800b618:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	791b      	ldrb	r3, [r3, #4]
 800b61e:	2b01      	cmp	r3, #1
 800b620:	d11f      	bne.n	800b662 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	015a      	lsls	r2, r3, #5
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	4413      	add	r3, r2
 800b62a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	693a      	ldr	r2, [r7, #16]
 800b632:	0151      	lsls	r1, r2, #5
 800b634:	697a      	ldr	r2, [r7, #20]
 800b636:	440a      	add	r2, r1
 800b638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b63c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b640:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	015a      	lsls	r2, r3, #5
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	4413      	add	r3, r2
 800b64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b64e:	691b      	ldr	r3, [r3, #16]
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	0151      	lsls	r1, r2, #5
 800b654:	697a      	ldr	r2, [r7, #20]
 800b656:	440a      	add	r2, r1
 800b658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b65c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b660:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	015a      	lsls	r2, r3, #5
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	4413      	add	r3, r2
 800b66a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	0151      	lsls	r1, r2, #5
 800b674:	697a      	ldr	r2, [r7, #20]
 800b676:	440a      	add	r2, r1
 800b678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b67c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b680:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	791b      	ldrb	r3, [r3, #4]
 800b686:	2b01      	cmp	r3, #1
 800b688:	d015      	beq.n	800b6b6 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	699b      	ldr	r3, [r3, #24]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	f000 8106 	beq.w	800b8a0 <USB_EPStartXfer+0x3b4>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b69a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	781b      	ldrb	r3, [r3, #0]
 800b6a0:	f003 030f 	and.w	r3, r3, #15
 800b6a4:	2101      	movs	r1, #1
 800b6a6:	fa01 f303 	lsl.w	r3, r1, r3
 800b6aa:	6979      	ldr	r1, [r7, #20]
 800b6ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	634b      	str	r3, [r1, #52]	; 0x34
 800b6b4:	e0f4      	b.n	800b8a0 <USB_EPStartXfer+0x3b4>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6bc:	689b      	ldr	r3, [r3, #8]
 800b6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d110      	bne.n	800b6e8 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	015a      	lsls	r2, r3, #5
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	693a      	ldr	r2, [r7, #16]
 800b6d6:	0151      	lsls	r1, r2, #5
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	440a      	add	r2, r1
 800b6dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b6e4:	6013      	str	r3, [r2, #0]
 800b6e6:	e00f      	b.n	800b708 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	697b      	ldr	r3, [r7, #20]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	0151      	lsls	r1, r2, #5
 800b6fa:	697a      	ldr	r2, [r7, #20]
 800b6fc:	440a      	add	r2, r1
 800b6fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b706:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	6919      	ldr	r1, [r3, #16]
 800b70c:	683b      	ldr	r3, [r7, #0]
 800b70e:	781a      	ldrb	r2, [r3, #0]
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	b29b      	uxth	r3, r3
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 fa94 	bl	800bc44 <USB_WritePacket>
 800b71c:	e0c0      	b.n	800b8a0 <USB_EPStartXfer+0x3b4>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	015a      	lsls	r2, r3, #5
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	4413      	add	r3, r2
 800b726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	0151      	lsls	r1, r2, #5
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	440a      	add	r2, r1
 800b734:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b738:	0cdb      	lsrs	r3, r3, #19
 800b73a:	04db      	lsls	r3, r3, #19
 800b73c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	015a      	lsls	r2, r3, #5
 800b742:	697b      	ldr	r3, [r7, #20]
 800b744:	4413      	add	r3, r2
 800b746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	0151      	lsls	r1, r2, #5
 800b750:	697a      	ldr	r2, [r7, #20]
 800b752:	440a      	add	r2, r1
 800b754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b758:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b75c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b760:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	699b      	ldr	r3, [r3, #24]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d123      	bne.n	800b7b2 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b776:	691a      	ldr	r2, [r3, #16]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	68db      	ldr	r3, [r3, #12]
 800b77c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b780:	6939      	ldr	r1, [r7, #16]
 800b782:	0148      	lsls	r0, r1, #5
 800b784:	6979      	ldr	r1, [r7, #20]
 800b786:	4401      	add	r1, r0
 800b788:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b78c:	4313      	orrs	r3, r2
 800b78e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	015a      	lsls	r2, r3, #5
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	4413      	add	r3, r2
 800b798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	0151      	lsls	r1, r2, #5
 800b7a2:	697a      	ldr	r2, [r7, #20]
 800b7a4:	440a      	add	r2, r1
 800b7a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7ae:	6113      	str	r3, [r2, #16]
 800b7b0:	e037      	b.n	800b822 <USB_EPStartXfer+0x336>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	68db      	ldr	r3, [r3, #12]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	1e5a      	subs	r2, r3, #1
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	68db      	ldr	r3, [r3, #12]
 800b7c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7c6:	81fb      	strh	r3, [r7, #14]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	68db      	ldr	r3, [r3, #12]
 800b7cc:	89fa      	ldrh	r2, [r7, #14]
 800b7ce:	fb03 f202 	mul.w	r2, r3, r2
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b7d6:	693b      	ldr	r3, [r7, #16]
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e2:	691a      	ldr	r2, [r3, #16]
 800b7e4:	89fb      	ldrh	r3, [r7, #14]
 800b7e6:	04d9      	lsls	r1, r3, #19
 800b7e8:	4b1c      	ldr	r3, [pc, #112]	; (800b85c <USB_EPStartXfer+0x370>)
 800b7ea:	400b      	ands	r3, r1
 800b7ec:	6939      	ldr	r1, [r7, #16]
 800b7ee:	0148      	lsls	r0, r1, #5
 800b7f0:	6979      	ldr	r1, [r7, #20]
 800b7f2:	4401      	add	r1, r0
 800b7f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b808:	691a      	ldr	r2, [r3, #16]
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	69db      	ldr	r3, [r3, #28]
 800b80e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b812:	6939      	ldr	r1, [r7, #16]
 800b814:	0148      	lsls	r0, r1, #5
 800b816:	6979      	ldr	r1, [r7, #20]
 800b818:	4401      	add	r1, r0
 800b81a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b81e:	4313      	orrs	r3, r2
 800b820:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	791b      	ldrb	r3, [r3, #4]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d12a      	bne.n	800b880 <USB_EPStartXfer+0x394>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b830:	689b      	ldr	r3, [r3, #8]
 800b832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b836:	2b00      	cmp	r3, #0
 800b838:	d112      	bne.n	800b860 <USB_EPStartXfer+0x374>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	015a      	lsls	r2, r3, #5
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	4413      	add	r3, r2
 800b842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	0151      	lsls	r1, r2, #5
 800b84c:	697a      	ldr	r2, [r7, #20]
 800b84e:	440a      	add	r2, r1
 800b850:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b858:	6013      	str	r3, [r2, #0]
 800b85a:	e011      	b.n	800b880 <USB_EPStartXfer+0x394>
 800b85c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	015a      	lsls	r2, r3, #5
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	4413      	add	r3, r2
 800b868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	693a      	ldr	r2, [r7, #16]
 800b870:	0151      	lsls	r1, r2, #5
 800b872:	697a      	ldr	r2, [r7, #20]
 800b874:	440a      	add	r2, r1
 800b876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b87a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b87e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	693a      	ldr	r2, [r7, #16]
 800b890:	0151      	lsls	r1, r2, #5
 800b892:	697a      	ldr	r2, [r7, #20]
 800b894:	440a      	add	r2, r1
 800b896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b89a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b89e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3718      	adds	r7, #24
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop

0800b8ac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b085      	sub	sp, #20
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	785b      	ldrb	r3, [r3, #1]
 800b8c4:	2b01      	cmp	r3, #1
 800b8c6:	f040 80ab 	bne.w	800ba20 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	699b      	ldr	r3, [r3, #24]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d132      	bne.n	800b938 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8d2:	68bb      	ldr	r3, [r7, #8]
 800b8d4:	015a      	lsls	r2, r3, #5
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	4413      	add	r3, r2
 800b8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	68ba      	ldr	r2, [r7, #8]
 800b8e2:	0151      	lsls	r1, r2, #5
 800b8e4:	68fa      	ldr	r2, [r7, #12]
 800b8e6:	440a      	add	r2, r1
 800b8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b902:	691b      	ldr	r3, [r3, #16]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	0151      	lsls	r1, r2, #5
 800b908:	68fa      	ldr	r2, [r7, #12]
 800b90a:	440a      	add	r2, r1
 800b90c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b910:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b914:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	015a      	lsls	r2, r3, #5
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	4413      	add	r3, r2
 800b91e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b922:	691b      	ldr	r3, [r3, #16]
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	0151      	lsls	r1, r2, #5
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	440a      	add	r2, r1
 800b92c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b930:	0cdb      	lsrs	r3, r3, #19
 800b932:	04db      	lsls	r3, r3, #19
 800b934:	6113      	str	r3, [r2, #16]
 800b936:	e04e      	b.n	800b9d6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	015a      	lsls	r2, r3, #5
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	4413      	add	r3, r2
 800b940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	68ba      	ldr	r2, [r7, #8]
 800b948:	0151      	lsls	r1, r2, #5
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	440a      	add	r2, r1
 800b94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b952:	0cdb      	lsrs	r3, r3, #19
 800b954:	04db      	lsls	r3, r3, #19
 800b956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	015a      	lsls	r2, r3, #5
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	4413      	add	r3, r2
 800b960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	68ba      	ldr	r2, [r7, #8]
 800b968:	0151      	lsls	r1, r2, #5
 800b96a:	68fa      	ldr	r2, [r7, #12]
 800b96c:	440a      	add	r2, r1
 800b96e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b972:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b976:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b97a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	699a      	ldr	r2, [r3, #24]
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	68db      	ldr	r3, [r3, #12]
 800b984:	429a      	cmp	r2, r3
 800b986:	d903      	bls.n	800b990 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 800b988:	683b      	ldr	r3, [r7, #0]
 800b98a:	68da      	ldr	r2, [r3, #12]
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	015a      	lsls	r2, r3, #5
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b99c:	691b      	ldr	r3, [r3, #16]
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	0151      	lsls	r1, r2, #5
 800b9a2:	68fa      	ldr	r2, [r7, #12]
 800b9a4:	440a      	add	r2, r1
 800b9a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b9b0:	68bb      	ldr	r3, [r7, #8]
 800b9b2:	015a      	lsls	r2, r3, #5
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	4413      	add	r3, r2
 800b9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9bc:	691a      	ldr	r2, [r3, #16]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9c6:	68b9      	ldr	r1, [r7, #8]
 800b9c8:	0148      	lsls	r0, r1, #5
 800b9ca:	68f9      	ldr	r1, [r7, #12]
 800b9cc:	4401      	add	r1, r0
 800b9ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	015a      	lsls	r2, r3, #5
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	4413      	add	r3, r2
 800b9de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68ba      	ldr	r2, [r7, #8]
 800b9e6:	0151      	lsls	r1, r2, #5
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	440a      	add	r2, r1
 800b9ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b9f4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	699b      	ldr	r3, [r3, #24]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d071      	beq.n	800bae2 <USB_EP0StartXfer+0x236>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	2101      	movs	r1, #1
 800ba10:	fa01 f303 	lsl.w	r3, r1, r3
 800ba14:	68f9      	ldr	r1, [r7, #12]
 800ba16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba1a:	4313      	orrs	r3, r2
 800ba1c:	634b      	str	r3, [r1, #52]	; 0x34
 800ba1e:	e060      	b.n	800bae2 <USB_EP0StartXfer+0x236>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	68ba      	ldr	r2, [r7, #8]
 800ba30:	0151      	lsls	r1, r2, #5
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	440a      	add	r2, r1
 800ba36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3a:	0cdb      	lsrs	r3, r3, #19
 800ba3c:	04db      	lsls	r3, r3, #19
 800ba3e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	015a      	lsls	r2, r3, #5
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	4413      	add	r3, r2
 800ba48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba4c:	691b      	ldr	r3, [r3, #16]
 800ba4e:	68ba      	ldr	r2, [r7, #8]
 800ba50:	0151      	lsls	r1, r2, #5
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	440a      	add	r2, r1
 800ba56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba62:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	699b      	ldr	r3, [r3, #24]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	68da      	ldr	r2, [r3, #12]
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	68da      	ldr	r2, [r3, #12]
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	0151      	lsls	r1, r2, #5
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	440a      	add	r2, r1
 800ba92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baa8:	691a      	ldr	r2, [r3, #16]
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	69db      	ldr	r3, [r3, #28]
 800baae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bab2:	68b9      	ldr	r1, [r7, #8]
 800bab4:	0148      	lsls	r0, r1, #5
 800bab6:	68f9      	ldr	r1, [r7, #12]
 800bab8:	4401      	add	r1, r0
 800baba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800babe:	4313      	orrs	r3, r2
 800bac0:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	015a      	lsls	r2, r3, #5
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	4413      	add	r3, r2
 800baca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	0151      	lsls	r1, r2, #5
 800bad4:	68fa      	ldr	r2, [r7, #12]
 800bad6:	440a      	add	r2, r1
 800bad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800badc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bae0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bae2:	2300      	movs	r3, #0
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b087      	sub	sp, #28
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bafa:	2300      	movs	r3, #0
 800bafc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bafe:	2300      	movs	r3, #0
 800bb00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	785b      	ldrb	r3, [r3, #1]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d14a      	bne.n	800bba4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	781b      	ldrb	r3, [r3, #0]
 800bb12:	015a      	lsls	r2, r3, #5
 800bb14:	693b      	ldr	r3, [r7, #16]
 800bb16:	4413      	add	r3, r2
 800bb18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb26:	f040 8086 	bne.w	800bc36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	015a      	lsls	r2, r3, #5
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	4413      	add	r3, r2
 800bb34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	7812      	ldrb	r2, [r2, #0]
 800bb3e:	0151      	lsls	r1, r2, #5
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	440a      	add	r2, r1
 800bb44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	683a      	ldr	r2, [r7, #0]
 800bb60:	7812      	ldrb	r2, [r2, #0]
 800bb62:	0151      	lsls	r1, r2, #5
 800bb64:	693a      	ldr	r2, [r7, #16]
 800bb66:	440a      	add	r2, r1
 800bb68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	3301      	adds	r3, #1
 800bb76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb7e:	4293      	cmp	r3, r2
 800bb80:	d902      	bls.n	800bb88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bb82:	2301      	movs	r3, #1
 800bb84:	75fb      	strb	r3, [r7, #23]
          break;
 800bb86:	e056      	b.n	800bc36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	015a      	lsls	r2, r3, #5
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	4413      	add	r3, r2
 800bb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bba0:	d0e7      	beq.n	800bb72 <USB_EPStopXfer+0x82>
 800bba2:	e048      	b.n	800bc36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	015a      	lsls	r2, r3, #5
 800bbaa:	693b      	ldr	r3, [r7, #16]
 800bbac:	4413      	add	r3, r2
 800bbae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbbc:	d13b      	bne.n	800bc36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	015a      	lsls	r2, r3, #5
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	7812      	ldrb	r2, [r2, #0]
 800bbd2:	0151      	lsls	r1, r2, #5
 800bbd4:	693a      	ldr	r2, [r7, #16]
 800bbd6:	440a      	add	r2, r1
 800bbd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbdc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bbe0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	7812      	ldrb	r2, [r2, #0]
 800bbf6:	0151      	lsls	r1, r2, #5
 800bbf8:	693a      	ldr	r2, [r7, #16]
 800bbfa:	440a      	add	r2, r1
 800bbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f242 7210 	movw	r2, #10000	; 0x2710
 800bc12:	4293      	cmp	r3, r2
 800bc14:	d902      	bls.n	800bc1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	75fb      	strb	r3, [r7, #23]
          break;
 800bc1a:	e00c      	b.n	800bc36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	015a      	lsls	r2, r3, #5
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	4413      	add	r3, r2
 800bc26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc34:	d0e7      	beq.n	800bc06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bc36:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	371c      	adds	r7, #28
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b089      	sub	sp, #36	; 0x24
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	60f8      	str	r0, [r7, #12]
 800bc4c:	60b9      	str	r1, [r7, #8]
 800bc4e:	4611      	mov	r1, r2
 800bc50:	461a      	mov	r2, r3
 800bc52:	460b      	mov	r3, r1
 800bc54:	71fb      	strb	r3, [r7, #7]
 800bc56:	4613      	mov	r3, r2
 800bc58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800bc62:	88bb      	ldrh	r3, [r7, #4]
 800bc64:	3303      	adds	r3, #3
 800bc66:	089b      	lsrs	r3, r3, #2
 800bc68:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	e018      	b.n	800bca2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc70:	79fb      	ldrb	r3, [r7, #7]
 800bc72:	031a      	lsls	r2, r3, #12
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	4413      	add	r3, r2
 800bc78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	69fb      	ldr	r3, [r7, #28]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	6013      	str	r3, [r2, #0]
    pSrc++;
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	3301      	adds	r3, #1
 800bc88:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	3301      	adds	r3, #1
 800bc8e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	3301      	adds	r3, #1
 800bc94:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800bc9c:	69bb      	ldr	r3, [r7, #24]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	61bb      	str	r3, [r7, #24]
 800bca2:	69ba      	ldr	r2, [r7, #24]
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	429a      	cmp	r2, r3
 800bca8:	d3e2      	bcc.n	800bc70 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3724      	adds	r7, #36	; 0x24
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b08b      	sub	sp, #44	; 0x2c
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	4613      	mov	r3, r2
 800bcc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bcce:	88fb      	ldrh	r3, [r7, #6]
 800bcd0:	089b      	lsrs	r3, r3, #2
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bcd6:	88fb      	ldrh	r3, [r7, #6]
 800bcd8:	f003 0303 	and.w	r3, r3, #3
 800bcdc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bcde:	2300      	movs	r3, #0
 800bce0:	623b      	str	r3, [r7, #32]
 800bce2:	e014      	b.n	800bd0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcee:	601a      	str	r2, [r3, #0]
    pDest++;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	3301      	adds	r3, #1
 800bcf4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcfe:	3301      	adds	r3, #1
 800bd00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd04:	3301      	adds	r3, #1
 800bd06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bd08:	6a3b      	ldr	r3, [r7, #32]
 800bd0a:	3301      	adds	r3, #1
 800bd0c:	623b      	str	r3, [r7, #32]
 800bd0e:	6a3a      	ldr	r2, [r7, #32]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d3e6      	bcc.n	800bce4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bd16:	8bfb      	ldrh	r3, [r7, #30]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d01e      	beq.n	800bd5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd26:	461a      	mov	r2, r3
 800bd28:	f107 0310 	add.w	r3, r7, #16
 800bd2c:	6812      	ldr	r2, [r2, #0]
 800bd2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bd30:	693a      	ldr	r2, [r7, #16]
 800bd32:	6a3b      	ldr	r3, [r7, #32]
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	00db      	lsls	r3, r3, #3
 800bd38:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3c:	b2da      	uxtb	r2, r3
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd40:	701a      	strb	r2, [r3, #0]
      i++;
 800bd42:	6a3b      	ldr	r3, [r7, #32]
 800bd44:	3301      	adds	r3, #1
 800bd46:	623b      	str	r3, [r7, #32]
      pDest++;
 800bd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bd4e:	8bfb      	ldrh	r3, [r7, #30]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd54:	8bfb      	ldrh	r3, [r7, #30]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d1ea      	bne.n	800bd30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	372c      	adds	r7, #44	; 0x2c
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr

0800bd68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b085      	sub	sp, #20
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	785b      	ldrb	r3, [r3, #1]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d12c      	bne.n	800bdde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd84:	68bb      	ldr	r3, [r7, #8]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	db12      	blt.n	800bdbc <USB_EPSetStall+0x54>
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00f      	beq.n	800bdbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	015a      	lsls	r2, r3, #5
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	4413      	add	r3, r2
 800bda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68ba      	ldr	r2, [r7, #8]
 800bdac:	0151      	lsls	r1, r2, #5
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	440a      	add	r2, r1
 800bdb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bdba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	015a      	lsls	r2, r3, #5
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	4413      	add	r3, r2
 800bdc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	0151      	lsls	r1, r2, #5
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	440a      	add	r2, r1
 800bdd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdda:	6013      	str	r3, [r2, #0]
 800bddc:	e02b      	b.n	800be36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	db12      	blt.n	800be16 <USB_EPSetStall+0xae>
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00f      	beq.n	800be16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	015a      	lsls	r2, r3, #5
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	4413      	add	r3, r2
 800bdfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	68ba      	ldr	r2, [r7, #8]
 800be06:	0151      	lsls	r1, r2, #5
 800be08:	68fa      	ldr	r2, [r7, #12]
 800be0a:	440a      	add	r2, r1
 800be0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	015a      	lsls	r2, r3, #5
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4413      	add	r3, r2
 800be1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	0151      	lsls	r1, r2, #5
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	440a      	add	r2, r1
 800be2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be36:	2300      	movs	r3, #0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3714      	adds	r7, #20
 800be3c:	46bd      	mov	sp, r7
 800be3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be42:	4770      	bx	lr

0800be44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be44:	b480      	push	{r7}
 800be46:	b085      	sub	sp, #20
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
 800be4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be52:	683b      	ldr	r3, [r7, #0]
 800be54:	781b      	ldrb	r3, [r3, #0]
 800be56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	785b      	ldrb	r3, [r3, #1]
 800be5c:	2b01      	cmp	r3, #1
 800be5e:	d128      	bne.n	800beb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	0151      	lsls	r1, r2, #5
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	440a      	add	r2, r1
 800be76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	791b      	ldrb	r3, [r3, #4]
 800be84:	2b03      	cmp	r3, #3
 800be86:	d003      	beq.n	800be90 <USB_EPClearStall+0x4c>
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	791b      	ldrb	r3, [r3, #4]
 800be8c:	2b02      	cmp	r3, #2
 800be8e:	d138      	bne.n	800bf02 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	015a      	lsls	r2, r3, #5
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4413      	add	r3, r2
 800be98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68ba      	ldr	r2, [r7, #8]
 800bea0:	0151      	lsls	r1, r2, #5
 800bea2:	68fa      	ldr	r2, [r7, #12]
 800bea4:	440a      	add	r2, r1
 800bea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800beae:	6013      	str	r3, [r2, #0]
 800beb0:	e027      	b.n	800bf02 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	0151      	lsls	r1, r2, #5
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	440a      	add	r2, r1
 800bec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800becc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bed0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	791b      	ldrb	r3, [r3, #4]
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d003      	beq.n	800bee2 <USB_EPClearStall+0x9e>
 800beda:	683b      	ldr	r3, [r7, #0]
 800bedc:	791b      	ldrb	r3, [r3, #4]
 800bede:	2b02      	cmp	r3, #2
 800bee0:	d10f      	bne.n	800bf02 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800befc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf00:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	460b      	mov	r3, r1
 800bf1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	68fa      	ldr	r2, [r7, #12]
 800bf2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf2e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bf32:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf3a:	681a      	ldr	r2, [r3, #0]
 800bf3c:	78fb      	ldrb	r3, [r7, #3]
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bf44:	68f9      	ldr	r1, [r7, #12]
 800bf46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf4a:	4313      	orrs	r3, r2
 800bf4c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf4e:	2300      	movs	r3, #0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3714      	adds	r7, #20
 800bf54:	46bd      	mov	sp, r7
 800bf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf5a:	4770      	bx	lr

0800bf5c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf5c:	b480      	push	{r7}
 800bf5e:	b085      	sub	sp, #20
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	68fa      	ldr	r2, [r7, #12]
 800bf72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf76:	f023 0303 	bic.w	r3, r3, #3
 800bf7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	68fa      	ldr	r2, [r7, #12]
 800bf86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf8a:	f023 0302 	bic.w	r3, r3, #2
 800bf8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf90:	2300      	movs	r3, #0
}
 800bf92:	4618      	mov	r0, r3
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68fa      	ldr	r2, [r7, #12]
 800bfb4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bfb8:	f023 0303 	bic.w	r3, r3, #3
 800bfbc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bfcc:	f043 0302 	orr.w	r3, r3, #2
 800bfd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfd2:	2300      	movs	r3, #0
}
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr

0800bfe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfe0:	b480      	push	{r7}
 800bfe2:	b085      	sub	sp, #20
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	695b      	ldr	r3, [r3, #20]
 800bfec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	699b      	ldr	r3, [r3, #24]
 800bff2:	68fa      	ldr	r2, [r7, #12]
 800bff4:	4013      	ands	r3, r2
 800bff6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bff8:	68fb      	ldr	r3, [r7, #12]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c006:	b480      	push	{r7}
 800c008:	b085      	sub	sp, #20
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c022:	69db      	ldr	r3, [r3, #28]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	4013      	ands	r3, r2
 800c028:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	0c1b      	lsrs	r3, r3, #16
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04c:	699b      	ldr	r3, [r3, #24]
 800c04e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c056:	69db      	ldr	r3, [r3, #28]
 800c058:	68ba      	ldr	r2, [r7, #8]
 800c05a:	4013      	ands	r3, r2
 800c05c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c05e:	68bb      	ldr	r3, [r7, #8]
 800c060:	b29b      	uxth	r3, r3
}
 800c062:	4618      	mov	r0, r3
 800c064:	3714      	adds	r7, #20
 800c066:	46bd      	mov	sp, r7
 800c068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06c:	4770      	bx	lr

0800c06e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c06e:	b480      	push	{r7}
 800c070:	b085      	sub	sp, #20
 800c072:	af00      	add	r7, sp, #0
 800c074:	6078      	str	r0, [r7, #4]
 800c076:	460b      	mov	r3, r1
 800c078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c07e:	78fb      	ldrb	r3, [r7, #3]
 800c080:	015a      	lsls	r2, r3, #5
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	4413      	add	r3, r2
 800c086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c094:	695b      	ldr	r3, [r3, #20]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	4013      	ands	r3, r2
 800c09a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c09c:	68bb      	ldr	r3, [r7, #8]
}
 800c09e:	4618      	mov	r0, r3
 800c0a0:	3714      	adds	r7, #20
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a8:	4770      	bx	lr

0800c0aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c0aa:	b480      	push	{r7}
 800c0ac:	b087      	sub	sp, #28
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	6078      	str	r0, [r7, #4]
 800c0b2:	460b      	mov	r3, r1
 800c0b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c0ce:	78fb      	ldrb	r3, [r7, #3]
 800c0d0:	f003 030f 	and.w	r3, r3, #15
 800c0d4:	68fa      	ldr	r2, [r7, #12]
 800c0d6:	fa22 f303 	lsr.w	r3, r2, r3
 800c0da:	01db      	lsls	r3, r3, #7
 800c0dc:	b2db      	uxtb	r3, r3
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	4313      	orrs	r3, r2
 800c0e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0e4:	78fb      	ldrb	r3, [r7, #3]
 800c0e6:	015a      	lsls	r2, r3, #5
 800c0e8:	697b      	ldr	r3, [r7, #20]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	371c      	adds	r7, #28
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	f003 0301 	and.w	r3, r3, #1
}
 800c116:	4618      	mov	r0, r3
 800c118:	370c      	adds	r7, #12
 800c11a:	46bd      	mov	sp, r7
 800c11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c120:	4770      	bx	lr

0800c122 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c122:	b480      	push	{r7}
 800c124:	b085      	sub	sp, #20
 800c126:	af00      	add	r7, sp, #0
 800c128:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	68fa      	ldr	r2, [r7, #12]
 800c138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c13c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c140:	f023 0307 	bic.w	r3, r3, #7
 800c144:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c158:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c15a:	2300      	movs	r3, #0
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3714      	adds	r7, #20
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr

0800c168 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800c168:	b480      	push	{r7}
 800c16a:	b085      	sub	sp, #20
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	333c      	adds	r3, #60	; 0x3c
 800c17a:	3304      	adds	r3, #4
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	4a1c      	ldr	r2, [pc, #112]	; (800c1f4 <USB_EP0_OutStart+0x8c>)
 800c184:	4293      	cmp	r3, r2
 800c186:	d90a      	bls.n	800c19e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c194:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c198:	d101      	bne.n	800c19e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800c19a:	2300      	movs	r3, #0
 800c19c:	e024      	b.n	800c1e8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a4:	461a      	mov	r2, r3
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1b0:	691b      	ldr	r3, [r3, #16]
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c4:	691b      	ldr	r3, [r3, #16]
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1cc:	f043 0318 	orr.w	r3, r3, #24
 800c1d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d8:	691b      	ldr	r3, [r3, #16]
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c1e4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr
 800c1f4:	4f54300a 	.word	0x4f54300a

0800c1f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b085      	sub	sp, #20
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c200:	2300      	movs	r3, #0
 800c202:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	3301      	adds	r3, #1
 800c208:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	4a13      	ldr	r2, [pc, #76]	; (800c25c <USB_CoreReset+0x64>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d901      	bls.n	800c216 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	e01b      	b.n	800c24e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	691b      	ldr	r3, [r3, #16]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	daf2      	bge.n	800c204 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c21e:	2300      	movs	r3, #0
 800c220:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	691b      	ldr	r3, [r3, #16]
 800c226:	f043 0201 	orr.w	r2, r3, #1
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3301      	adds	r3, #1
 800c232:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	4a09      	ldr	r2, [pc, #36]	; (800c25c <USB_CoreReset+0x64>)
 800c238:	4293      	cmp	r3, r2
 800c23a:	d901      	bls.n	800c240 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c23c:	2303      	movs	r3, #3
 800c23e:	e006      	b.n	800c24e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	691b      	ldr	r3, [r3, #16]
 800c244:	f003 0301 	and.w	r3, r3, #1
 800c248:	2b01      	cmp	r3, #1
 800c24a:	d0f0      	beq.n	800c22e <USB_CoreReset+0x36>

  return HAL_OK;
 800c24c:	2300      	movs	r3, #0
}
 800c24e:	4618      	mov	r0, r3
 800c250:	3714      	adds	r7, #20
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr
 800c25a:	bf00      	nop
 800c25c:	00030d40 	.word	0x00030d40

0800c260 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b084      	sub	sp, #16
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	460b      	mov	r3, r1
 800c26a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c26c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c270:	f002 fa64 	bl	800e73c <USBD_static_malloc>
 800c274:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d105      	bne.n	800c288 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800c284:	2302      	movs	r3, #2
 800c286:	e066      	b.n	800c356 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68fa      	ldr	r2, [r7, #12]
 800c28c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	7c1b      	ldrb	r3, [r3, #16]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d119      	bne.n	800c2cc <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c29c:	2202      	movs	r2, #2
 800c29e:	2181      	movs	r1, #129	; 0x81
 800c2a0:	6878      	ldr	r0, [r7, #4]
 800c2a2:	f002 f837 	bl	800e314 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	2201      	movs	r2, #1
 800c2aa:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c2ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	2101      	movs	r1, #1
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f002 f82d 	bl	800e314 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	2201      	movs	r2, #1
 800c2be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2210      	movs	r2, #16
 800c2c6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c2ca:	e016      	b.n	800c2fa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c2cc:	2340      	movs	r3, #64	; 0x40
 800c2ce:	2202      	movs	r2, #2
 800c2d0:	2181      	movs	r1, #129	; 0x81
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f002 f81e 	bl	800e314 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c2de:	2340      	movs	r3, #64	; 0x40
 800c2e0:	2202      	movs	r2, #2
 800c2e2:	2101      	movs	r1, #1
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f002 f815 	bl	800e314 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2201      	movs	r2, #1
 800c2ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2210      	movs	r2, #16
 800c2f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c2fa:	2308      	movs	r3, #8
 800c2fc:	2203      	movs	r2, #3
 800c2fe:	2182      	movs	r1, #130	; 0x82
 800c300:	6878      	ldr	r0, [r7, #4]
 800c302:	f002 f807 	bl	800e314 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	2201      	movs	r2, #1
 800c30a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2200      	movs	r2, #0
 800c31c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2200      	movs	r2, #0
 800c324:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	7c1b      	ldrb	r3, [r3, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d109      	bne.n	800c344 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c336:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c33a:	2101      	movs	r1, #1
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f002 f963 	bl	800e608 <USBD_LL_PrepareReceive>
 800c342:	e007      	b.n	800c354 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c34a:	2340      	movs	r3, #64	; 0x40
 800c34c:	2101      	movs	r1, #1
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f002 f95a 	bl	800e608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c354:	2300      	movs	r3, #0
}
 800c356:	4618      	mov	r0, r3
 800c358:	3710      	adds	r7, #16
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}

0800c35e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c35e:	b580      	push	{r7, lr}
 800c360:	b082      	sub	sp, #8
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
 800c366:	460b      	mov	r3, r1
 800c368:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c36a:	2181      	movs	r1, #129	; 0x81
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f002 f80f 	bl	800e390 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	2200      	movs	r2, #0
 800c376:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c378:	2101      	movs	r1, #1
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f002 f808 	bl	800e390 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c388:	2182      	movs	r1, #130	; 0x82
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f002 f800 	bl	800e390 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2200      	movs	r2, #0
 800c394:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00e      	beq.n	800c3c8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f002 f9cc 	bl	800e758 <USBD_static_free>
    pdev->pClassData = NULL;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c3c8:	2300      	movs	r3, #0
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
	...

0800c3d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c3d4:	b580      	push	{r7, lr}
 800c3d6:	b086      	sub	sp, #24
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
 800c3dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3e4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d101      	bne.n	800c3fc <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c3f8:	2303      	movs	r3, #3
 800c3fa:	e0af      	b.n	800c55c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c404:	2b00      	cmp	r3, #0
 800c406:	d03f      	beq.n	800c488 <USBD_CDC_Setup+0xb4>
 800c408:	2b20      	cmp	r3, #32
 800c40a:	f040 809f 	bne.w	800c54c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	88db      	ldrh	r3, [r3, #6]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d02e      	beq.n	800c474 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	781b      	ldrb	r3, [r3, #0]
 800c41a:	b25b      	sxtb	r3, r3
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	da16      	bge.n	800c44e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c42c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c42e:	683a      	ldr	r2, [r7, #0]
 800c430:	88d2      	ldrh	r2, [r2, #6]
 800c432:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	88db      	ldrh	r3, [r3, #6]
 800c438:	2b07      	cmp	r3, #7
 800c43a:	bf28      	it	cs
 800c43c:	2307      	movcs	r3, #7
 800c43e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	89fa      	ldrh	r2, [r7, #14]
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f001 fb13 	bl	800da72 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c44c:	e085      	b.n	800c55a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	785a      	ldrb	r2, [r3, #1]
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	88db      	ldrh	r3, [r3, #6]
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	693b      	ldr	r3, [r7, #16]
 800c460:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c464:	6939      	ldr	r1, [r7, #16]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	88db      	ldrh	r3, [r3, #6]
 800c46a:	461a      	mov	r2, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f001 fb2c 	bl	800daca <USBD_CtlPrepareRx>
      break;
 800c472:	e072      	b.n	800c55a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	7850      	ldrb	r0, [r2, #1]
 800c480:	2200      	movs	r2, #0
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	4798      	blx	r3
      break;
 800c486:	e068      	b.n	800c55a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	785b      	ldrb	r3, [r3, #1]
 800c48c:	2b0b      	cmp	r3, #11
 800c48e:	d852      	bhi.n	800c536 <USBD_CDC_Setup+0x162>
 800c490:	a201      	add	r2, pc, #4	; (adr r2, 800c498 <USBD_CDC_Setup+0xc4>)
 800c492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c496:	bf00      	nop
 800c498:	0800c4c9 	.word	0x0800c4c9
 800c49c:	0800c545 	.word	0x0800c545
 800c4a0:	0800c537 	.word	0x0800c537
 800c4a4:	0800c537 	.word	0x0800c537
 800c4a8:	0800c537 	.word	0x0800c537
 800c4ac:	0800c537 	.word	0x0800c537
 800c4b0:	0800c537 	.word	0x0800c537
 800c4b4:	0800c537 	.word	0x0800c537
 800c4b8:	0800c537 	.word	0x0800c537
 800c4bc:	0800c537 	.word	0x0800c537
 800c4c0:	0800c4f3 	.word	0x0800c4f3
 800c4c4:	0800c51d 	.word	0x0800c51d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ce:	b2db      	uxtb	r3, r3
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	d107      	bne.n	800c4e4 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c4d4:	f107 030a 	add.w	r3, r7, #10
 800c4d8:	2202      	movs	r2, #2
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f001 fac8 	bl	800da72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c4e2:	e032      	b.n	800c54a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c4e4:	6839      	ldr	r1, [r7, #0]
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f001 fa52 	bl	800d990 <USBD_CtlError>
            ret = USBD_FAIL;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	75fb      	strb	r3, [r7, #23]
          break;
 800c4f0:	e02b      	b.n	800c54a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4f8:	b2db      	uxtb	r3, r3
 800c4fa:	2b03      	cmp	r3, #3
 800c4fc:	d107      	bne.n	800c50e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c4fe:	f107 030d 	add.w	r3, r7, #13
 800c502:	2201      	movs	r2, #1
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f001 fab3 	bl	800da72 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c50c:	e01d      	b.n	800c54a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f001 fa3d 	bl	800d990 <USBD_CtlError>
            ret = USBD_FAIL;
 800c516:	2303      	movs	r3, #3
 800c518:	75fb      	strb	r3, [r7, #23]
          break;
 800c51a:	e016      	b.n	800c54a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c522:	b2db      	uxtb	r3, r3
 800c524:	2b03      	cmp	r3, #3
 800c526:	d00f      	beq.n	800c548 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c528:	6839      	ldr	r1, [r7, #0]
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 fa30 	bl	800d990 <USBD_CtlError>
            ret = USBD_FAIL;
 800c530:	2303      	movs	r3, #3
 800c532:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c534:	e008      	b.n	800c548 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c536:	6839      	ldr	r1, [r7, #0]
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f001 fa29 	bl	800d990 <USBD_CtlError>
          ret = USBD_FAIL;
 800c53e:	2303      	movs	r3, #3
 800c540:	75fb      	strb	r3, [r7, #23]
          break;
 800c542:	e002      	b.n	800c54a <USBD_CDC_Setup+0x176>
          break;
 800c544:	bf00      	nop
 800c546:	e008      	b.n	800c55a <USBD_CDC_Setup+0x186>
          break;
 800c548:	bf00      	nop
      }
      break;
 800c54a:	e006      	b.n	800c55a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f001 fa1e 	bl	800d990 <USBD_CtlError>
      ret = USBD_FAIL;
 800c554:	2303      	movs	r3, #3
 800c556:	75fb      	strb	r3, [r7, #23]
      break;
 800c558:	bf00      	nop
  }

  return (uint8_t)ret;
 800c55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3718      	adds	r7, #24
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c576:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d101      	bne.n	800c586 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c582:	2303      	movs	r3, #3
 800c584:	e04f      	b.n	800c626 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c58c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c58e:	78fa      	ldrb	r2, [r7, #3]
 800c590:	6879      	ldr	r1, [r7, #4]
 800c592:	4613      	mov	r3, r2
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	009b      	lsls	r3, r3, #2
 800c59a:	440b      	add	r3, r1
 800c59c:	3318      	adds	r3, #24
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d029      	beq.n	800c5f8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c5a4:	78fa      	ldrb	r2, [r7, #3]
 800c5a6:	6879      	ldr	r1, [r7, #4]
 800c5a8:	4613      	mov	r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	4413      	add	r3, r2
 800c5ae:	009b      	lsls	r3, r3, #2
 800c5b0:	440b      	add	r3, r1
 800c5b2:	3318      	adds	r3, #24
 800c5b4:	681a      	ldr	r2, [r3, #0]
 800c5b6:	78f9      	ldrb	r1, [r7, #3]
 800c5b8:	68f8      	ldr	r0, [r7, #12]
 800c5ba:	460b      	mov	r3, r1
 800c5bc:	00db      	lsls	r3, r3, #3
 800c5be:	440b      	add	r3, r1
 800c5c0:	009b      	lsls	r3, r3, #2
 800c5c2:	4403      	add	r3, r0
 800c5c4:	3348      	adds	r3, #72	; 0x48
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c5cc:	fb01 f303 	mul.w	r3, r1, r3
 800c5d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d110      	bne.n	800c5f8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c5d6:	78fa      	ldrb	r2, [r7, #3]
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	4413      	add	r3, r2
 800c5e0:	009b      	lsls	r3, r3, #2
 800c5e2:	440b      	add	r3, r1
 800c5e4:	3318      	adds	r3, #24
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c5ea:	78f9      	ldrb	r1, [r7, #3]
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f001 ffd1 	bl	800e598 <USBD_LL_Transmit>
 800c5f6:	e015      	b.n	800c624 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c606:	691b      	ldr	r3, [r3, #16]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	68ba      	ldr	r2, [r7, #8]
 800c616:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c620:	78fa      	ldrb	r2, [r7, #3]
 800c622:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c624:	2300      	movs	r3, #0
}
 800c626:	4618      	mov	r0, r3
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}

0800c62e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c62e:	b580      	push	{r7, lr}
 800c630:	b084      	sub	sp, #16
 800c632:	af00      	add	r7, sp, #0
 800c634:	6078      	str	r0, [r7, #4]
 800c636:	460b      	mov	r3, r1
 800c638:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c640:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d101      	bne.n	800c650 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c64c:	2303      	movs	r3, #3
 800c64e:	e015      	b.n	800c67c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c650:	78fb      	ldrb	r3, [r7, #3]
 800c652:	4619      	mov	r1, r3
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f002 f80f 	bl	800e678 <USBD_LL_GetRxDataSize>
 800c65a:	4602      	mov	r2, r0
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c668:	68db      	ldr	r3, [r3, #12]
 800c66a:	68fa      	ldr	r2, [r7, #12]
 800c66c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c676:	4611      	mov	r1, r2
 800c678:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c67a:	2300      	movs	r3, #0
}
 800c67c:	4618      	mov	r0, r3
 800c67e:	3710      	adds	r7, #16
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b084      	sub	sp, #16
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c692:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d101      	bne.n	800c69e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c69a:	2303      	movs	r3, #3
 800c69c:	e01b      	b.n	800c6d6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d015      	beq.n	800c6d4 <USBD_CDC_EP0_RxReady+0x50>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c6ae:	2bff      	cmp	r3, #255	; 0xff
 800c6b0:	d010      	beq.n	800c6d4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6b8:	689b      	ldr	r3, [r3, #8]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c6c0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c6c2:	68fa      	ldr	r2, [r7, #12]
 800c6c4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c6c8:	b292      	uxth	r2, r2
 800c6ca:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	22ff      	movs	r2, #255	; 0xff
 800c6d0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3710      	adds	r7, #16
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
	...

0800c6e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2243      	movs	r2, #67	; 0x43
 800c6ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c6ee:	4b03      	ldr	r3, [pc, #12]	; (800c6fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	20000094 	.word	0x20000094

0800c700 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c700:	b480      	push	{r7}
 800c702:	b083      	sub	sp, #12
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2243      	movs	r2, #67	; 0x43
 800c70c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c70e:	4b03      	ldr	r3, [pc, #12]	; (800c71c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c710:	4618      	mov	r0, r3
 800c712:	370c      	adds	r7, #12
 800c714:	46bd      	mov	sp, r7
 800c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71a:	4770      	bx	lr
 800c71c:	20000050 	.word	0x20000050

0800c720 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c720:	b480      	push	{r7}
 800c722:	b083      	sub	sp, #12
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2243      	movs	r2, #67	; 0x43
 800c72c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c72e:	4b03      	ldr	r3, [pc, #12]	; (800c73c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	200000d8 	.word	0x200000d8

0800c740 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	220a      	movs	r2, #10
 800c74c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c74e:	4b03      	ldr	r3, [pc, #12]	; (800c75c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c750:	4618      	mov	r0, r3
 800c752:	370c      	adds	r7, #12
 800c754:	46bd      	mov	sp, r7
 800c756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75a:	4770      	bx	lr
 800c75c:	2000000c 	.word	0x2000000c

0800c760 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c760:	b480      	push	{r7}
 800c762:	b083      	sub	sp, #12
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c76a:	683b      	ldr	r3, [r7, #0]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d101      	bne.n	800c774 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c770:	2303      	movs	r3, #3
 800c772:	e004      	b.n	800c77e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c77c:	2300      	movs	r3, #0
}
 800c77e:	4618      	mov	r0, r3
 800c780:	370c      	adds	r7, #12
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c78a:	b480      	push	{r7}
 800c78c:	b087      	sub	sp, #28
 800c78e:	af00      	add	r7, sp, #0
 800c790:	60f8      	str	r0, [r7, #12]
 800c792:	60b9      	str	r1, [r7, #8]
 800c794:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c79c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c79e:	697b      	ldr	r3, [r7, #20]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c7a4:	2303      	movs	r3, #3
 800c7a6:	e008      	b.n	800c7ba <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	68ba      	ldr	r2, [r7, #8]
 800c7ac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c7b8:	2300      	movs	r3, #0
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b085      	sub	sp, #20
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c7d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d101      	bne.n	800c7e2 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e004      	b.n	800c7ec <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c7ea:	2300      	movs	r3, #0
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	3714      	adds	r7, #20
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f6:	4770      	bx	lr

0800c7f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c806:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d101      	bne.n	800c816 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c812:	2303      	movs	r3, #3
 800c814:	e016      	b.n	800c844 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	7c1b      	ldrb	r3, [r3, #16]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d109      	bne.n	800c832 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c824:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c828:	2101      	movs	r1, #1
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	f001 feec 	bl	800e608 <USBD_LL_PrepareReceive>
 800c830:	e007      	b.n	800c842 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c838:	2340      	movs	r3, #64	; 0x40
 800c83a:	2101      	movs	r1, #1
 800c83c:	6878      	ldr	r0, [r7, #4]
 800c83e:	f001 fee3 	bl	800e608 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c842:	2300      	movs	r3, #0
}
 800c844:	4618      	mov	r0, r3
 800c846:	3710      	adds	r7, #16
 800c848:	46bd      	mov	sp, r7
 800c84a:	bd80      	pop	{r7, pc}

0800c84c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c84c:	b580      	push	{r7, lr}
 800c84e:	b086      	sub	sp, #24
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	60b9      	str	r1, [r7, #8]
 800c856:	4613      	mov	r3, r2
 800c858:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d101      	bne.n	800c864 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c860:	2303      	movs	r3, #3
 800c862:	e01f      	b.n	800c8a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	2200      	movs	r2, #0
 800c868:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2200      	movs	r2, #0
 800c878:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d003      	beq.n	800c88a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2201      	movs	r2, #1
 800c88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	79fa      	ldrb	r2, [r7, #7]
 800c896:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	f001 fcbd 	bl	800e218 <USBD_LL_Init>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	3718      	adds	r7, #24
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
 800c8b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e016      	b.n	800c8f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	683a      	ldr	r2, [r7, #0]
 800c8c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00b      	beq.n	800c8f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e0:	f107 020e 	add.w	r2, r7, #14
 800c8e4:	4610      	mov	r0, r2
 800c8e6:	4798      	blx	r3
 800c8e8:	4602      	mov	r2, r0
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3710      	adds	r7, #16
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c8fa:	b580      	push	{r7, lr}
 800c8fc:	b082      	sub	sp, #8
 800c8fe:	af00      	add	r7, sp, #0
 800c900:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 fcd4 	bl	800e2b0 <USBD_LL_Start>
 800c908:	4603      	mov	r3, r0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c912:	b480      	push	{r7}
 800c914:	b083      	sub	sp, #12
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	460b      	mov	r3, r1
 800c932:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c934:	2303      	movs	r3, #3
 800c936:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d009      	beq.n	800c956 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	78fa      	ldrb	r2, [r7, #3]
 800c94c:	4611      	mov	r1, r2
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	4798      	blx	r3
 800c952:	4603      	mov	r3, r0
 800c954:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c956:	7bfb      	ldrb	r3, [r7, #15]
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3710      	adds	r7, #16
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b082      	sub	sp, #8
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
 800c968:	460b      	mov	r3, r1
 800c96a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c972:	2b00      	cmp	r3, #0
 800c974:	d007      	beq.n	800c986 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	78fa      	ldrb	r2, [r7, #3]
 800c980:	4611      	mov	r1, r2
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	4798      	blx	r3
  }

  return USBD_OK;
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}

0800c990 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c990:	b580      	push	{r7, lr}
 800c992:	b084      	sub	sp, #16
 800c994:	af00      	add	r7, sp, #0
 800c996:	6078      	str	r0, [r7, #4]
 800c998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9a0:	6839      	ldr	r1, [r7, #0]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f000 ffba 	bl	800d91c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2201      	movs	r2, #1
 800c9ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c9b6:	461a      	mov	r2, r3
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9c4:	f003 031f 	and.w	r3, r3, #31
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d01a      	beq.n	800ca02 <USBD_LL_SetupStage+0x72>
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d822      	bhi.n	800ca16 <USBD_LL_SetupStage+0x86>
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <USBD_LL_SetupStage+0x4a>
 800c9d4:	2b01      	cmp	r3, #1
 800c9d6:	d00a      	beq.n	800c9ee <USBD_LL_SetupStage+0x5e>
 800c9d8:	e01d      	b.n	800ca16 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 fa62 	bl	800ceac <USBD_StdDevReq>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ec:	e020      	b.n	800ca30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c9f4:	4619      	mov	r1, r3
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fac6 	bl	800cf88 <USBD_StdItfReq>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800ca00:	e016      	b.n	800ca30 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ca08:	4619      	mov	r1, r3
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fb05 	bl	800d01a <USBD_StdEPReq>
 800ca10:	4603      	mov	r3, r0
 800ca12:	73fb      	strb	r3, [r7, #15]
      break;
 800ca14:	e00c      	b.n	800ca30 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ca1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f001 fce9 	bl	800e3fc <USBD_LL_StallEP>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	73fb      	strb	r3, [r7, #15]
      break;
 800ca2e:	bf00      	nop
  }

  return ret;
 800ca30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3710      	adds	r7, #16
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b086      	sub	sp, #24
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	60f8      	str	r0, [r7, #12]
 800ca42:	460b      	mov	r3, r1
 800ca44:	607a      	str	r2, [r7, #4]
 800ca46:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ca48:	7afb      	ldrb	r3, [r7, #11]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d138      	bne.n	800cac0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ca54:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca5c:	2b03      	cmp	r3, #3
 800ca5e:	d14a      	bne.n	800caf6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	689a      	ldr	r2, [r3, #8]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d913      	bls.n	800ca94 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	689a      	ldr	r2, [r3, #8]
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	68db      	ldr	r3, [r3, #12]
 800ca74:	1ad2      	subs	r2, r2, r3
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	68da      	ldr	r2, [r3, #12]
 800ca7e:	693b      	ldr	r3, [r7, #16]
 800ca80:	689b      	ldr	r3, [r3, #8]
 800ca82:	4293      	cmp	r3, r2
 800ca84:	bf28      	it	cs
 800ca86:	4613      	movcs	r3, r2
 800ca88:	461a      	mov	r2, r3
 800ca8a:	6879      	ldr	r1, [r7, #4]
 800ca8c:	68f8      	ldr	r0, [r7, #12]
 800ca8e:	f001 f839 	bl	800db04 <USBD_CtlContinueRx>
 800ca92:	e030      	b.n	800caf6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9a:	b2db      	uxtb	r3, r3
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d10b      	bne.n	800cab8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d005      	beq.n	800cab8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab2:	691b      	ldr	r3, [r3, #16]
 800cab4:	68f8      	ldr	r0, [r7, #12]
 800cab6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f001 f834 	bl	800db26 <USBD_CtlSendStatus>
 800cabe:	e01a      	b.n	800caf6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b03      	cmp	r3, #3
 800caca:	d114      	bne.n	800caf6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00e      	beq.n	800caf6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cade:	699b      	ldr	r3, [r3, #24]
 800cae0:	7afa      	ldrb	r2, [r7, #11]
 800cae2:	4611      	mov	r1, r2
 800cae4:	68f8      	ldr	r0, [r7, #12]
 800cae6:	4798      	blx	r3
 800cae8:	4603      	mov	r3, r0
 800caea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800caec:	7dfb      	ldrb	r3, [r7, #23]
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d001      	beq.n	800caf6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800caf2:	7dfb      	ldrb	r3, [r7, #23]
 800caf4:	e000      	b.n	800caf8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3718      	adds	r7, #24
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b086      	sub	sp, #24
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	60f8      	str	r0, [r7, #12]
 800cb08:	460b      	mov	r3, r1
 800cb0a:	607a      	str	r2, [r7, #4]
 800cb0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800cb0e:	7afb      	ldrb	r3, [r7, #11]
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d16b      	bne.n	800cbec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3314      	adds	r3, #20
 800cb18:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb20:	2b02      	cmp	r3, #2
 800cb22:	d156      	bne.n	800cbd2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb24:	693b      	ldr	r3, [r7, #16]
 800cb26:	689a      	ldr	r2, [r3, #8]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	68db      	ldr	r3, [r3, #12]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d914      	bls.n	800cb5a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	689a      	ldr	r2, [r3, #8]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	1ad2      	subs	r2, r2, r3
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	689b      	ldr	r3, [r3, #8]
 800cb42:	461a      	mov	r2, r3
 800cb44:	6879      	ldr	r1, [r7, #4]
 800cb46:	68f8      	ldr	r0, [r7, #12]
 800cb48:	f000 ffae 	bl	800daa8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	2200      	movs	r2, #0
 800cb50:	2100      	movs	r1, #0
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f001 fd58 	bl	800e608 <USBD_LL_PrepareReceive>
 800cb58:	e03b      	b.n	800cbd2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb5a:	693b      	ldr	r3, [r7, #16]
 800cb5c:	68da      	ldr	r2, [r3, #12]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	689b      	ldr	r3, [r3, #8]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d11c      	bne.n	800cba0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	685a      	ldr	r2, [r3, #4]
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d316      	bcc.n	800cba0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	685a      	ldr	r2, [r3, #4]
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d20f      	bcs.n	800cba0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb80:	2200      	movs	r2, #0
 800cb82:	2100      	movs	r1, #0
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f000 ff8f 	bl	800daa8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb92:	2300      	movs	r3, #0
 800cb94:	2200      	movs	r2, #0
 800cb96:	2100      	movs	r1, #0
 800cb98:	68f8      	ldr	r0, [r7, #12]
 800cb9a:	f001 fd35 	bl	800e608 <USBD_LL_PrepareReceive>
 800cb9e:	e018      	b.n	800cbd2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d10b      	bne.n	800cbc4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbb2:	68db      	ldr	r3, [r3, #12]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d005      	beq.n	800cbc4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	68f8      	ldr	r0, [r7, #12]
 800cbc2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cbc4:	2180      	movs	r1, #128	; 0x80
 800cbc6:	68f8      	ldr	r0, [r7, #12]
 800cbc8:	f001 fc18 	bl	800e3fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cbcc:	68f8      	ldr	r0, [r7, #12]
 800cbce:	f000 ffbd 	bl	800db4c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d122      	bne.n	800cc22 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	f7ff fe98 	bl	800c912 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cbea:	e01a      	b.n	800cc22 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b03      	cmp	r3, #3
 800cbf6:	d114      	bne.n	800cc22 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbfe:	695b      	ldr	r3, [r3, #20]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d00e      	beq.n	800cc22 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc0a:	695b      	ldr	r3, [r3, #20]
 800cc0c:	7afa      	ldrb	r2, [r7, #11]
 800cc0e:	4611      	mov	r1, r2
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	4798      	blx	r3
 800cc14:	4603      	mov	r3, r0
 800cc16:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800cc18:	7dfb      	ldrb	r3, [r7, #23]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d001      	beq.n	800cc22 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800cc1e:	7dfb      	ldrb	r3, [r7, #23]
 800cc20:	e000      	b.n	800cc24 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800cc22:	2300      	movs	r3, #0
}
 800cc24:	4618      	mov	r0, r3
 800cc26:	3718      	adds	r7, #24
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2200      	movs	r2, #0
 800cc4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d101      	bne.n	800cc60 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	e02f      	b.n	800ccc0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00f      	beq.n	800cc8a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc70:	685b      	ldr	r3, [r3, #4]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d009      	beq.n	800cc8a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	687a      	ldr	r2, [r7, #4]
 800cc80:	6852      	ldr	r2, [r2, #4]
 800cc82:	b2d2      	uxtb	r2, r2
 800cc84:	4611      	mov	r1, r2
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc8a:	2340      	movs	r3, #64	; 0x40
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2100      	movs	r1, #0
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 fb3f 	bl	800e314 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	2201      	movs	r2, #1
 800cc9a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	2240      	movs	r2, #64	; 0x40
 800cca2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cca6:	2340      	movs	r3, #64	; 0x40
 800cca8:	2200      	movs	r2, #0
 800ccaa:	2180      	movs	r1, #128	; 0x80
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f001 fb31 	bl	800e314 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2201      	movs	r2, #1
 800ccb6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2240      	movs	r2, #64	; 0x40
 800ccbc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ccbe:	2300      	movs	r3, #0
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3708      	adds	r7, #8
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b083      	sub	sp, #12
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	78fa      	ldrb	r2, [r7, #3]
 800ccd8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ccda:	2300      	movs	r3, #0
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	370c      	adds	r7, #12
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf6:	b2da      	uxtb	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2204      	movs	r2, #4
 800cd02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	2b04      	cmp	r3, #4
 800cd26:	d106      	bne.n	800cd36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cd2e:	b2da      	uxtb	r2, r3
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	370c      	adds	r7, #12
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd44:	b580      	push	{r7, lr}
 800cd46:	b082      	sub	sp, #8
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d101      	bne.n	800cd5a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e012      	b.n	800cd80 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	2b03      	cmp	r3, #3
 800cd64:	d10b      	bne.n	800cd7e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd6c:	69db      	ldr	r3, [r3, #28]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d005      	beq.n	800cd7e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd78:	69db      	ldr	r3, [r3, #28]
 800cd7a:	6878      	ldr	r0, [r7, #4]
 800cd7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd7e:	2300      	movs	r3, #0
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	460b      	mov	r3, r1
 800cd92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	e014      	b.n	800cdcc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b03      	cmp	r3, #3
 800cdac:	d10d      	bne.n	800cdca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d007      	beq.n	800cdca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdc0:	6a1b      	ldr	r3, [r3, #32]
 800cdc2:	78fa      	ldrb	r2, [r7, #3]
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cdca:	2300      	movs	r3, #0
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d101      	bne.n	800cdee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800cdea:	2303      	movs	r3, #3
 800cdec:	e014      	b.n	800ce18 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf4:	b2db      	uxtb	r3, r3
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d10d      	bne.n	800ce16 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d007      	beq.n	800ce16 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	78fa      	ldrb	r2, [r7, #3]
 800ce10:	4611      	mov	r1, r2
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce16:	2300      	movs	r3, #0
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}

0800ce20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b083      	sub	sp, #12
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	370c      	adds	r7, #12
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce34:	4770      	bx	lr

0800ce36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2201      	movs	r2, #1
 800ce42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d009      	beq.n	800ce64 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce56:	685b      	ldr	r3, [r3, #4]
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	6852      	ldr	r2, [r2, #4]
 800ce5c:	b2d2      	uxtb	r2, r2
 800ce5e:	4611      	mov	r1, r2
 800ce60:	6878      	ldr	r0, [r7, #4]
 800ce62:	4798      	blx	r3
  }

  return USBD_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3708      	adds	r7, #8
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}

0800ce6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce6e:	b480      	push	{r7}
 800ce70:	b087      	sub	sp, #28
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	3301      	adds	r3, #1
 800ce84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ce8c:	8a3b      	ldrh	r3, [r7, #16]
 800ce8e:	021b      	lsls	r3, r3, #8
 800ce90:	b21a      	sxth	r2, r3
 800ce92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	b21b      	sxth	r3, r3
 800ce9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ce9c:	89fb      	ldrh	r3, [r7, #14]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	371c      	adds	r7, #28
 800cea2:	46bd      	mov	sp, r7
 800cea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea8:	4770      	bx	lr
	...

0800ceac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b084      	sub	sp, #16
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
 800ceb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cec2:	2b40      	cmp	r3, #64	; 0x40
 800cec4:	d005      	beq.n	800ced2 <USBD_StdDevReq+0x26>
 800cec6:	2b40      	cmp	r3, #64	; 0x40
 800cec8:	d853      	bhi.n	800cf72 <USBD_StdDevReq+0xc6>
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d00b      	beq.n	800cee6 <USBD_StdDevReq+0x3a>
 800cece:	2b20      	cmp	r3, #32
 800ced0:	d14f      	bne.n	800cf72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ced8:	689b      	ldr	r3, [r3, #8]
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
 800cee0:	4603      	mov	r3, r0
 800cee2:	73fb      	strb	r3, [r7, #15]
      break;
 800cee4:	e04a      	b.n	800cf7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	785b      	ldrb	r3, [r3, #1]
 800ceea:	2b09      	cmp	r3, #9
 800ceec:	d83b      	bhi.n	800cf66 <USBD_StdDevReq+0xba>
 800ceee:	a201      	add	r2, pc, #4	; (adr r2, 800cef4 <USBD_StdDevReq+0x48>)
 800cef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef4:	0800cf49 	.word	0x0800cf49
 800cef8:	0800cf5d 	.word	0x0800cf5d
 800cefc:	0800cf67 	.word	0x0800cf67
 800cf00:	0800cf53 	.word	0x0800cf53
 800cf04:	0800cf67 	.word	0x0800cf67
 800cf08:	0800cf27 	.word	0x0800cf27
 800cf0c:	0800cf1d 	.word	0x0800cf1d
 800cf10:	0800cf67 	.word	0x0800cf67
 800cf14:	0800cf3f 	.word	0x0800cf3f
 800cf18:	0800cf31 	.word	0x0800cf31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 f9de 	bl	800d2e0 <USBD_GetDescriptor>
          break;
 800cf24:	e024      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fb6d 	bl	800d608 <USBD_SetAddress>
          break;
 800cf2e:	e01f      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf30:	6839      	ldr	r1, [r7, #0]
 800cf32:	6878      	ldr	r0, [r7, #4]
 800cf34:	f000 fbac 	bl	800d690 <USBD_SetConfig>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	73fb      	strb	r3, [r7, #15]
          break;
 800cf3c:	e018      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf3e:	6839      	ldr	r1, [r7, #0]
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 fc4b 	bl	800d7dc <USBD_GetConfig>
          break;
 800cf46:	e013      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf48:	6839      	ldr	r1, [r7, #0]
 800cf4a:	6878      	ldr	r0, [r7, #4]
 800cf4c:	f000 fc7c 	bl	800d848 <USBD_GetStatus>
          break;
 800cf50:	e00e      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf52:	6839      	ldr	r1, [r7, #0]
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 fcab 	bl	800d8b0 <USBD_SetFeature>
          break;
 800cf5a:	e009      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fcba 	bl	800d8d8 <USBD_ClrFeature>
          break;
 800cf64:	e004      	b.n	800cf70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cf66:	6839      	ldr	r1, [r7, #0]
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fd11 	bl	800d990 <USBD_CtlError>
          break;
 800cf6e:	bf00      	nop
      }
      break;
 800cf70:	e004      	b.n	800cf7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cf72:	6839      	ldr	r1, [r7, #0]
 800cf74:	6878      	ldr	r0, [r7, #4]
 800cf76:	f000 fd0b 	bl	800d990 <USBD_CtlError>
      break;
 800cf7a:	bf00      	nop
  }

  return ret;
 800cf7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop

0800cf88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf9e:	2b40      	cmp	r3, #64	; 0x40
 800cfa0:	d005      	beq.n	800cfae <USBD_StdItfReq+0x26>
 800cfa2:	2b40      	cmp	r3, #64	; 0x40
 800cfa4:	d82f      	bhi.n	800d006 <USBD_StdItfReq+0x7e>
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <USBD_StdItfReq+0x26>
 800cfaa:	2b20      	cmp	r3, #32
 800cfac:	d12b      	bne.n	800d006 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	3b01      	subs	r3, #1
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	d81d      	bhi.n	800cff8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	889b      	ldrh	r3, [r3, #4]
 800cfc0:	b2db      	uxtb	r3, r3
 800cfc2:	2b01      	cmp	r3, #1
 800cfc4:	d813      	bhi.n	800cfee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	4798      	blx	r3
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	88db      	ldrh	r3, [r3, #6]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d110      	bne.n	800d002 <USBD_StdItfReq+0x7a>
 800cfe0:	7bfb      	ldrb	r3, [r7, #15]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d10d      	bne.n	800d002 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f000 fd9d 	bl	800db26 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cfec:	e009      	b.n	800d002 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cfee:	6839      	ldr	r1, [r7, #0]
 800cff0:	6878      	ldr	r0, [r7, #4]
 800cff2:	f000 fccd 	bl	800d990 <USBD_CtlError>
          break;
 800cff6:	e004      	b.n	800d002 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fcc8 	bl	800d990 <USBD_CtlError>
          break;
 800d000:	e000      	b.n	800d004 <USBD_StdItfReq+0x7c>
          break;
 800d002:	bf00      	nop
      }
      break;
 800d004:	e004      	b.n	800d010 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fcc1 	bl	800d990 <USBD_CtlError>
      break;
 800d00e:	bf00      	nop
  }

  return ret;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}

0800d01a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	889b      	ldrh	r3, [r3, #4]
 800d02c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d036:	2b40      	cmp	r3, #64	; 0x40
 800d038:	d007      	beq.n	800d04a <USBD_StdEPReq+0x30>
 800d03a:	2b40      	cmp	r3, #64	; 0x40
 800d03c:	f200 8145 	bhi.w	800d2ca <USBD_StdEPReq+0x2b0>
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00c      	beq.n	800d05e <USBD_StdEPReq+0x44>
 800d044:	2b20      	cmp	r3, #32
 800d046:	f040 8140 	bne.w	800d2ca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d050:	689b      	ldr	r3, [r3, #8]
 800d052:	6839      	ldr	r1, [r7, #0]
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	4798      	blx	r3
 800d058:	4603      	mov	r3, r0
 800d05a:	73fb      	strb	r3, [r7, #15]
      break;
 800d05c:	e13a      	b.n	800d2d4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d05e:	683b      	ldr	r3, [r7, #0]
 800d060:	785b      	ldrb	r3, [r3, #1]
 800d062:	2b03      	cmp	r3, #3
 800d064:	d007      	beq.n	800d076 <USBD_StdEPReq+0x5c>
 800d066:	2b03      	cmp	r3, #3
 800d068:	f300 8129 	bgt.w	800d2be <USBD_StdEPReq+0x2a4>
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d07f      	beq.n	800d170 <USBD_StdEPReq+0x156>
 800d070:	2b01      	cmp	r3, #1
 800d072:	d03c      	beq.n	800d0ee <USBD_StdEPReq+0xd4>
 800d074:	e123      	b.n	800d2be <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b02      	cmp	r3, #2
 800d080:	d002      	beq.n	800d088 <USBD_StdEPReq+0x6e>
 800d082:	2b03      	cmp	r3, #3
 800d084:	d016      	beq.n	800d0b4 <USBD_StdEPReq+0x9a>
 800d086:	e02c      	b.n	800d0e2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d088:	7bbb      	ldrb	r3, [r7, #14]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d00d      	beq.n	800d0aa <USBD_StdEPReq+0x90>
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	2b80      	cmp	r3, #128	; 0x80
 800d092:	d00a      	beq.n	800d0aa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d094:	7bbb      	ldrb	r3, [r7, #14]
 800d096:	4619      	mov	r1, r3
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f001 f9af 	bl	800e3fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d09e:	2180      	movs	r1, #128	; 0x80
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f001 f9ab 	bl	800e3fc <USBD_LL_StallEP>
 800d0a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0a8:	e020      	b.n	800d0ec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d0aa:	6839      	ldr	r1, [r7, #0]
 800d0ac:	6878      	ldr	r0, [r7, #4]
 800d0ae:	f000 fc6f 	bl	800d990 <USBD_CtlError>
              break;
 800d0b2:	e01b      	b.n	800d0ec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	885b      	ldrh	r3, [r3, #2]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d10e      	bne.n	800d0da <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d0bc:	7bbb      	ldrb	r3, [r7, #14]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d00b      	beq.n	800d0da <USBD_StdEPReq+0xc0>
 800d0c2:	7bbb      	ldrb	r3, [r7, #14]
 800d0c4:	2b80      	cmp	r3, #128	; 0x80
 800d0c6:	d008      	beq.n	800d0da <USBD_StdEPReq+0xc0>
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	88db      	ldrh	r3, [r3, #6]
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d104      	bne.n	800d0da <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0d0:	7bbb      	ldrb	r3, [r7, #14]
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f001 f991 	bl	800e3fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 fd23 	bl	800db26 <USBD_CtlSendStatus>

              break;
 800d0e0:	e004      	b.n	800d0ec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fc53 	bl	800d990 <USBD_CtlError>
              break;
 800d0ea:	bf00      	nop
          }
          break;
 800d0ec:	e0ec      	b.n	800d2c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0f4:	b2db      	uxtb	r3, r3
 800d0f6:	2b02      	cmp	r3, #2
 800d0f8:	d002      	beq.n	800d100 <USBD_StdEPReq+0xe6>
 800d0fa:	2b03      	cmp	r3, #3
 800d0fc:	d016      	beq.n	800d12c <USBD_StdEPReq+0x112>
 800d0fe:	e030      	b.n	800d162 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d100:	7bbb      	ldrb	r3, [r7, #14]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00d      	beq.n	800d122 <USBD_StdEPReq+0x108>
 800d106:	7bbb      	ldrb	r3, [r7, #14]
 800d108:	2b80      	cmp	r3, #128	; 0x80
 800d10a:	d00a      	beq.n	800d122 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
 800d10e:	4619      	mov	r1, r3
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f001 f973 	bl	800e3fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d116:	2180      	movs	r1, #128	; 0x80
 800d118:	6878      	ldr	r0, [r7, #4]
 800d11a:	f001 f96f 	bl	800e3fc <USBD_LL_StallEP>
 800d11e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d120:	e025      	b.n	800d16e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800d122:	6839      	ldr	r1, [r7, #0]
 800d124:	6878      	ldr	r0, [r7, #4]
 800d126:	f000 fc33 	bl	800d990 <USBD_CtlError>
              break;
 800d12a:	e020      	b.n	800d16e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	885b      	ldrh	r3, [r3, #2]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d11b      	bne.n	800d16c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d004      	beq.n	800d148 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d13e:	7bbb      	ldrb	r3, [r7, #14]
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f001 f990 	bl	800e468 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f000 fcec 	bl	800db26 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	4798      	blx	r3
 800d15c:	4603      	mov	r3, r0
 800d15e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800d160:	e004      	b.n	800d16c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fc13 	bl	800d990 <USBD_CtlError>
              break;
 800d16a:	e000      	b.n	800d16e <USBD_StdEPReq+0x154>
              break;
 800d16c:	bf00      	nop
          }
          break;
 800d16e:	e0ab      	b.n	800d2c8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d176:	b2db      	uxtb	r3, r3
 800d178:	2b02      	cmp	r3, #2
 800d17a:	d002      	beq.n	800d182 <USBD_StdEPReq+0x168>
 800d17c:	2b03      	cmp	r3, #3
 800d17e:	d032      	beq.n	800d1e6 <USBD_StdEPReq+0x1cc>
 800d180:	e097      	b.n	800d2b2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d182:	7bbb      	ldrb	r3, [r7, #14]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d007      	beq.n	800d198 <USBD_StdEPReq+0x17e>
 800d188:	7bbb      	ldrb	r3, [r7, #14]
 800d18a:	2b80      	cmp	r3, #128	; 0x80
 800d18c:	d004      	beq.n	800d198 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fbfd 	bl	800d990 <USBD_CtlError>
                break;
 800d196:	e091      	b.n	800d2bc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d198:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	da0b      	bge.n	800d1b8 <USBD_StdEPReq+0x19e>
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d1a6:	4613      	mov	r3, r2
 800d1a8:	009b      	lsls	r3, r3, #2
 800d1aa:	4413      	add	r3, r2
 800d1ac:	009b      	lsls	r3, r3, #2
 800d1ae:	3310      	adds	r3, #16
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	3304      	adds	r3, #4
 800d1b6:	e00b      	b.n	800d1d0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1b8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1be:	4613      	mov	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d1ca:	687a      	ldr	r2, [r7, #4]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	3304      	adds	r3, #4
 800d1d0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1d8:	68bb      	ldr	r3, [r7, #8]
 800d1da:	2202      	movs	r2, #2
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 fc47 	bl	800da72 <USBD_CtlSendData>
              break;
 800d1e4:	e06a      	b.n	800d2bc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d1e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	da11      	bge.n	800d212 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d1ee:	7bbb      	ldrb	r3, [r7, #14]
 800d1f0:	f003 020f 	and.w	r2, r3, #15
 800d1f4:	6879      	ldr	r1, [r7, #4]
 800d1f6:	4613      	mov	r3, r2
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	440b      	add	r3, r1
 800d200:	3324      	adds	r3, #36	; 0x24
 800d202:	881b      	ldrh	r3, [r3, #0]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d117      	bne.n	800d238 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d208:	6839      	ldr	r1, [r7, #0]
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f000 fbc0 	bl	800d990 <USBD_CtlError>
                  break;
 800d210:	e054      	b.n	800d2bc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d212:	7bbb      	ldrb	r3, [r7, #14]
 800d214:	f003 020f 	and.w	r2, r3, #15
 800d218:	6879      	ldr	r1, [r7, #4]
 800d21a:	4613      	mov	r3, r2
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	4413      	add	r3, r2
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	440b      	add	r3, r1
 800d224:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d228:	881b      	ldrh	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d104      	bne.n	800d238 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fbad 	bl	800d990 <USBD_CtlError>
                  break;
 800d236:	e041      	b.n	800d2bc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d238:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	da0b      	bge.n	800d258 <USBD_StdEPReq+0x23e>
 800d240:	7bbb      	ldrb	r3, [r7, #14]
 800d242:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d246:	4613      	mov	r3, r2
 800d248:	009b      	lsls	r3, r3, #2
 800d24a:	4413      	add	r3, r2
 800d24c:	009b      	lsls	r3, r3, #2
 800d24e:	3310      	adds	r3, #16
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	4413      	add	r3, r2
 800d254:	3304      	adds	r3, #4
 800d256:	e00b      	b.n	800d270 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d258:	7bbb      	ldrb	r3, [r7, #14]
 800d25a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d25e:	4613      	mov	r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	4413      	add	r3, r2
 800d264:	009b      	lsls	r3, r3, #2
 800d266:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d26a:	687a      	ldr	r2, [r7, #4]
 800d26c:	4413      	add	r3, r2
 800d26e:	3304      	adds	r3, #4
 800d270:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d272:	7bbb      	ldrb	r3, [r7, #14]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d002      	beq.n	800d27e <USBD_StdEPReq+0x264>
 800d278:	7bbb      	ldrb	r3, [r7, #14]
 800d27a:	2b80      	cmp	r3, #128	; 0x80
 800d27c:	d103      	bne.n	800d286 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	e00e      	b.n	800d2a4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d286:	7bbb      	ldrb	r3, [r7, #14]
 800d288:	4619      	mov	r1, r3
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f001 f922 	bl	800e4d4 <USBD_LL_IsStallEP>
 800d290:	4603      	mov	r3, r0
 800d292:	2b00      	cmp	r3, #0
 800d294:	d003      	beq.n	800d29e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	2201      	movs	r2, #1
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	e002      	b.n	800d2a4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	2200      	movs	r2, #0
 800d2a2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2a4:	68bb      	ldr	r3, [r7, #8]
 800d2a6:	2202      	movs	r2, #2
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fbe1 	bl	800da72 <USBD_CtlSendData>
              break;
 800d2b0:	e004      	b.n	800d2bc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800d2b2:	6839      	ldr	r1, [r7, #0]
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fb6b 	bl	800d990 <USBD_CtlError>
              break;
 800d2ba:	bf00      	nop
          }
          break;
 800d2bc:	e004      	b.n	800d2c8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fb65 	bl	800d990 <USBD_CtlError>
          break;
 800d2c6:	bf00      	nop
      }
      break;
 800d2c8:	e004      	b.n	800d2d4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fb5f 	bl	800d990 <USBD_CtlError>
      break;
 800d2d2:	bf00      	nop
  }

  return ret;
 800d2d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
	...

0800d2e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b084      	sub	sp, #16
 800d2e4:	af00      	add	r7, sp, #0
 800d2e6:	6078      	str	r0, [r7, #4]
 800d2e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2ea:	2300      	movs	r3, #0
 800d2ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	885b      	ldrh	r3, [r3, #2]
 800d2fa:	0a1b      	lsrs	r3, r3, #8
 800d2fc:	b29b      	uxth	r3, r3
 800d2fe:	3b01      	subs	r3, #1
 800d300:	2b0e      	cmp	r3, #14
 800d302:	f200 8152 	bhi.w	800d5aa <USBD_GetDescriptor+0x2ca>
 800d306:	a201      	add	r2, pc, #4	; (adr r2, 800d30c <USBD_GetDescriptor+0x2c>)
 800d308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d30c:	0800d37d 	.word	0x0800d37d
 800d310:	0800d395 	.word	0x0800d395
 800d314:	0800d3d5 	.word	0x0800d3d5
 800d318:	0800d5ab 	.word	0x0800d5ab
 800d31c:	0800d5ab 	.word	0x0800d5ab
 800d320:	0800d54b 	.word	0x0800d54b
 800d324:	0800d577 	.word	0x0800d577
 800d328:	0800d5ab 	.word	0x0800d5ab
 800d32c:	0800d5ab 	.word	0x0800d5ab
 800d330:	0800d5ab 	.word	0x0800d5ab
 800d334:	0800d5ab 	.word	0x0800d5ab
 800d338:	0800d5ab 	.word	0x0800d5ab
 800d33c:	0800d5ab 	.word	0x0800d5ab
 800d340:	0800d5ab 	.word	0x0800d5ab
 800d344:	0800d349 	.word	0x0800d349
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d34e:	69db      	ldr	r3, [r3, #28]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d00b      	beq.n	800d36c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d35a:	69db      	ldr	r3, [r3, #28]
 800d35c:	687a      	ldr	r2, [r7, #4]
 800d35e:	7c12      	ldrb	r2, [r2, #16]
 800d360:	f107 0108 	add.w	r1, r7, #8
 800d364:	4610      	mov	r0, r2
 800d366:	4798      	blx	r3
 800d368:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d36a:	e126      	b.n	800d5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fb0e 	bl	800d990 <USBD_CtlError>
        err++;
 800d374:	7afb      	ldrb	r3, [r7, #11]
 800d376:	3301      	adds	r3, #1
 800d378:	72fb      	strb	r3, [r7, #11]
      break;
 800d37a:	e11e      	b.n	800d5ba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	687a      	ldr	r2, [r7, #4]
 800d386:	7c12      	ldrb	r2, [r2, #16]
 800d388:	f107 0108 	add.w	r1, r7, #8
 800d38c:	4610      	mov	r0, r2
 800d38e:	4798      	blx	r3
 800d390:	60f8      	str	r0, [r7, #12]
      break;
 800d392:	e112      	b.n	800d5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	7c1b      	ldrb	r3, [r3, #16]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10d      	bne.n	800d3b8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3a4:	f107 0208 	add.w	r2, r7, #8
 800d3a8:	4610      	mov	r0, r2
 800d3aa:	4798      	blx	r3
 800d3ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	3301      	adds	r3, #1
 800d3b2:	2202      	movs	r2, #2
 800d3b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d3b6:	e100      	b.n	800d5ba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3c0:	f107 0208 	add.w	r2, r7, #8
 800d3c4:	4610      	mov	r0, r2
 800d3c6:	4798      	blx	r3
 800d3c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	3301      	adds	r3, #1
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	701a      	strb	r2, [r3, #0]
      break;
 800d3d2:	e0f2      	b.n	800d5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	885b      	ldrh	r3, [r3, #2]
 800d3d8:	b2db      	uxtb	r3, r3
 800d3da:	2b05      	cmp	r3, #5
 800d3dc:	f200 80ac 	bhi.w	800d538 <USBD_GetDescriptor+0x258>
 800d3e0:	a201      	add	r2, pc, #4	; (adr r2, 800d3e8 <USBD_GetDescriptor+0x108>)
 800d3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e6:	bf00      	nop
 800d3e8:	0800d401 	.word	0x0800d401
 800d3ec:	0800d435 	.word	0x0800d435
 800d3f0:	0800d469 	.word	0x0800d469
 800d3f4:	0800d49d 	.word	0x0800d49d
 800d3f8:	0800d4d1 	.word	0x0800d4d1
 800d3fc:	0800d505 	.word	0x0800d505
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d406:	685b      	ldr	r3, [r3, #4]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00b      	beq.n	800d424 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	7c12      	ldrb	r2, [r2, #16]
 800d418:	f107 0108 	add.w	r1, r7, #8
 800d41c:	4610      	mov	r0, r2
 800d41e:	4798      	blx	r3
 800d420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d422:	e091      	b.n	800d548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d424:	6839      	ldr	r1, [r7, #0]
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fab2 	bl	800d990 <USBD_CtlError>
            err++;
 800d42c:	7afb      	ldrb	r3, [r7, #11]
 800d42e:	3301      	adds	r3, #1
 800d430:	72fb      	strb	r3, [r7, #11]
          break;
 800d432:	e089      	b.n	800d548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d00b      	beq.n	800d458 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d446:	689b      	ldr	r3, [r3, #8]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	7c12      	ldrb	r2, [r2, #16]
 800d44c:	f107 0108 	add.w	r1, r7, #8
 800d450:	4610      	mov	r0, r2
 800d452:	4798      	blx	r3
 800d454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d456:	e077      	b.n	800d548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d458:	6839      	ldr	r1, [r7, #0]
 800d45a:	6878      	ldr	r0, [r7, #4]
 800d45c:	f000 fa98 	bl	800d990 <USBD_CtlError>
            err++;
 800d460:	7afb      	ldrb	r3, [r7, #11]
 800d462:	3301      	adds	r3, #1
 800d464:	72fb      	strb	r3, [r7, #11]
          break;
 800d466:	e06f      	b.n	800d548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d46e:	68db      	ldr	r3, [r3, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d00b      	beq.n	800d48c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d47a:	68db      	ldr	r3, [r3, #12]
 800d47c:	687a      	ldr	r2, [r7, #4]
 800d47e:	7c12      	ldrb	r2, [r2, #16]
 800d480:	f107 0108 	add.w	r1, r7, #8
 800d484:	4610      	mov	r0, r2
 800d486:	4798      	blx	r3
 800d488:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d48a:	e05d      	b.n	800d548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fa7e 	bl	800d990 <USBD_CtlError>
            err++;
 800d494:	7afb      	ldrb	r3, [r7, #11]
 800d496:	3301      	adds	r3, #1
 800d498:	72fb      	strb	r3, [r7, #11]
          break;
 800d49a:	e055      	b.n	800d548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d00b      	beq.n	800d4c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4ae:	691b      	ldr	r3, [r3, #16]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	7c12      	ldrb	r2, [r2, #16]
 800d4b4:	f107 0108 	add.w	r1, r7, #8
 800d4b8:	4610      	mov	r0, r2
 800d4ba:	4798      	blx	r3
 800d4bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4be:	e043      	b.n	800d548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4c0:	6839      	ldr	r1, [r7, #0]
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fa64 	bl	800d990 <USBD_CtlError>
            err++;
 800d4c8:	7afb      	ldrb	r3, [r7, #11]
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ce:	e03b      	b.n	800d548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4d6:	695b      	ldr	r3, [r3, #20]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00b      	beq.n	800d4f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	687a      	ldr	r2, [r7, #4]
 800d4e6:	7c12      	ldrb	r2, [r2, #16]
 800d4e8:	f107 0108 	add.w	r1, r7, #8
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4f2:	e029      	b.n	800d548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4f4:	6839      	ldr	r1, [r7, #0]
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f000 fa4a 	bl	800d990 <USBD_CtlError>
            err++;
 800d4fc:	7afb      	ldrb	r3, [r7, #11]
 800d4fe:	3301      	adds	r3, #1
 800d500:	72fb      	strb	r3, [r7, #11]
          break;
 800d502:	e021      	b.n	800d548 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d50a:	699b      	ldr	r3, [r3, #24]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00b      	beq.n	800d528 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d516:	699b      	ldr	r3, [r3, #24]
 800d518:	687a      	ldr	r2, [r7, #4]
 800d51a:	7c12      	ldrb	r2, [r2, #16]
 800d51c:	f107 0108 	add.w	r1, r7, #8
 800d520:	4610      	mov	r0, r2
 800d522:	4798      	blx	r3
 800d524:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d526:	e00f      	b.n	800d548 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fa30 	bl	800d990 <USBD_CtlError>
            err++;
 800d530:	7afb      	ldrb	r3, [r7, #11]
 800d532:	3301      	adds	r3, #1
 800d534:	72fb      	strb	r3, [r7, #11]
          break;
 800d536:	e007      	b.n	800d548 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fa28 	bl	800d990 <USBD_CtlError>
          err++;
 800d540:	7afb      	ldrb	r3, [r7, #11]
 800d542:	3301      	adds	r3, #1
 800d544:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d546:	bf00      	nop
      }
      break;
 800d548:	e037      	b.n	800d5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	7c1b      	ldrb	r3, [r3, #16]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d109      	bne.n	800d566 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d55a:	f107 0208 	add.w	r2, r7, #8
 800d55e:	4610      	mov	r0, r2
 800d560:	4798      	blx	r3
 800d562:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d564:	e029      	b.n	800d5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d566:	6839      	ldr	r1, [r7, #0]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fa11 	bl	800d990 <USBD_CtlError>
        err++;
 800d56e:	7afb      	ldrb	r3, [r7, #11]
 800d570:	3301      	adds	r3, #1
 800d572:	72fb      	strb	r3, [r7, #11]
      break;
 800d574:	e021      	b.n	800d5ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	7c1b      	ldrb	r3, [r3, #16]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10d      	bne.n	800d59a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d586:	f107 0208 	add.w	r2, r7, #8
 800d58a:	4610      	mov	r0, r2
 800d58c:	4798      	blx	r3
 800d58e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3301      	adds	r3, #1
 800d594:	2207      	movs	r2, #7
 800d596:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d598:	e00f      	b.n	800d5ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d59a:	6839      	ldr	r1, [r7, #0]
 800d59c:	6878      	ldr	r0, [r7, #4]
 800d59e:	f000 f9f7 	bl	800d990 <USBD_CtlError>
        err++;
 800d5a2:	7afb      	ldrb	r3, [r7, #11]
 800d5a4:	3301      	adds	r3, #1
 800d5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800d5a8:	e007      	b.n	800d5ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d5aa:	6839      	ldr	r1, [r7, #0]
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 f9ef 	bl	800d990 <USBD_CtlError>
      err++;
 800d5b2:	7afb      	ldrb	r3, [r7, #11]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	72fb      	strb	r3, [r7, #11]
      break;
 800d5b8:	bf00      	nop
  }

  if (err != 0U)
 800d5ba:	7afb      	ldrb	r3, [r7, #11]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d11e      	bne.n	800d5fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	88db      	ldrh	r3, [r3, #6]
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d016      	beq.n	800d5f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d5c8:	893b      	ldrh	r3, [r7, #8]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d00e      	beq.n	800d5ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d5ce:	683b      	ldr	r3, [r7, #0]
 800d5d0:	88da      	ldrh	r2, [r3, #6]
 800d5d2:	893b      	ldrh	r3, [r7, #8]
 800d5d4:	4293      	cmp	r3, r2
 800d5d6:	bf28      	it	cs
 800d5d8:	4613      	movcs	r3, r2
 800d5da:	b29b      	uxth	r3, r3
 800d5dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d5de:	893b      	ldrh	r3, [r7, #8]
 800d5e0:	461a      	mov	r2, r3
 800d5e2:	68f9      	ldr	r1, [r7, #12]
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f000 fa44 	bl	800da72 <USBD_CtlSendData>
 800d5ea:	e009      	b.n	800d600 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d5ec:	6839      	ldr	r1, [r7, #0]
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f9ce 	bl	800d990 <USBD_CtlError>
 800d5f4:	e004      	b.n	800d600 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 fa95 	bl	800db26 <USBD_CtlSendStatus>
 800d5fc:	e000      	b.n	800d600 <USBD_GetDescriptor+0x320>
    return;
 800d5fe:	bf00      	nop
  }
}
 800d600:	3710      	adds	r7, #16
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
 800d606:	bf00      	nop

0800d608 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b084      	sub	sp, #16
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d612:	683b      	ldr	r3, [r7, #0]
 800d614:	889b      	ldrh	r3, [r3, #4]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d131      	bne.n	800d67e <USBD_SetAddress+0x76>
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	88db      	ldrh	r3, [r3, #6]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d12d      	bne.n	800d67e <USBD_SetAddress+0x76>
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	2b7f      	cmp	r3, #127	; 0x7f
 800d628:	d829      	bhi.n	800d67e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	885b      	ldrh	r3, [r3, #2]
 800d62e:	b2db      	uxtb	r3, r3
 800d630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d634:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d63c:	b2db      	uxtb	r3, r3
 800d63e:	2b03      	cmp	r3, #3
 800d640:	d104      	bne.n	800d64c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d642:	6839      	ldr	r1, [r7, #0]
 800d644:	6878      	ldr	r0, [r7, #4]
 800d646:	f000 f9a3 	bl	800d990 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d64a:	e01d      	b.n	800d688 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	7bfa      	ldrb	r2, [r7, #15]
 800d650:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d654:	7bfb      	ldrb	r3, [r7, #15]
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 ff67 	bl	800e52c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d65e:	6878      	ldr	r0, [r7, #4]
 800d660:	f000 fa61 	bl	800db26 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d664:	7bfb      	ldrb	r3, [r7, #15]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d004      	beq.n	800d674 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2202      	movs	r2, #2
 800d66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d672:	e009      	b.n	800d688 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2201      	movs	r2, #1
 800d678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d67c:	e004      	b.n	800d688 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f985 	bl	800d990 <USBD_CtlError>
  }
}
 800d686:	bf00      	nop
 800d688:	bf00      	nop
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b084      	sub	sp, #16
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d69e:	683b      	ldr	r3, [r7, #0]
 800d6a0:	885b      	ldrh	r3, [r3, #2]
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	4b4c      	ldr	r3, [pc, #304]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d6a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d6a8:	4b4b      	ldr	r3, [pc, #300]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d6aa:	781b      	ldrb	r3, [r3, #0]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d905      	bls.n	800d6bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d6b0:	6839      	ldr	r1, [r7, #0]
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 f96c 	bl	800d990 <USBD_CtlError>
    return USBD_FAIL;
 800d6b8:	2303      	movs	r3, #3
 800d6ba:	e088      	b.n	800d7ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	2b02      	cmp	r3, #2
 800d6c6:	d002      	beq.n	800d6ce <USBD_SetConfig+0x3e>
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d025      	beq.n	800d718 <USBD_SetConfig+0x88>
 800d6cc:	e071      	b.n	800d7b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d6ce:	4b42      	ldr	r3, [pc, #264]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d01c      	beq.n	800d710 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d6d6:	4b40      	ldr	r3, [pc, #256]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d6d8:	781b      	ldrb	r3, [r3, #0]
 800d6da:	461a      	mov	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6e0:	4b3d      	ldr	r3, [pc, #244]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d6e2:	781b      	ldrb	r3, [r3, #0]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f7ff f91e 	bl	800c928 <USBD_SetClassConfig>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d6f0:	7bfb      	ldrb	r3, [r7, #15]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d004      	beq.n	800d700 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d6f6:	6839      	ldr	r1, [r7, #0]
 800d6f8:	6878      	ldr	r0, [r7, #4]
 800d6fa:	f000 f949 	bl	800d990 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6fe:	e065      	b.n	800d7cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d700:	6878      	ldr	r0, [r7, #4]
 800d702:	f000 fa10 	bl	800db26 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	2203      	movs	r2, #3
 800d70a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d70e:	e05d      	b.n	800d7cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fa08 	bl	800db26 <USBD_CtlSendStatus>
      break;
 800d716:	e059      	b.n	800d7cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d718:	4b2f      	ldr	r3, [pc, #188]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d71a:	781b      	ldrb	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d112      	bne.n	800d746 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2202      	movs	r2, #2
 800d724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d728:	4b2b      	ldr	r3, [pc, #172]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	461a      	mov	r2, r3
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d732:	4b29      	ldr	r3, [pc, #164]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff f911 	bl	800c960 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f9f1 	bl	800db26 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d744:	e042      	b.n	800d7cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d746:	4b24      	ldr	r3, [pc, #144]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	461a      	mov	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	685b      	ldr	r3, [r3, #4]
 800d750:	429a      	cmp	r2, r3
 800d752:	d02a      	beq.n	800d7aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7ff f8ff 	bl	800c960 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d762:	4b1d      	ldr	r3, [pc, #116]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	461a      	mov	r2, r3
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d76c:	4b1a      	ldr	r3, [pc, #104]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d76e:	781b      	ldrb	r3, [r3, #0]
 800d770:	4619      	mov	r1, r3
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f7ff f8d8 	bl	800c928 <USBD_SetClassConfig>
 800d778:	4603      	mov	r3, r0
 800d77a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d00f      	beq.n	800d7a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f903 	bl	800d990 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	685b      	ldr	r3, [r3, #4]
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	4619      	mov	r1, r3
 800d792:	6878      	ldr	r0, [r7, #4]
 800d794:	f7ff f8e4 	bl	800c960 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2202      	movs	r2, #2
 800d79c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d7a0:	e014      	b.n	800d7cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 f9bf 	bl	800db26 <USBD_CtlSendStatus>
      break;
 800d7a8:	e010      	b.n	800d7cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f9bb 	bl	800db26 <USBD_CtlSendStatus>
      break;
 800d7b0:	e00c      	b.n	800d7cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d7b2:	6839      	ldr	r1, [r7, #0]
 800d7b4:	6878      	ldr	r0, [r7, #4]
 800d7b6:	f000 f8eb 	bl	800d990 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7ba:	4b07      	ldr	r3, [pc, #28]	; (800d7d8 <USBD_SetConfig+0x148>)
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	4619      	mov	r1, r3
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f7ff f8cd 	bl	800c960 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d7c6:	2303      	movs	r3, #3
 800d7c8:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ca:	bf00      	nop
  }

  return ret;
 800d7cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	20000964 	.word	0x20000964

0800d7dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b082      	sub	sp, #8
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	88db      	ldrh	r3, [r3, #6]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d004      	beq.n	800d7f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d7ee:	6839      	ldr	r1, [r7, #0]
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 f8cd 	bl	800d990 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d7f6:	e023      	b.n	800d840 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	2b02      	cmp	r3, #2
 800d802:	dc02      	bgt.n	800d80a <USBD_GetConfig+0x2e>
 800d804:	2b00      	cmp	r3, #0
 800d806:	dc03      	bgt.n	800d810 <USBD_GetConfig+0x34>
 800d808:	e015      	b.n	800d836 <USBD_GetConfig+0x5a>
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d00b      	beq.n	800d826 <USBD_GetConfig+0x4a>
 800d80e:	e012      	b.n	800d836 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	3308      	adds	r3, #8
 800d81a:	2201      	movs	r2, #1
 800d81c:	4619      	mov	r1, r3
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 f927 	bl	800da72 <USBD_CtlSendData>
        break;
 800d824:	e00c      	b.n	800d840 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	3304      	adds	r3, #4
 800d82a:	2201      	movs	r2, #1
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 f91f 	bl	800da72 <USBD_CtlSendData>
        break;
 800d834:	e004      	b.n	800d840 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d836:	6839      	ldr	r1, [r7, #0]
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f000 f8a9 	bl	800d990 <USBD_CtlError>
        break;
 800d83e:	bf00      	nop
}
 800d840:	bf00      	nop
 800d842:	3708      	adds	r7, #8
 800d844:	46bd      	mov	sp, r7
 800d846:	bd80      	pop	{r7, pc}

0800d848 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b082      	sub	sp, #8
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]
 800d850:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	3b01      	subs	r3, #1
 800d85c:	2b02      	cmp	r3, #2
 800d85e:	d81e      	bhi.n	800d89e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	88db      	ldrh	r3, [r3, #6]
 800d864:	2b02      	cmp	r3, #2
 800d866:	d004      	beq.n	800d872 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d868:	6839      	ldr	r1, [r7, #0]
 800d86a:	6878      	ldr	r0, [r7, #4]
 800d86c:	f000 f890 	bl	800d990 <USBD_CtlError>
        break;
 800d870:	e01a      	b.n	800d8a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2201      	movs	r2, #1
 800d876:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d005      	beq.n	800d88e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	f043 0202 	orr.w	r2, r3, #2
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	330c      	adds	r3, #12
 800d892:	2202      	movs	r2, #2
 800d894:	4619      	mov	r1, r3
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 f8eb 	bl	800da72 <USBD_CtlSendData>
      break;
 800d89c:	e004      	b.n	800d8a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f875 	bl	800d990 <USBD_CtlError>
      break;
 800d8a6:	bf00      	nop
  }
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8ba:	683b      	ldr	r3, [r7, #0]
 800d8bc:	885b      	ldrh	r3, [r3, #2]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d106      	bne.n	800d8d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f92b 	bl	800db26 <USBD_CtlSendStatus>
  }
}
 800d8d0:	bf00      	nop
 800d8d2:	3708      	adds	r7, #8
 800d8d4:	46bd      	mov	sp, r7
 800d8d6:	bd80      	pop	{r7, pc}

0800d8d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b082      	sub	sp, #8
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8e8:	b2db      	uxtb	r3, r3
 800d8ea:	3b01      	subs	r3, #1
 800d8ec:	2b02      	cmp	r3, #2
 800d8ee:	d80b      	bhi.n	800d908 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8f0:	683b      	ldr	r3, [r7, #0]
 800d8f2:	885b      	ldrh	r3, [r3, #2]
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	d10c      	bne.n	800d912 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 f910 	bl	800db26 <USBD_CtlSendStatus>
      }
      break;
 800d906:	e004      	b.n	800d912 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d908:	6839      	ldr	r1, [r7, #0]
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f000 f840 	bl	800d990 <USBD_CtlError>
      break;
 800d910:	e000      	b.n	800d914 <USBD_ClrFeature+0x3c>
      break;
 800d912:	bf00      	nop
  }
}
 800d914:	bf00      	nop
 800d916:	3708      	adds	r7, #8
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}

0800d91c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	781a      	ldrb	r2, [r3, #0]
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	3301      	adds	r3, #1
 800d936:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	781a      	ldrb	r2, [r3, #0]
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	3301      	adds	r3, #1
 800d944:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d946:	68f8      	ldr	r0, [r7, #12]
 800d948:	f7ff fa91 	bl	800ce6e <SWAPBYTE>
 800d94c:	4603      	mov	r3, r0
 800d94e:	461a      	mov	r2, r3
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	3301      	adds	r3, #1
 800d958:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	3301      	adds	r3, #1
 800d95e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d960:	68f8      	ldr	r0, [r7, #12]
 800d962:	f7ff fa84 	bl	800ce6e <SWAPBYTE>
 800d966:	4603      	mov	r3, r0
 800d968:	461a      	mov	r2, r3
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	3301      	adds	r3, #1
 800d972:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d97a:	68f8      	ldr	r0, [r7, #12]
 800d97c:	f7ff fa77 	bl	800ce6e <SWAPBYTE>
 800d980:	4603      	mov	r3, r0
 800d982:	461a      	mov	r2, r3
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	80da      	strh	r2, [r3, #6]
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d99a:	2180      	movs	r1, #128	; 0x80
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f000 fd2d 	bl	800e3fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d9a2:	2100      	movs	r1, #0
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fd29 	bl	800e3fc <USBD_LL_StallEP>
}
 800d9aa:	bf00      	nop
 800d9ac:	3708      	adds	r7, #8
 800d9ae:	46bd      	mov	sp, r7
 800d9b0:	bd80      	pop	{r7, pc}

0800d9b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d9b2:	b580      	push	{r7, lr}
 800d9b4:	b086      	sub	sp, #24
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	60f8      	str	r0, [r7, #12]
 800d9ba:	60b9      	str	r1, [r7, #8]
 800d9bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d036      	beq.n	800da36 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d9cc:	6938      	ldr	r0, [r7, #16]
 800d9ce:	f000 f836 	bl	800da3e <USBD_GetLen>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	b29b      	uxth	r3, r3
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	b29a      	uxth	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
 800d9e2:	68ba      	ldr	r2, [r7, #8]
 800d9e4:	4413      	add	r3, r2
 800d9e6:	687a      	ldr	r2, [r7, #4]
 800d9e8:	7812      	ldrb	r2, [r2, #0]
 800d9ea:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
 800d9ee:	3301      	adds	r3, #1
 800d9f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d9f2:	7dfb      	ldrb	r3, [r7, #23]
 800d9f4:	68ba      	ldr	r2, [r7, #8]
 800d9f6:	4413      	add	r3, r2
 800d9f8:	2203      	movs	r2, #3
 800d9fa:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9fc:	7dfb      	ldrb	r3, [r7, #23]
 800d9fe:	3301      	adds	r3, #1
 800da00:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800da02:	e013      	b.n	800da2c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800da04:	7dfb      	ldrb	r3, [r7, #23]
 800da06:	68ba      	ldr	r2, [r7, #8]
 800da08:	4413      	add	r3, r2
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	7812      	ldrb	r2, [r2, #0]
 800da0e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800da10:	693b      	ldr	r3, [r7, #16]
 800da12:	3301      	adds	r3, #1
 800da14:	613b      	str	r3, [r7, #16]
    idx++;
 800da16:	7dfb      	ldrb	r3, [r7, #23]
 800da18:	3301      	adds	r3, #1
 800da1a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800da1c:	7dfb      	ldrb	r3, [r7, #23]
 800da1e:	68ba      	ldr	r2, [r7, #8]
 800da20:	4413      	add	r3, r2
 800da22:	2200      	movs	r2, #0
 800da24:	701a      	strb	r2, [r3, #0]
    idx++;
 800da26:	7dfb      	ldrb	r3, [r7, #23]
 800da28:	3301      	adds	r3, #1
 800da2a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d1e7      	bne.n	800da04 <USBD_GetString+0x52>
 800da34:	e000      	b.n	800da38 <USBD_GetString+0x86>
    return;
 800da36:	bf00      	nop
  }
}
 800da38:	3718      	adds	r7, #24
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800da3e:	b480      	push	{r7}
 800da40:	b085      	sub	sp, #20
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da4e:	e005      	b.n	800da5c <USBD_GetLen+0x1e>
  {
    len++;
 800da50:	7bfb      	ldrb	r3, [r7, #15]
 800da52:	3301      	adds	r3, #1
 800da54:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	3301      	adds	r3, #1
 800da5a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d1f5      	bne.n	800da50 <USBD_GetLen+0x12>
  }

  return len;
 800da64:	7bfb      	ldrb	r3, [r7, #15]
}
 800da66:	4618      	mov	r0, r3
 800da68:	3714      	adds	r7, #20
 800da6a:	46bd      	mov	sp, r7
 800da6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da70:	4770      	bx	lr

0800da72 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da72:	b580      	push	{r7, lr}
 800da74:	b084      	sub	sp, #16
 800da76:	af00      	add	r7, sp, #0
 800da78:	60f8      	str	r0, [r7, #12]
 800da7a:	60b9      	str	r1, [r7, #8]
 800da7c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	2202      	movs	r2, #2
 800da82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	68ba      	ldr	r2, [r7, #8]
 800da96:	2100      	movs	r1, #0
 800da98:	68f8      	ldr	r0, [r7, #12]
 800da9a:	f000 fd7d 	bl	800e598 <USBD_LL_Transmit>

  return USBD_OK;
 800da9e:	2300      	movs	r3, #0
}
 800daa0:	4618      	mov	r0, r3
 800daa2:	3710      	adds	r7, #16
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	68ba      	ldr	r2, [r7, #8]
 800dab8:	2100      	movs	r1, #0
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f000 fd6c 	bl	800e598 <USBD_LL_Transmit>

  return USBD_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	60f8      	str	r0, [r7, #12]
 800dad2:	60b9      	str	r1, [r7, #8]
 800dad4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	2203      	movs	r2, #3
 800dada:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	687a      	ldr	r2, [r7, #4]
 800daea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	68ba      	ldr	r2, [r7, #8]
 800daf2:	2100      	movs	r1, #0
 800daf4:	68f8      	ldr	r0, [r7, #12]
 800daf6:	f000 fd87 	bl	800e608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3710      	adds	r7, #16
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	68ba      	ldr	r2, [r7, #8]
 800db14:	2100      	movs	r1, #0
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f000 fd76 	bl	800e608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db1c:	2300      	movs	r3, #0
}
 800db1e:	4618      	mov	r0, r3
 800db20:	3710      	adds	r7, #16
 800db22:	46bd      	mov	sp, r7
 800db24:	bd80      	pop	{r7, pc}

0800db26 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800db26:	b580      	push	{r7, lr}
 800db28:	b082      	sub	sp, #8
 800db2a:	af00      	add	r7, sp, #0
 800db2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	2204      	movs	r2, #4
 800db32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800db36:	2300      	movs	r3, #0
 800db38:	2200      	movs	r2, #0
 800db3a:	2100      	movs	r1, #0
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fd2b 	bl	800e598 <USBD_LL_Transmit>

  return USBD_OK;
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2205      	movs	r2, #5
 800db58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db5c:	2300      	movs	r3, #0
 800db5e:	2200      	movs	r2, #0
 800db60:	2100      	movs	r1, #0
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f000 fd50 	bl	800e608 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db68:	2300      	movs	r3, #0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}
	...

0800db74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db74:	b580      	push	{r7, lr}
 800db76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db78:	2200      	movs	r2, #0
 800db7a:	4912      	ldr	r1, [pc, #72]	; (800dbc4 <MX_USB_DEVICE_Init+0x50>)
 800db7c:	4812      	ldr	r0, [pc, #72]	; (800dbc8 <MX_USB_DEVICE_Init+0x54>)
 800db7e:	f7fe fe65 	bl	800c84c <USBD_Init>
 800db82:	4603      	mov	r3, r0
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db88:	f7f3 fca8 	bl	80014dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db8c:	490f      	ldr	r1, [pc, #60]	; (800dbcc <MX_USB_DEVICE_Init+0x58>)
 800db8e:	480e      	ldr	r0, [pc, #56]	; (800dbc8 <MX_USB_DEVICE_Init+0x54>)
 800db90:	f7fe fe8c 	bl	800c8ac <USBD_RegisterClass>
 800db94:	4603      	mov	r3, r0
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db9a:	f7f3 fc9f 	bl	80014dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db9e:	490c      	ldr	r1, [pc, #48]	; (800dbd0 <MX_USB_DEVICE_Init+0x5c>)
 800dba0:	4809      	ldr	r0, [pc, #36]	; (800dbc8 <MX_USB_DEVICE_Init+0x54>)
 800dba2:	f7fe fddd 	bl	800c760 <USBD_CDC_RegisterInterface>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d001      	beq.n	800dbb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dbac:	f7f3 fc96 	bl	80014dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dbb0:	4805      	ldr	r0, [pc, #20]	; (800dbc8 <MX_USB_DEVICE_Init+0x54>)
 800dbb2:	f7fe fea2 	bl	800c8fa <USBD_Start>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d001      	beq.n	800dbc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dbbc:	f7f3 fc8e 	bl	80014dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dbc0:	bf00      	nop
 800dbc2:	bd80      	pop	{r7, pc}
 800dbc4:	20000130 	.word	0x20000130
 800dbc8:	20000968 	.word	0x20000968
 800dbcc:	20000018 	.word	0x20000018
 800dbd0:	2000011c 	.word	0x2000011c

0800dbd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dbd8:	2200      	movs	r2, #0
 800dbda:	4905      	ldr	r1, [pc, #20]	; (800dbf0 <CDC_Init_FS+0x1c>)
 800dbdc:	4805      	ldr	r0, [pc, #20]	; (800dbf4 <CDC_Init_FS+0x20>)
 800dbde:	f7fe fdd4 	bl	800c78a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dbe2:	4905      	ldr	r1, [pc, #20]	; (800dbf8 <CDC_Init_FS+0x24>)
 800dbe4:	4803      	ldr	r0, [pc, #12]	; (800dbf4 <CDC_Init_FS+0x20>)
 800dbe6:	f7fe fdee 	bl	800c7c6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dbea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dbec:	4618      	mov	r0, r3
 800dbee:	bd80      	pop	{r7, pc}
 800dbf0:	20001438 	.word	0x20001438
 800dbf4:	20000968 	.word	0x20000968
 800dbf8:	20000c38 	.word	0x20000c38

0800dbfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dc00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b083      	sub	sp, #12
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	4603      	mov	r3, r0
 800dc14:	6039      	str	r1, [r7, #0]
 800dc16:	71fb      	strb	r3, [r7, #7]
 800dc18:	4613      	mov	r3, r2
 800dc1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dc1c:	79fb      	ldrb	r3, [r7, #7]
 800dc1e:	2b23      	cmp	r3, #35	; 0x23
 800dc20:	d84a      	bhi.n	800dcb8 <CDC_Control_FS+0xac>
 800dc22:	a201      	add	r2, pc, #4	; (adr r2, 800dc28 <CDC_Control_FS+0x1c>)
 800dc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc28:	0800dcb9 	.word	0x0800dcb9
 800dc2c:	0800dcb9 	.word	0x0800dcb9
 800dc30:	0800dcb9 	.word	0x0800dcb9
 800dc34:	0800dcb9 	.word	0x0800dcb9
 800dc38:	0800dcb9 	.word	0x0800dcb9
 800dc3c:	0800dcb9 	.word	0x0800dcb9
 800dc40:	0800dcb9 	.word	0x0800dcb9
 800dc44:	0800dcb9 	.word	0x0800dcb9
 800dc48:	0800dcb9 	.word	0x0800dcb9
 800dc4c:	0800dcb9 	.word	0x0800dcb9
 800dc50:	0800dcb9 	.word	0x0800dcb9
 800dc54:	0800dcb9 	.word	0x0800dcb9
 800dc58:	0800dcb9 	.word	0x0800dcb9
 800dc5c:	0800dcb9 	.word	0x0800dcb9
 800dc60:	0800dcb9 	.word	0x0800dcb9
 800dc64:	0800dcb9 	.word	0x0800dcb9
 800dc68:	0800dcb9 	.word	0x0800dcb9
 800dc6c:	0800dcb9 	.word	0x0800dcb9
 800dc70:	0800dcb9 	.word	0x0800dcb9
 800dc74:	0800dcb9 	.word	0x0800dcb9
 800dc78:	0800dcb9 	.word	0x0800dcb9
 800dc7c:	0800dcb9 	.word	0x0800dcb9
 800dc80:	0800dcb9 	.word	0x0800dcb9
 800dc84:	0800dcb9 	.word	0x0800dcb9
 800dc88:	0800dcb9 	.word	0x0800dcb9
 800dc8c:	0800dcb9 	.word	0x0800dcb9
 800dc90:	0800dcb9 	.word	0x0800dcb9
 800dc94:	0800dcb9 	.word	0x0800dcb9
 800dc98:	0800dcb9 	.word	0x0800dcb9
 800dc9c:	0800dcb9 	.word	0x0800dcb9
 800dca0:	0800dcb9 	.word	0x0800dcb9
 800dca4:	0800dcb9 	.word	0x0800dcb9
 800dca8:	0800dcb9 	.word	0x0800dcb9
 800dcac:	0800dcb9 	.word	0x0800dcb9
 800dcb0:	0800dcb9 	.word	0x0800dcb9
 800dcb4:	0800dcb9 	.word	0x0800dcb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dcb8:	bf00      	nop
  }

  return (USBD_OK);
 800dcba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	370c      	adds	r7, #12
 800dcc0:	46bd      	mov	sp, r7
 800dcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc6:	4770      	bx	lr

0800dcc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
 800dcd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dcd2:	6879      	ldr	r1, [r7, #4]
 800dcd4:	4805      	ldr	r0, [pc, #20]	; (800dcec <CDC_Receive_FS+0x24>)
 800dcd6:	f7fe fd76 	bl	800c7c6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dcda:	4804      	ldr	r0, [pc, #16]	; (800dcec <CDC_Receive_FS+0x24>)
 800dcdc:	f7fe fd8c 	bl	800c7f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dce0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	20000968 	.word	0x20000968

0800dcf0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd06:	4618      	mov	r0, r3
 800dd08:	371c      	adds	r7, #28
 800dd0a:	46bd      	mov	sp, r7
 800dd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd10:	4770      	bx	lr
	...

0800dd14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	6039      	str	r1, [r7, #0]
 800dd1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	2212      	movs	r2, #18
 800dd24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd26:	4b03      	ldr	r3, [pc, #12]	; (800dd34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr
 800dd34:	20000150 	.word	0x20000150

0800dd38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	4603      	mov	r3, r0
 800dd40:	6039      	str	r1, [r7, #0]
 800dd42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	2204      	movs	r2, #4
 800dd48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd4a:	4b03      	ldr	r3, [pc, #12]	; (800dd58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	370c      	adds	r7, #12
 800dd50:	46bd      	mov	sp, r7
 800dd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd56:	4770      	bx	lr
 800dd58:	20000170 	.word	0x20000170

0800dd5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b082      	sub	sp, #8
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	4603      	mov	r3, r0
 800dd64:	6039      	str	r1, [r7, #0]
 800dd66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd68:	79fb      	ldrb	r3, [r7, #7]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d105      	bne.n	800dd7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd6e:	683a      	ldr	r2, [r7, #0]
 800dd70:	4907      	ldr	r1, [pc, #28]	; (800dd90 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd72:	4808      	ldr	r0, [pc, #32]	; (800dd94 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd74:	f7ff fe1d 	bl	800d9b2 <USBD_GetString>
 800dd78:	e004      	b.n	800dd84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd7a:	683a      	ldr	r2, [r7, #0]
 800dd7c:	4904      	ldr	r1, [pc, #16]	; (800dd90 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd7e:	4805      	ldr	r0, [pc, #20]	; (800dd94 <USBD_FS_ProductStrDescriptor+0x38>)
 800dd80:	f7ff fe17 	bl	800d9b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd84:	4b02      	ldr	r3, [pc, #8]	; (800dd90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3708      	adds	r7, #8
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	20001c38 	.word	0x20001c38
 800dd94:	0800e7f8 	.word	0x0800e7f8

0800dd98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b082      	sub	sp, #8
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	4603      	mov	r3, r0
 800dda0:	6039      	str	r1, [r7, #0]
 800dda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dda4:	683a      	ldr	r2, [r7, #0]
 800dda6:	4904      	ldr	r1, [pc, #16]	; (800ddb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dda8:	4804      	ldr	r0, [pc, #16]	; (800ddbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ddaa:	f7ff fe02 	bl	800d9b2 <USBD_GetString>
  return USBD_StrDesc;
 800ddae:	4b02      	ldr	r3, [pc, #8]	; (800ddb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}
 800ddb8:	20001c38 	.word	0x20001c38
 800ddbc:	0800e810 	.word	0x0800e810

0800ddc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	6039      	str	r1, [r7, #0]
 800ddca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddcc:	683b      	ldr	r3, [r7, #0]
 800ddce:	221a      	movs	r2, #26
 800ddd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddd2:	f000 f855 	bl	800de80 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddd6:	4b02      	ldr	r3, [pc, #8]	; (800dde0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3708      	adds	r7, #8
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20000174 	.word	0x20000174

0800dde4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b082      	sub	sp, #8
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	6039      	str	r1, [r7, #0]
 800ddee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddf0:	79fb      	ldrb	r3, [r7, #7]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d105      	bne.n	800de02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddf6:	683a      	ldr	r2, [r7, #0]
 800ddf8:	4907      	ldr	r1, [pc, #28]	; (800de18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ddfa:	4808      	ldr	r0, [pc, #32]	; (800de1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800ddfc:	f7ff fdd9 	bl	800d9b2 <USBD_GetString>
 800de00:	e004      	b.n	800de0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de02:	683a      	ldr	r2, [r7, #0]
 800de04:	4904      	ldr	r1, [pc, #16]	; (800de18 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de06:	4805      	ldr	r0, [pc, #20]	; (800de1c <USBD_FS_ConfigStrDescriptor+0x38>)
 800de08:	f7ff fdd3 	bl	800d9b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de0c:	4b02      	ldr	r3, [pc, #8]	; (800de18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
 800de16:	bf00      	nop
 800de18:	20001c38 	.word	0x20001c38
 800de1c:	0800e824 	.word	0x0800e824

0800de20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b082      	sub	sp, #8
 800de24:	af00      	add	r7, sp, #0
 800de26:	4603      	mov	r3, r0
 800de28:	6039      	str	r1, [r7, #0]
 800de2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d105      	bne.n	800de3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de32:	683a      	ldr	r2, [r7, #0]
 800de34:	4907      	ldr	r1, [pc, #28]	; (800de54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de36:	4808      	ldr	r0, [pc, #32]	; (800de58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de38:	f7ff fdbb 	bl	800d9b2 <USBD_GetString>
 800de3c:	e004      	b.n	800de48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de3e:	683a      	ldr	r2, [r7, #0]
 800de40:	4904      	ldr	r1, [pc, #16]	; (800de54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de42:	4805      	ldr	r0, [pc, #20]	; (800de58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de44:	f7ff fdb5 	bl	800d9b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de48:	4b02      	ldr	r3, [pc, #8]	; (800de54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de4a:	4618      	mov	r0, r3
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	20001c38 	.word	0x20001c38
 800de58:	0800e830 	.word	0x0800e830

0800de5c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b083      	sub	sp, #12
 800de60:	af00      	add	r7, sp, #0
 800de62:	4603      	mov	r3, r0
 800de64:	6039      	str	r1, [r7, #0]
 800de66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	220c      	movs	r2, #12
 800de6c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800de6e:	4b03      	ldr	r3, [pc, #12]	; (800de7c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800de70:	4618      	mov	r0, r3
 800de72:	370c      	adds	r7, #12
 800de74:	46bd      	mov	sp, r7
 800de76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7a:	4770      	bx	lr
 800de7c:	20000164 	.word	0x20000164

0800de80 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de86:	4b0f      	ldr	r3, [pc, #60]	; (800dec4 <Get_SerialNum+0x44>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de8c:	4b0e      	ldr	r3, [pc, #56]	; (800dec8 <Get_SerialNum+0x48>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de92:	4b0e      	ldr	r3, [pc, #56]	; (800decc <Get_SerialNum+0x4c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	4413      	add	r3, r2
 800de9e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d009      	beq.n	800deba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dea6:	2208      	movs	r2, #8
 800dea8:	4909      	ldr	r1, [pc, #36]	; (800ded0 <Get_SerialNum+0x50>)
 800deaa:	68f8      	ldr	r0, [r7, #12]
 800deac:	f000 f814 	bl	800ded8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800deb0:	2204      	movs	r2, #4
 800deb2:	4908      	ldr	r1, [pc, #32]	; (800ded4 <Get_SerialNum+0x54>)
 800deb4:	68b8      	ldr	r0, [r7, #8]
 800deb6:	f000 f80f 	bl	800ded8 <IntToUnicode>
  }
}
 800deba:	bf00      	nop
 800debc:	3710      	adds	r7, #16
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	1fff7590 	.word	0x1fff7590
 800dec8:	1fff7594 	.word	0x1fff7594
 800decc:	1fff7598 	.word	0x1fff7598
 800ded0:	20000176 	.word	0x20000176
 800ded4:	20000186 	.word	0x20000186

0800ded8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ded8:	b480      	push	{r7}
 800deda:	b087      	sub	sp, #28
 800dedc:	af00      	add	r7, sp, #0
 800dede:	60f8      	str	r0, [r7, #12]
 800dee0:	60b9      	str	r1, [r7, #8]
 800dee2:	4613      	mov	r3, r2
 800dee4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dee6:	2300      	movs	r3, #0
 800dee8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800deea:	2300      	movs	r3, #0
 800deec:	75fb      	strb	r3, [r7, #23]
 800deee:	e027      	b.n	800df40 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	0f1b      	lsrs	r3, r3, #28
 800def4:	2b09      	cmp	r3, #9
 800def6:	d80b      	bhi.n	800df10 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	0f1b      	lsrs	r3, r3, #28
 800defc:	b2da      	uxtb	r2, r3
 800defe:	7dfb      	ldrb	r3, [r7, #23]
 800df00:	005b      	lsls	r3, r3, #1
 800df02:	4619      	mov	r1, r3
 800df04:	68bb      	ldr	r3, [r7, #8]
 800df06:	440b      	add	r3, r1
 800df08:	3230      	adds	r2, #48	; 0x30
 800df0a:	b2d2      	uxtb	r2, r2
 800df0c:	701a      	strb	r2, [r3, #0]
 800df0e:	e00a      	b.n	800df26 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	0f1b      	lsrs	r3, r3, #28
 800df14:	b2da      	uxtb	r2, r3
 800df16:	7dfb      	ldrb	r3, [r7, #23]
 800df18:	005b      	lsls	r3, r3, #1
 800df1a:	4619      	mov	r1, r3
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	440b      	add	r3, r1
 800df20:	3237      	adds	r2, #55	; 0x37
 800df22:	b2d2      	uxtb	r2, r2
 800df24:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	011b      	lsls	r3, r3, #4
 800df2a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df2c:	7dfb      	ldrb	r3, [r7, #23]
 800df2e:	005b      	lsls	r3, r3, #1
 800df30:	3301      	adds	r3, #1
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	4413      	add	r3, r2
 800df36:	2200      	movs	r2, #0
 800df38:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df3a:	7dfb      	ldrb	r3, [r7, #23]
 800df3c:	3301      	adds	r3, #1
 800df3e:	75fb      	strb	r3, [r7, #23]
 800df40:	7dfa      	ldrb	r2, [r7, #23]
 800df42:	79fb      	ldrb	r3, [r7, #7]
 800df44:	429a      	cmp	r2, r3
 800df46:	d3d3      	bcc.n	800def0 <IntToUnicode+0x18>
  }
}
 800df48:	bf00      	nop
 800df4a:	bf00      	nop
 800df4c:	371c      	adds	r7, #28
 800df4e:	46bd      	mov	sp, r7
 800df50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df54:	4770      	bx	lr
	...

0800df58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b08a      	sub	sp, #40	; 0x28
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df60:	f107 0314 	add.w	r3, r7, #20
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	605a      	str	r2, [r3, #4]
 800df6a:	609a      	str	r2, [r3, #8]
 800df6c:	60da      	str	r2, [r3, #12]
 800df6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df78:	d146      	bne.n	800e008 <HAL_PCD_MspInit+0xb0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df7a:	4b25      	ldr	r3, [pc, #148]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800df7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df7e:	4a24      	ldr	r2, [pc, #144]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800df80:	f043 0301 	orr.w	r3, r3, #1
 800df84:	64d3      	str	r3, [r2, #76]	; 0x4c
 800df86:	4b22      	ldr	r3, [pc, #136]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800df88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df8a:	f003 0301 	and.w	r3, r3, #1
 800df8e:	613b      	str	r3, [r7, #16]
 800df90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID
    */
    GPIO_InitStruct.Pin = USB_OTGFS_DP_Pin|USB_OTGFS_DM_Pin|USB_OTGFS_ID_Pin;
 800df92:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800df96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df98:	2302      	movs	r3, #2
 800df9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df9c:	2300      	movs	r3, #0
 800df9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800dfa0:	2303      	movs	r3, #3
 800dfa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfa4:	230a      	movs	r3, #10
 800dfa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfa8:	f107 0314 	add.w	r3, r7, #20
 800dfac:	4619      	mov	r1, r3
 800dfae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800dfb2:	f7f5 fd19 	bl	80039e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dfb6:	4b16      	ldr	r3, [pc, #88]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfba:	4a15      	ldr	r2, [pc, #84]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800dfc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800dfc2:	4b13      	ldr	r3, [pc, #76]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dfce:	4b10      	ldr	r3, [pc, #64]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d114      	bne.n	800e004 <HAL_PCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dfda:	4b0d      	ldr	r3, [pc, #52]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfde:	4a0c      	ldr	r2, [pc, #48]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfe4:	6593      	str	r3, [r2, #88]	; 0x58
 800dfe6:	4b0a      	ldr	r3, [pc, #40]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dfe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfee:	60bb      	str	r3, [r7, #8]
 800dff0:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800dff2:	f7f7 fa17 	bl	8005424 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dff6:	4b06      	ldr	r3, [pc, #24]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dff8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dffa:	4a05      	ldr	r2, [pc, #20]	; (800e010 <HAL_PCD_MspInit+0xb8>)
 800dffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e000:	6593      	str	r3, [r2, #88]	; 0x58
    /* Peripheral interrupt init */
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e002:	e001      	b.n	800e008 <HAL_PCD_MspInit+0xb0>
      HAL_PWREx_EnableVddUSB();
 800e004:	f7f7 fa0e 	bl	8005424 <HAL_PWREx_EnableVddUSB>
}
 800e008:	bf00      	nop
 800e00a:	3728      	adds	r7, #40	; 0x28
 800e00c:	46bd      	mov	sp, r7
 800e00e:	bd80      	pop	{r7, pc}
 800e010:	40021000 	.word	0x40021000

0800e014 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b082      	sub	sp, #8
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e028:	4619      	mov	r1, r3
 800e02a:	4610      	mov	r0, r2
 800e02c:	f7fe fcb0 	bl	800c990 <USBD_LL_SetupStage>
}
 800e030:	bf00      	nop
 800e032:	3708      	adds	r7, #8
 800e034:	46bd      	mov	sp, r7
 800e036:	bd80      	pop	{r7, pc}

0800e038 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e038:	b580      	push	{r7, lr}
 800e03a:	b082      	sub	sp, #8
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	460b      	mov	r3, r1
 800e042:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e04a:	78fa      	ldrb	r2, [r7, #3]
 800e04c:	6879      	ldr	r1, [r7, #4]
 800e04e:	4613      	mov	r3, r2
 800e050:	00db      	lsls	r3, r3, #3
 800e052:	4413      	add	r3, r2
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	440b      	add	r3, r1
 800e058:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	78fb      	ldrb	r3, [r7, #3]
 800e060:	4619      	mov	r1, r3
 800e062:	f7fe fcea 	bl	800ca3a <USBD_LL_DataOutStage>
}
 800e066:	bf00      	nop
 800e068:	3708      	adds	r7, #8
 800e06a:	46bd      	mov	sp, r7
 800e06c:	bd80      	pop	{r7, pc}

0800e06e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e06e:	b580      	push	{r7, lr}
 800e070:	b082      	sub	sp, #8
 800e072:	af00      	add	r7, sp, #0
 800e074:	6078      	str	r0, [r7, #4]
 800e076:	460b      	mov	r3, r1
 800e078:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e080:	78fa      	ldrb	r2, [r7, #3]
 800e082:	6879      	ldr	r1, [r7, #4]
 800e084:	4613      	mov	r3, r2
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	4413      	add	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	440b      	add	r3, r1
 800e08e:	334c      	adds	r3, #76	; 0x4c
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	78fb      	ldrb	r3, [r7, #3]
 800e094:	4619      	mov	r1, r3
 800e096:	f7fe fd33 	bl	800cb00 <USBD_LL_DataInStage>
}
 800e09a:	bf00      	nop
 800e09c:	3708      	adds	r7, #8
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}

0800e0a2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0a2:	b580      	push	{r7, lr}
 800e0a4:	b082      	sub	sp, #8
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	f7fe fe47 	bl	800cd44 <USBD_LL_SOF>
}
 800e0b6:	bf00      	nop
 800e0b8:	3708      	adds	r7, #8
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd80      	pop	{r7, pc}

0800e0be <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0be:	b580      	push	{r7, lr}
 800e0c0:	b084      	sub	sp, #16
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	68db      	ldr	r3, [r3, #12]
 800e0ce:	2b02      	cmp	r3, #2
 800e0d0:	d001      	beq.n	800e0d6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e0d2:	f7f3 fa03 	bl	80014dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0dc:	7bfa      	ldrb	r2, [r7, #15]
 800e0de:	4611      	mov	r1, r2
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe fdf1 	bl	800ccc8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fe fd9d 	bl	800cc2c <USBD_LL_Reset>
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
	...

0800e0fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	687a      	ldr	r2, [r7, #4]
 800e110:	6812      	ldr	r2, [r2, #0]
 800e112:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e116:	f043 0301 	orr.w	r3, r3, #1
 800e11a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e122:	4618      	mov	r0, r3
 800e124:	f7fe fde0 	bl	800cce8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a1b      	ldr	r3, [r3, #32]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d005      	beq.n	800e13c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e130:	4b04      	ldr	r3, [pc, #16]	; (800e144 <HAL_PCD_SuspendCallback+0x48>)
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	4a03      	ldr	r2, [pc, #12]	; (800e144 <HAL_PCD_SuspendCallback+0x48>)
 800e136:	f043 0306 	orr.w	r3, r3, #6
 800e13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	e000ed00 	.word	0xe000ed00

0800e148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	687a      	ldr	r2, [r7, #4]
 800e15c:	6812      	ldr	r2, [r2, #0]
 800e15e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e162:	f023 0301 	bic.w	r3, r3, #1
 800e166:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	6a1b      	ldr	r3, [r3, #32]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d007      	beq.n	800e180 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e170:	4b08      	ldr	r3, [pc, #32]	; (800e194 <HAL_PCD_ResumeCallback+0x4c>)
 800e172:	691b      	ldr	r3, [r3, #16]
 800e174:	4a07      	ldr	r2, [pc, #28]	; (800e194 <HAL_PCD_ResumeCallback+0x4c>)
 800e176:	f023 0306 	bic.w	r3, r3, #6
 800e17a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e17c:	f000 faf6 	bl	800e76c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e186:	4618      	mov	r0, r3
 800e188:	f7fe fdc4 	bl	800cd14 <USBD_LL_Resume>
}
 800e18c:	bf00      	nop
 800e18e:	3708      	adds	r7, #8
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	e000ed00 	.word	0xe000ed00

0800e198 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1aa:	78fa      	ldrb	r2, [r7, #3]
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe fe10 	bl	800cdd4 <USBD_LL_IsoOUTIncomplete>
}
 800e1b4:	bf00      	nop
 800e1b6:	3708      	adds	r7, #8
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	bd80      	pop	{r7, pc}

0800e1bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	460b      	mov	r3, r1
 800e1c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1ce:	78fa      	ldrb	r2, [r7, #3]
 800e1d0:	4611      	mov	r1, r2
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fdd8 	bl	800cd88 <USBD_LL_IsoINIncomplete>
}
 800e1d8:	bf00      	nop
 800e1da:	3708      	adds	r7, #8
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fe16 	bl	800ce20 <USBD_LL_DevConnected>
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe fe13 	bl	800ce36 <USBD_LL_DevDisconnected>
}
 800e210:	bf00      	nop
 800e212:	3708      	adds	r7, #8
 800e214:	46bd      	mov	sp, r7
 800e216:	bd80      	pop	{r7, pc}

0800e218 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b082      	sub	sp, #8
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d13c      	bne.n	800e2a2 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e228:	4a20      	ldr	r2, [pc, #128]	; (800e2ac <USBD_LL_Init+0x94>)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4a1e      	ldr	r2, [pc, #120]	; (800e2ac <USBD_LL_Init+0x94>)
 800e234:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e238:	4b1c      	ldr	r3, [pc, #112]	; (800e2ac <USBD_LL_Init+0x94>)
 800e23a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e23e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800e240:	4b1a      	ldr	r3, [pc, #104]	; (800e2ac <USBD_LL_Init+0x94>)
 800e242:	2206      	movs	r2, #6
 800e244:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e246:	4b19      	ldr	r3, [pc, #100]	; (800e2ac <USBD_LL_Init+0x94>)
 800e248:	2202      	movs	r2, #2
 800e24a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e24c:	4b17      	ldr	r3, [pc, #92]	; (800e2ac <USBD_LL_Init+0x94>)
 800e24e:	2202      	movs	r2, #2
 800e250:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e252:	4b16      	ldr	r3, [pc, #88]	; (800e2ac <USBD_LL_Init+0x94>)
 800e254:	2200      	movs	r2, #0
 800e256:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e258:	4b14      	ldr	r3, [pc, #80]	; (800e2ac <USBD_LL_Init+0x94>)
 800e25a:	2200      	movs	r2, #0
 800e25c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e25e:	4b13      	ldr	r3, [pc, #76]	; (800e2ac <USBD_LL_Init+0x94>)
 800e260:	2200      	movs	r2, #0
 800e262:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800e264:	4b11      	ldr	r3, [pc, #68]	; (800e2ac <USBD_LL_Init+0x94>)
 800e266:	2200      	movs	r2, #0
 800e268:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e26a:	4b10      	ldr	r3, [pc, #64]	; (800e2ac <USBD_LL_Init+0x94>)
 800e26c:	2200      	movs	r2, #0
 800e26e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e270:	4b0e      	ldr	r3, [pc, #56]	; (800e2ac <USBD_LL_Init+0x94>)
 800e272:	2200      	movs	r2, #0
 800e274:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e276:	480d      	ldr	r0, [pc, #52]	; (800e2ac <USBD_LL_Init+0x94>)
 800e278:	f7f5 fea0 	bl	8003fbc <HAL_PCD_Init>
 800e27c:	4603      	mov	r3, r0
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d001      	beq.n	800e286 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e282:	f7f3 f92b 	bl	80014dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e286:	2180      	movs	r1, #128	; 0x80
 800e288:	4808      	ldr	r0, [pc, #32]	; (800e2ac <USBD_LL_Init+0x94>)
 800e28a:	f7f7 f822 	bl	80052d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e28e:	2240      	movs	r2, #64	; 0x40
 800e290:	2100      	movs	r1, #0
 800e292:	4806      	ldr	r0, [pc, #24]	; (800e2ac <USBD_LL_Init+0x94>)
 800e294:	f7f6 ffd6 	bl	8005244 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e298:	2280      	movs	r2, #128	; 0x80
 800e29a:	2101      	movs	r1, #1
 800e29c:	4803      	ldr	r0, [pc, #12]	; (800e2ac <USBD_LL_Init+0x94>)
 800e29e:	f7f6 ffd1 	bl	8005244 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	20001e38 	.word	0x20001e38

0800e2b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b084      	sub	sp, #16
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f5 ff9c 	bl	8004204 <HAL_PCD_Start>
 800e2cc:	4603      	mov	r3, r0
 800e2ce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e2d0:	7bbb      	ldrb	r3, [r7, #14]
 800e2d2:	2b03      	cmp	r3, #3
 800e2d4:	d816      	bhi.n	800e304 <USBD_LL_Start+0x54>
 800e2d6:	a201      	add	r2, pc, #4	; (adr r2, 800e2dc <USBD_LL_Start+0x2c>)
 800e2d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2dc:	0800e2ed 	.word	0x0800e2ed
 800e2e0:	0800e2f3 	.word	0x0800e2f3
 800e2e4:	0800e2f9 	.word	0x0800e2f9
 800e2e8:	0800e2ff 	.word	0x0800e2ff
    case HAL_OK :
      usb_status = USBD_OK;
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f0:	e00b      	b.n	800e30a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e2f2:	2303      	movs	r3, #3
 800e2f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e2f6:	e008      	b.n	800e30a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e2f8:	2301      	movs	r3, #1
 800e2fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e2fc:	e005      	b.n	800e30a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e2fe:	2303      	movs	r3, #3
 800e300:	73fb      	strb	r3, [r7, #15]
    break;
 800e302:	e002      	b.n	800e30a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800e304:	2303      	movs	r3, #3
 800e306:	73fb      	strb	r3, [r7, #15]
    break;
 800e308:	bf00      	nop
  }
  return usb_status;
 800e30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e30c:	4618      	mov	r0, r3
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}

0800e314 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	4608      	mov	r0, r1
 800e31e:	4611      	mov	r1, r2
 800e320:	461a      	mov	r2, r3
 800e322:	4603      	mov	r3, r0
 800e324:	70fb      	strb	r3, [r7, #3]
 800e326:	460b      	mov	r3, r1
 800e328:	70bb      	strb	r3, [r7, #2]
 800e32a:	4613      	mov	r3, r2
 800e32c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e32e:	2300      	movs	r3, #0
 800e330:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e332:	2300      	movs	r3, #0
 800e334:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e33c:	78bb      	ldrb	r3, [r7, #2]
 800e33e:	883a      	ldrh	r2, [r7, #0]
 800e340:	78f9      	ldrb	r1, [r7, #3]
 800e342:	f7f6 fc46 	bl	8004bd2 <HAL_PCD_EP_Open>
 800e346:	4603      	mov	r3, r0
 800e348:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e34a:	7bbb      	ldrb	r3, [r7, #14]
 800e34c:	2b03      	cmp	r3, #3
 800e34e:	d817      	bhi.n	800e380 <USBD_LL_OpenEP+0x6c>
 800e350:	a201      	add	r2, pc, #4	; (adr r2, 800e358 <USBD_LL_OpenEP+0x44>)
 800e352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e356:	bf00      	nop
 800e358:	0800e369 	.word	0x0800e369
 800e35c:	0800e36f 	.word	0x0800e36f
 800e360:	0800e375 	.word	0x0800e375
 800e364:	0800e37b 	.word	0x0800e37b
    case HAL_OK :
      usb_status = USBD_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	73fb      	strb	r3, [r7, #15]
    break;
 800e36c:	e00b      	b.n	800e386 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e36e:	2303      	movs	r3, #3
 800e370:	73fb      	strb	r3, [r7, #15]
    break;
 800e372:	e008      	b.n	800e386 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e374:	2301      	movs	r3, #1
 800e376:	73fb      	strb	r3, [r7, #15]
    break;
 800e378:	e005      	b.n	800e386 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e37a:	2303      	movs	r3, #3
 800e37c:	73fb      	strb	r3, [r7, #15]
    break;
 800e37e:	e002      	b.n	800e386 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800e380:	2303      	movs	r3, #3
 800e382:	73fb      	strb	r3, [r7, #15]
    break;
 800e384:	bf00      	nop
  }
  return usb_status;
 800e386:	7bfb      	ldrb	r3, [r7, #15]
}
 800e388:	4618      	mov	r0, r3
 800e38a:	3710      	adds	r7, #16
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}

0800e390 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e39c:	2300      	movs	r3, #0
 800e39e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e3aa:	78fa      	ldrb	r2, [r7, #3]
 800e3ac:	4611      	mov	r1, r2
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7f6 fc77 	bl	8004ca2 <HAL_PCD_EP_Close>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e3b8:	7bbb      	ldrb	r3, [r7, #14]
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d816      	bhi.n	800e3ec <USBD_LL_CloseEP+0x5c>
 800e3be:	a201      	add	r2, pc, #4	; (adr r2, 800e3c4 <USBD_LL_CloseEP+0x34>)
 800e3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3c4:	0800e3d5 	.word	0x0800e3d5
 800e3c8:	0800e3db 	.word	0x0800e3db
 800e3cc:	0800e3e1 	.word	0x0800e3e1
 800e3d0:	0800e3e7 	.word	0x0800e3e7
    case HAL_OK :
      usb_status = USBD_OK;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	73fb      	strb	r3, [r7, #15]
    break;
 800e3d8:	e00b      	b.n	800e3f2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	73fb      	strb	r3, [r7, #15]
    break;
 800e3de:	e008      	b.n	800e3f2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	73fb      	strb	r3, [r7, #15]
    break;
 800e3e4:	e005      	b.n	800e3f2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e3e6:	2303      	movs	r3, #3
 800e3e8:	73fb      	strb	r3, [r7, #15]
    break;
 800e3ea:	e002      	b.n	800e3f2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e3f0:	bf00      	nop
  }
  return usb_status;
 800e3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}

0800e3fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
 800e402:	6078      	str	r0, [r7, #4]
 800e404:	460b      	mov	r3, r1
 800e406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e408:	2300      	movs	r3, #0
 800e40a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e40c:	2300      	movs	r3, #0
 800e40e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e416:	78fa      	ldrb	r2, [r7, #3]
 800e418:	4611      	mov	r1, r2
 800e41a:	4618      	mov	r0, r3
 800e41c:	f7f6 fd1e 	bl	8004e5c <HAL_PCD_EP_SetStall>
 800e420:	4603      	mov	r3, r0
 800e422:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e424:	7bbb      	ldrb	r3, [r7, #14]
 800e426:	2b03      	cmp	r3, #3
 800e428:	d816      	bhi.n	800e458 <USBD_LL_StallEP+0x5c>
 800e42a:	a201      	add	r2, pc, #4	; (adr r2, 800e430 <USBD_LL_StallEP+0x34>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e441 	.word	0x0800e441
 800e434:	0800e447 	.word	0x0800e447
 800e438:	0800e44d 	.word	0x0800e44d
 800e43c:	0800e453 	.word	0x0800e453
    case HAL_OK :
      usb_status = USBD_OK;
 800e440:	2300      	movs	r3, #0
 800e442:	73fb      	strb	r3, [r7, #15]
    break;
 800e444:	e00b      	b.n	800e45e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e446:	2303      	movs	r3, #3
 800e448:	73fb      	strb	r3, [r7, #15]
    break;
 800e44a:	e008      	b.n	800e45e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e44c:	2301      	movs	r3, #1
 800e44e:	73fb      	strb	r3, [r7, #15]
    break;
 800e450:	e005      	b.n	800e45e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e452:	2303      	movs	r3, #3
 800e454:	73fb      	strb	r3, [r7, #15]
    break;
 800e456:	e002      	b.n	800e45e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e458:	2303      	movs	r3, #3
 800e45a:	73fb      	strb	r3, [r7, #15]
    break;
 800e45c:	bf00      	nop
  }
  return usb_status;
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e460:	4618      	mov	r0, r3
 800e462:	3710      	adds	r7, #16
 800e464:	46bd      	mov	sp, r7
 800e466:	bd80      	pop	{r7, pc}

0800e468 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b084      	sub	sp, #16
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
 800e470:	460b      	mov	r3, r1
 800e472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e474:	2300      	movs	r3, #0
 800e476:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e478:	2300      	movs	r3, #0
 800e47a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e482:	78fa      	ldrb	r2, [r7, #3]
 800e484:	4611      	mov	r1, r2
 800e486:	4618      	mov	r0, r3
 800e488:	f7f6 fd4a 	bl	8004f20 <HAL_PCD_EP_ClrStall>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e490:	7bbb      	ldrb	r3, [r7, #14]
 800e492:	2b03      	cmp	r3, #3
 800e494:	d816      	bhi.n	800e4c4 <USBD_LL_ClearStallEP+0x5c>
 800e496:	a201      	add	r2, pc, #4	; (adr r2, 800e49c <USBD_LL_ClearStallEP+0x34>)
 800e498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e49c:	0800e4ad 	.word	0x0800e4ad
 800e4a0:	0800e4b3 	.word	0x0800e4b3
 800e4a4:	0800e4b9 	.word	0x0800e4b9
 800e4a8:	0800e4bf 	.word	0x0800e4bf
    case HAL_OK :
      usb_status = USBD_OK;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e4b0:	e00b      	b.n	800e4ca <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e4b6:	e008      	b.n	800e4ca <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e4b8:	2301      	movs	r3, #1
 800e4ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e4bc:	e005      	b.n	800e4ca <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c2:	e002      	b.n	800e4ca <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	73fb      	strb	r3, [r7, #15]
    break;
 800e4c8:	bf00      	nop
  }
  return usb_status;
 800e4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b085      	sub	sp, #20
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	460b      	mov	r3, r1
 800e4de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e4e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	da0b      	bge.n	800e508 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e4f6:	68f9      	ldr	r1, [r7, #12]
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	00db      	lsls	r3, r3, #3
 800e4fc:	4413      	add	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	440b      	add	r3, r1
 800e502:	333e      	adds	r3, #62	; 0x3e
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	e00b      	b.n	800e520 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e508:	78fb      	ldrb	r3, [r7, #3]
 800e50a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e50e:	68f9      	ldr	r1, [r7, #12]
 800e510:	4613      	mov	r3, r2
 800e512:	00db      	lsls	r3, r3, #3
 800e514:	4413      	add	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	440b      	add	r3, r1
 800e51a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e51e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e520:	4618      	mov	r0, r3
 800e522:	3714      	adds	r7, #20
 800e524:	46bd      	mov	sp, r7
 800e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52a:	4770      	bx	lr

0800e52c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	460b      	mov	r3, r1
 800e536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e538:	2300      	movs	r3, #0
 800e53a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e546:	78fa      	ldrb	r2, [r7, #3]
 800e548:	4611      	mov	r1, r2
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7f6 fb1c 	bl	8004b88 <HAL_PCD_SetAddress>
 800e550:	4603      	mov	r3, r0
 800e552:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e554:	7bbb      	ldrb	r3, [r7, #14]
 800e556:	2b03      	cmp	r3, #3
 800e558:	d816      	bhi.n	800e588 <USBD_LL_SetUSBAddress+0x5c>
 800e55a:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <USBD_LL_SetUSBAddress+0x34>)
 800e55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e560:	0800e571 	.word	0x0800e571
 800e564:	0800e577 	.word	0x0800e577
 800e568:	0800e57d 	.word	0x0800e57d
 800e56c:	0800e583 	.word	0x0800e583
    case HAL_OK :
      usb_status = USBD_OK;
 800e570:	2300      	movs	r3, #0
 800e572:	73fb      	strb	r3, [r7, #15]
    break;
 800e574:	e00b      	b.n	800e58e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e576:	2303      	movs	r3, #3
 800e578:	73fb      	strb	r3, [r7, #15]
    break;
 800e57a:	e008      	b.n	800e58e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e57c:	2301      	movs	r3, #1
 800e57e:	73fb      	strb	r3, [r7, #15]
    break;
 800e580:	e005      	b.n	800e58e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e582:	2303      	movs	r3, #3
 800e584:	73fb      	strb	r3, [r7, #15]
    break;
 800e586:	e002      	b.n	800e58e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e588:	2303      	movs	r3, #3
 800e58a:	73fb      	strb	r3, [r7, #15]
    break;
 800e58c:	bf00      	nop
  }
  return usb_status;
 800e58e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	60f8      	str	r0, [r7, #12]
 800e5a0:	607a      	str	r2, [r7, #4]
 800e5a2:	603b      	str	r3, [r7, #0]
 800e5a4:	460b      	mov	r3, r1
 800e5a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e5b6:	7af9      	ldrb	r1, [r7, #11]
 800e5b8:	683b      	ldr	r3, [r7, #0]
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	f7f6 fc11 	bl	8004de2 <HAL_PCD_EP_Transmit>
 800e5c0:	4603      	mov	r3, r0
 800e5c2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e5c4:	7dbb      	ldrb	r3, [r7, #22]
 800e5c6:	2b03      	cmp	r3, #3
 800e5c8:	d816      	bhi.n	800e5f8 <USBD_LL_Transmit+0x60>
 800e5ca:	a201      	add	r2, pc, #4	; (adr r2, 800e5d0 <USBD_LL_Transmit+0x38>)
 800e5cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d0:	0800e5e1 	.word	0x0800e5e1
 800e5d4:	0800e5e7 	.word	0x0800e5e7
 800e5d8:	0800e5ed 	.word	0x0800e5ed
 800e5dc:	0800e5f3 	.word	0x0800e5f3
    case HAL_OK :
      usb_status = USBD_OK;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	75fb      	strb	r3, [r7, #23]
    break;
 800e5e4:	e00b      	b.n	800e5fe <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5e6:	2303      	movs	r3, #3
 800e5e8:	75fb      	strb	r3, [r7, #23]
    break;
 800e5ea:	e008      	b.n	800e5fe <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	75fb      	strb	r3, [r7, #23]
    break;
 800e5f0:	e005      	b.n	800e5fe <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	75fb      	strb	r3, [r7, #23]
    break;
 800e5f6:	e002      	b.n	800e5fe <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e5f8:	2303      	movs	r3, #3
 800e5fa:	75fb      	strb	r3, [r7, #23]
    break;
 800e5fc:	bf00      	nop
  }
  return usb_status;
 800e5fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e600:	4618      	mov	r0, r3
 800e602:	3718      	adds	r7, #24
 800e604:	46bd      	mov	sp, r7
 800e606:	bd80      	pop	{r7, pc}

0800e608 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	60f8      	str	r0, [r7, #12]
 800e610:	607a      	str	r2, [r7, #4]
 800e612:	603b      	str	r3, [r7, #0]
 800e614:	460b      	mov	r3, r1
 800e616:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e618:	2300      	movs	r3, #0
 800e61a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e61c:	2300      	movs	r3, #0
 800e61e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e626:	7af9      	ldrb	r1, [r7, #11]
 800e628:	683b      	ldr	r3, [r7, #0]
 800e62a:	687a      	ldr	r2, [r7, #4]
 800e62c:	f7f6 fb83 	bl	8004d36 <HAL_PCD_EP_Receive>
 800e630:	4603      	mov	r3, r0
 800e632:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e634:	7dbb      	ldrb	r3, [r7, #22]
 800e636:	2b03      	cmp	r3, #3
 800e638:	d816      	bhi.n	800e668 <USBD_LL_PrepareReceive+0x60>
 800e63a:	a201      	add	r2, pc, #4	; (adr r2, 800e640 <USBD_LL_PrepareReceive+0x38>)
 800e63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e640:	0800e651 	.word	0x0800e651
 800e644:	0800e657 	.word	0x0800e657
 800e648:	0800e65d 	.word	0x0800e65d
 800e64c:	0800e663 	.word	0x0800e663
    case HAL_OK :
      usb_status = USBD_OK;
 800e650:	2300      	movs	r3, #0
 800e652:	75fb      	strb	r3, [r7, #23]
    break;
 800e654:	e00b      	b.n	800e66e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e656:	2303      	movs	r3, #3
 800e658:	75fb      	strb	r3, [r7, #23]
    break;
 800e65a:	e008      	b.n	800e66e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e65c:	2301      	movs	r3, #1
 800e65e:	75fb      	strb	r3, [r7, #23]
    break;
 800e660:	e005      	b.n	800e66e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e662:	2303      	movs	r3, #3
 800e664:	75fb      	strb	r3, [r7, #23]
    break;
 800e666:	e002      	b.n	800e66e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e668:	2303      	movs	r3, #3
 800e66a:	75fb      	strb	r3, [r7, #23]
    break;
 800e66c:	bf00      	nop
  }
  return usb_status;
 800e66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e670:	4618      	mov	r0, r3
 800e672:	3718      	adds	r7, #24
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	460b      	mov	r3, r1
 800e682:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e68a:	78fa      	ldrb	r2, [r7, #3]
 800e68c:	4611      	mov	r1, r2
 800e68e:	4618      	mov	r0, r3
 800e690:	f7f6 fb8f 	bl	8004db2 <HAL_PCD_EP_GetRxCount>
 800e694:	4603      	mov	r3, r0
}
 800e696:	4618      	mov	r0, r3
 800e698:	3708      	adds	r7, #8
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
	...

0800e6a0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e6ac:	78fb      	ldrb	r3, [r7, #3]
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d002      	beq.n	800e6b8 <HAL_PCDEx_LPM_Callback+0x18>
 800e6b2:	2b01      	cmp	r3, #1
 800e6b4:	d01f      	beq.n	800e6f6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e6b6:	e03b      	b.n	800e730 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d007      	beq.n	800e6d0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e6c0:	f000 f854 	bl	800e76c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6c4:	4b1c      	ldr	r3, [pc, #112]	; (800e738 <HAL_PCDEx_LPM_Callback+0x98>)
 800e6c6:	691b      	ldr	r3, [r3, #16]
 800e6c8:	4a1b      	ldr	r2, [pc, #108]	; (800e738 <HAL_PCDEx_LPM_Callback+0x98>)
 800e6ca:	f023 0306 	bic.w	r3, r3, #6
 800e6ce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	687a      	ldr	r2, [r7, #4]
 800e6dc:	6812      	ldr	r2, [r2, #0]
 800e6de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e6e2:	f023 0301 	bic.w	r3, r3, #1
 800e6e6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	f7fe fb10 	bl	800cd14 <USBD_LL_Resume>
    break;
 800e6f4:	e01c      	b.n	800e730 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	6812      	ldr	r2, [r2, #0]
 800e704:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e708:	f043 0301 	orr.w	r3, r3, #1
 800e70c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e714:	4618      	mov	r0, r3
 800e716:	f7fe fae7 	bl	800cce8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	6a1b      	ldr	r3, [r3, #32]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d005      	beq.n	800e72e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e722:	4b05      	ldr	r3, [pc, #20]	; (800e738 <HAL_PCDEx_LPM_Callback+0x98>)
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	4a04      	ldr	r2, [pc, #16]	; (800e738 <HAL_PCDEx_LPM_Callback+0x98>)
 800e728:	f043 0306 	orr.w	r3, r3, #6
 800e72c:	6113      	str	r3, [r2, #16]
    break;
 800e72e:	bf00      	nop
}
 800e730:	bf00      	nop
 800e732:	3708      	adds	r7, #8
 800e734:	46bd      	mov	sp, r7
 800e736:	bd80      	pop	{r7, pc}
 800e738:	e000ed00 	.word	0xe000ed00

0800e73c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e73c:	b480      	push	{r7}
 800e73e:	b083      	sub	sp, #12
 800e740:	af00      	add	r7, sp, #0
 800e742:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e744:	4b03      	ldr	r3, [pc, #12]	; (800e754 <USBD_static_malloc+0x18>)
}
 800e746:	4618      	mov	r0, r3
 800e748:	370c      	adds	r7, #12
 800e74a:	46bd      	mov	sp, r7
 800e74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e750:	4770      	bx	lr
 800e752:	bf00      	nop
 800e754:	20002344 	.word	0x20002344

0800e758 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]

}
 800e760:	bf00      	nop
 800e762:	370c      	adds	r7, #12
 800e764:	46bd      	mov	sp, r7
 800e766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e76a:	4770      	bx	lr

0800e76c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e76c:	b580      	push	{r7, lr}
 800e76e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e770:	f7f1 ff4e 	bl	8000610 <SystemClock_Config>
}
 800e774:	bf00      	nop
 800e776:	bd80      	pop	{r7, pc}

0800e778 <__libc_init_array>:
 800e778:	b570      	push	{r4, r5, r6, lr}
 800e77a:	4d0d      	ldr	r5, [pc, #52]	; (800e7b0 <__libc_init_array+0x38>)
 800e77c:	4c0d      	ldr	r4, [pc, #52]	; (800e7b4 <__libc_init_array+0x3c>)
 800e77e:	1b64      	subs	r4, r4, r5
 800e780:	10a4      	asrs	r4, r4, #2
 800e782:	2600      	movs	r6, #0
 800e784:	42a6      	cmp	r6, r4
 800e786:	d109      	bne.n	800e79c <__libc_init_array+0x24>
 800e788:	4d0b      	ldr	r5, [pc, #44]	; (800e7b8 <__libc_init_array+0x40>)
 800e78a:	4c0c      	ldr	r4, [pc, #48]	; (800e7bc <__libc_init_array+0x44>)
 800e78c:	f000 f820 	bl	800e7d0 <_init>
 800e790:	1b64      	subs	r4, r4, r5
 800e792:	10a4      	asrs	r4, r4, #2
 800e794:	2600      	movs	r6, #0
 800e796:	42a6      	cmp	r6, r4
 800e798:	d105      	bne.n	800e7a6 <__libc_init_array+0x2e>
 800e79a:	bd70      	pop	{r4, r5, r6, pc}
 800e79c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7a0:	4798      	blx	r3
 800e7a2:	3601      	adds	r6, #1
 800e7a4:	e7ee      	b.n	800e784 <__libc_init_array+0xc>
 800e7a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e7aa:	4798      	blx	r3
 800e7ac:	3601      	adds	r6, #1
 800e7ae:	e7f2      	b.n	800e796 <__libc_init_array+0x1e>
 800e7b0:	0800e890 	.word	0x0800e890
 800e7b4:	0800e890 	.word	0x0800e890
 800e7b8:	0800e890 	.word	0x0800e890
 800e7bc:	0800e894 	.word	0x0800e894

0800e7c0 <memset>:
 800e7c0:	4402      	add	r2, r0
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d100      	bne.n	800e7ca <memset+0xa>
 800e7c8:	4770      	bx	lr
 800e7ca:	f803 1b01 	strb.w	r1, [r3], #1
 800e7ce:	e7f9      	b.n	800e7c4 <memset+0x4>

0800e7d0 <_init>:
 800e7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7d2:	bf00      	nop
 800e7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7d6:	bc08      	pop	{r3}
 800e7d8:	469e      	mov	lr, r3
 800e7da:	4770      	bx	lr

0800e7dc <_fini>:
 800e7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7de:	bf00      	nop
 800e7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7e2:	bc08      	pop	{r3}
 800e7e4:	469e      	mov	lr, r3
 800e7e6:	4770      	bx	lr
